// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "INTERFACE_STORE.hh"

namespace INTERFACE__STORE {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const CHARSTRING cs_3(15, "Element create!"),
cs_1(14, "Element found!"),
cs_2(18, "Element overwrite!"),
cs_0(17, "No element found!");
static const unsigned char module_checksum[] = { 0x3e, 0x8b, 0xf1, 0x60, 0x8d, 0x31, 0x33, 0x18, 0x07, 0x56, 0xd7, 0xa6, 0x2d, 0x25, 0xe2, 0xc1 };

/* Global variable definitions */

// No XER for UT__INTERFACE__STORE__Device
const TTCN_Typedescriptor_t UT__INTERFACE__STORE__Device_descr_ = { "@INTERFACE_STORE.UT_INTERFACE_STORE_Device", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for UT__INTERFACE__STORE__Controller
const TTCN_Typedescriptor_t UT__INTERFACE__STORE__Controller_descr_ = { "@INTERFACE_STORE.UT_INTERFACE_STORE_Controller", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RT__INTERFACE__STORE__InterfaceElement_Name_xer_ = { {"Name>\n", "Name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t RT__INTERFACE__STORE__InterfaceElement_Name_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t RT__INTERFACE__STORE__InterfaceElement_Name_descr_ = { "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.Name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RT__INTERFACE__STORE__InterfaceElement_Name_xer_, &RT__INTERFACE__STORE__InterfaceElement_Name_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RT__INTERFACE__STORE__InterfaceElement
const TTCN_Typedescriptor_t RT__INTERFACE__STORE__InterfaceElement_descr_ = { "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RT__INTERFACE__STORE__InterfaceElements
const TTCN_Typedescriptor_t RT__INTERFACE__STORE__InterfaceElements_descr_ = { "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements", NULL, NULL, NULL, NULL, NULL, NULL, &RT__INTERFACE__STORE__InterfaceElement_descr_, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& CT__INTERFACE__STORE__InterfaceStore_descr_ = COMPONENT_descr_;
RT__INTERFACE__STORE__InterfaceElements CT__INTERFACE__STORE__InterfaceStore_component_StoredElement;
PT__INTERFACE__STORE__InterfaceStorePort CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient("p_interfaceStoreClient");
const TTCN_Typedescriptor_t& CT__INTERFACE__STORE__InterfaceStoreClient_descr_ = COMPONENT_descr_;
PT__INTERFACE__STORE__InterfaceStorePort CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore("p_interfaceStore");
TTCN_Module module_object("INTERFACE_STORE", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, init_comp_type, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

void UT__INTERFACE__STORE__Device::copy_value(const UT__INTERFACE__STORE__Device& other_value)
{
switch (other_value.union_selection) {
case ALT_UV__GPIO:
field_UV__GPIO = new COMPONENT(*other_value.field_UV__GPIO);
break;
default:
TTCN_error("Assignment of an unbound union value of type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
union_selection = other_value.union_selection;
}

UT__INTERFACE__STORE__Device::UT__INTERFACE__STORE__Device()
{
union_selection = UNBOUND_VALUE;
}

UT__INTERFACE__STORE__Device::UT__INTERFACE__STORE__Device(const UT__INTERFACE__STORE__Device& other_value)
: Base_Type(){
copy_value(other_value);
}

UT__INTERFACE__STORE__Device::~UT__INTERFACE__STORE__Device()
{
clean_up();
}

UT__INTERFACE__STORE__Device& UT__INTERFACE__STORE__Device::operator=(const UT__INTERFACE__STORE__Device& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean UT__INTERFACE__STORE__Device::operator==(const UT__INTERFACE__STORE__Device& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_UV__GPIO:
return *field_UV__GPIO == *other_value.field_UV__GPIO;
default:
return FALSE;
}
}

COMPONENT& UT__INTERFACE__STORE__Device::UV__GPIO()
{
if (union_selection != ALT_UV__GPIO) {
clean_up();
field_UV__GPIO = new COMPONENT;
union_selection = ALT_UV__GPIO;
}
return *field_UV__GPIO;
}

const COMPONENT& UT__INTERFACE__STORE__Device::UV__GPIO() const
{
if (union_selection != ALT_UV__GPIO) TTCN_error("Using non-selected field UV_GPIO in a value of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
return *field_UV__GPIO;
}

boolean UT__INTERFACE__STORE__Device::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
return union_selection == checked_selection;
}

boolean UT__INTERFACE__STORE__Device::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean UT__INTERFACE__STORE__Device::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_UV__GPIO: return field_UV__GPIO->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void UT__INTERFACE__STORE__Device::clean_up()
{
switch (union_selection) {
case ALT_UV__GPIO:
  delete field_UV__GPIO;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void UT__INTERFACE__STORE__Device::log() const
{
switch (union_selection) {
case ALT_UV__GPIO:
TTCN_Logger::log_event_str("{ UV_GPIO := ");
field_UV__GPIO->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void UT__INTERFACE__STORE__Device::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr m_p = &param;
  if (m_p->get_type()==Module_Param::MP_Value_List && m_p->get_size()==0) return;
  if (m_p->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "UV_GPIO")) {
    UV__GPIO().set_param(*mp_last);
    if (!UV__GPIO().is_bound()) clean_up();
    return;
  }
  mp_last->error("Field %s does not exist in type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.", mp_last->get_id()->get_name());
}

void UT__INTERFACE__STORE__Device::set_implicit_omit()
{
switch (union_selection) {
case ALT_UV__GPIO:
field_UV__GPIO->set_implicit_omit(); break;
default: break;
}
}

void UT__INTERFACE__STORE__Device::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_UV__GPIO:
field_UV__GPIO->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
}

void UT__INTERFACE__STORE__Device::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_UV__GPIO:
UV__GPIO().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
}

void UT__INTERFACE__STORE__Device_template::copy_value(const UT__INTERFACE__STORE__Device& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
single_value.field_UV__GPIO = new COMPONENT_template(other_value.UV__GPIO());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
set_selection(SPECIFIC_VALUE);
}

void UT__INTERFACE__STORE__Device_template::copy_template(const UT__INTERFACE__STORE__Device_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
single_value.field_UV__GPIO = new COMPONENT_template(*other_value.single_value.field_UV__GPIO);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UT__INTERFACE__STORE__Device_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
set_selection(other_value);
}

UT__INTERFACE__STORE__Device_template::UT__INTERFACE__STORE__Device_template()
{
}

UT__INTERFACE__STORE__Device_template::UT__INTERFACE__STORE__Device_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UT__INTERFACE__STORE__Device_template::UT__INTERFACE__STORE__Device_template(const UT__INTERFACE__STORE__Device& other_value)
{
copy_value(other_value);
}

UT__INTERFACE__STORE__Device_template::UT__INTERFACE__STORE__Device_template(const OPTIONAL<UT__INTERFACE__STORE__Device>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UT__INTERFACE__STORE__Device&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device from an unbound optional field.");
}
}

UT__INTERFACE__STORE__Device_template::UT__INTERFACE__STORE__Device_template(const UT__INTERFACE__STORE__Device_template& other_value)
: Base_Template(){
copy_template(other_value);
}

UT__INTERFACE__STORE__Device_template::~UT__INTERFACE__STORE__Device_template()
{
clean_up();
}

void UT__INTERFACE__STORE__Device_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
delete single_value.field_UV__GPIO;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UT__INTERFACE__STORE__Device_template& UT__INTERFACE__STORE__Device_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UT__INTERFACE__STORE__Device_template& UT__INTERFACE__STORE__Device_template::operator=(const UT__INTERFACE__STORE__Device& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UT__INTERFACE__STORE__Device_template& UT__INTERFACE__STORE__Device_template::operator=(const OPTIONAL<UT__INTERFACE__STORE__Device>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UT__INTERFACE__STORE__Device&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
return *this;
}

UT__INTERFACE__STORE__Device_template& UT__INTERFACE__STORE__Device_template::operator=(const UT__INTERFACE__STORE__Device_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UT__INTERFACE__STORE__Device_template::match(const UT__INTERFACE__STORE__Device& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
UT__INTERFACE__STORE__Device::union_selection_type value_selection = other_value.get_selection();
if (value_selection == UT__INTERFACE__STORE__Device::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
return single_value.field_UV__GPIO->match(other_value.UV__GPIO(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
return FALSE;
}

boolean UT__INTERFACE__STORE__Device_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
return single_value.field_UV__GPIO->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
}

UT__INTERFACE__STORE__Device UT__INTERFACE__STORE__Device_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
UT__INTERFACE__STORE__Device ret_val;
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
ret_val.UV__GPIO() = single_value.field_UV__GPIO->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
return ret_val;
}

UT__INTERFACE__STORE__Device_template& UT__INTERFACE__STORE__Device_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
return value_list.list_value[list_index];
}
void UT__INTERFACE__STORE__Device_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UT__INTERFACE__STORE__Device_template[list_length];
}

COMPONENT_template& UT__INTERFACE__STORE__Device_template::UV__GPIO()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != UT__INTERFACE__STORE__Device::ALT_UV__GPIO) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_UV__GPIO = new COMPONENT_template(ANY_VALUE);
else single_value.field_UV__GPIO = new COMPONENT_template;
single_value.union_selection = UT__INTERFACE__STORE__Device::ALT_UV__GPIO;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_UV__GPIO;
}

const COMPONENT_template& UT__INTERFACE__STORE__Device_template::UV__GPIO() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field UV_GPIO in a non-specific template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
if (single_value.union_selection != UT__INTERFACE__STORE__Device::ALT_UV__GPIO) TTCN_error("Accessing non-selected field UV_GPIO in a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
return *single_value.field_UV__GPIO;
}

boolean UT__INTERFACE__STORE__Device_template::ischosen(UT__INTERFACE__STORE__Device::union_selection_type checked_selection) const
{
if (checked_selection == UT__INTERFACE__STORE__Device::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == UT__INTERFACE__STORE__Device::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
for (unsigned int list_count = 1; ret_val == TRUE && list_count < value_list.n_values; list_count++) {
ret_val = value_list.list_value[list_count].ischosen(checked_selection);
}
return ret_val;
}
default:
return FALSE;
}
return FALSE;
}

void UT__INTERFACE__STORE__Device_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
TTCN_Logger::log_event_str("{ UV_GPIO := ");
single_value.field_UV__GPIO->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UT__INTERFACE__STORE__Device_template::log_match(const UT__INTERFACE__STORE__Device& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".UV_GPIO");
single_value.field_UV__GPIO->log_match(match_value.UV__GPIO(), legacy);
} else {
TTCN_Logger::log_event_str("{ UV_GPIO := ");
single_value.field_UV__GPIO->log_match(match_value.UV__GPIO(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UT__INTERFACE__STORE__Device_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
single_value.field_UV__GPIO->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
}

void UT__INTERFACE__STORE__Device_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = UT__INTERFACE__STORE__Device::UNBOUND_VALUE;
UT__INTERFACE__STORE__Device::union_selection_type new_selection = (UT__INTERFACE__STORE__Device::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
single_value.field_UV__GPIO = new COMPONENT_template;
single_value.field_UV__GPIO->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UT__INTERFACE__STORE__Device_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
}

boolean UT__INTERFACE__STORE__Device_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UT__INTERFACE__STORE__Device_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void UT__INTERFACE__STORE__Device_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@INTERFACE_STORE.UT_INTERFACE_STORE_Device'");
    }
    if (strcmp("UV_GPIO", param_field) == 0) {
      UV__GPIO().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@INTERFACE_STORE.UT_INTERFACE_STORE_Device'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UT__INTERFACE__STORE__Device_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (m_p->get_size()==0) break;
    param.type_error("union template", "@INTERFACE_STORE.UT_INTERFACE_STORE_Device");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "UV_GPIO")) {
      UV__GPIO().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@INTERFACE_STORE.UT_INTERFACE_STORE_Device");
  }
  is_ifpresent = param.get_ifpresent();
}

void UT__INTERFACE__STORE__Device_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Device::ALT_UV__GPIO:
single_value.field_UV__GPIO->check_restriction(t_res, t_name ? t_name : "@INTERFACE_STORE.UT_INTERFACE_STORE_Device");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Device.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@INTERFACE_STORE.UT_INTERFACE_STORE_Device");
}

void UT__INTERFACE__STORE__Controller::copy_value(const UT__INTERFACE__STORE__Controller& other_value)
{
switch (other_value.union_selection) {
case ALT_UV__GPIO:
field_UV__GPIO = new COMPONENT(*other_value.field_UV__GPIO);
break;
default:
TTCN_error("Assignment of an unbound union value of type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
union_selection = other_value.union_selection;
}

UT__INTERFACE__STORE__Controller::UT__INTERFACE__STORE__Controller()
{
union_selection = UNBOUND_VALUE;
}

UT__INTERFACE__STORE__Controller::UT__INTERFACE__STORE__Controller(const UT__INTERFACE__STORE__Controller& other_value)
: Base_Type(){
copy_value(other_value);
}

UT__INTERFACE__STORE__Controller::~UT__INTERFACE__STORE__Controller()
{
clean_up();
}

UT__INTERFACE__STORE__Controller& UT__INTERFACE__STORE__Controller::operator=(const UT__INTERFACE__STORE__Controller& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean UT__INTERFACE__STORE__Controller::operator==(const UT__INTERFACE__STORE__Controller& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_UV__GPIO:
return *field_UV__GPIO == *other_value.field_UV__GPIO;
default:
return FALSE;
}
}

COMPONENT& UT__INTERFACE__STORE__Controller::UV__GPIO()
{
if (union_selection != ALT_UV__GPIO) {
clean_up();
field_UV__GPIO = new COMPONENT;
union_selection = ALT_UV__GPIO;
}
return *field_UV__GPIO;
}

const COMPONENT& UT__INTERFACE__STORE__Controller::UV__GPIO() const
{
if (union_selection != ALT_UV__GPIO) TTCN_error("Using non-selected field UV_GPIO in a value of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
return *field_UV__GPIO;
}

boolean UT__INTERFACE__STORE__Controller::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
return union_selection == checked_selection;
}

boolean UT__INTERFACE__STORE__Controller::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean UT__INTERFACE__STORE__Controller::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_UV__GPIO: return field_UV__GPIO->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void UT__INTERFACE__STORE__Controller::clean_up()
{
switch (union_selection) {
case ALT_UV__GPIO:
  delete field_UV__GPIO;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void UT__INTERFACE__STORE__Controller::log() const
{
switch (union_selection) {
case ALT_UV__GPIO:
TTCN_Logger::log_event_str("{ UV_GPIO := ");
field_UV__GPIO->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void UT__INTERFACE__STORE__Controller::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr m_p = &param;
  if (m_p->get_type()==Module_Param::MP_Value_List && m_p->get_size()==0) return;
  if (m_p->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "UV_GPIO")) {
    UV__GPIO().set_param(*mp_last);
    if (!UV__GPIO().is_bound()) clean_up();
    return;
  }
  mp_last->error("Field %s does not exist in type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.", mp_last->get_id()->get_name());
}

void UT__INTERFACE__STORE__Controller::set_implicit_omit()
{
switch (union_selection) {
case ALT_UV__GPIO:
field_UV__GPIO->set_implicit_omit(); break;
default: break;
}
}

void UT__INTERFACE__STORE__Controller::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_UV__GPIO:
field_UV__GPIO->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
}

void UT__INTERFACE__STORE__Controller::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_UV__GPIO:
UV__GPIO().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
}

void UT__INTERFACE__STORE__Controller_template::copy_value(const UT__INTERFACE__STORE__Controller& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
single_value.field_UV__GPIO = new COMPONENT_template(other_value.UV__GPIO());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
set_selection(SPECIFIC_VALUE);
}

void UT__INTERFACE__STORE__Controller_template::copy_template(const UT__INTERFACE__STORE__Controller_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
single_value.field_UV__GPIO = new COMPONENT_template(*other_value.single_value.field_UV__GPIO);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UT__INTERFACE__STORE__Controller_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
set_selection(other_value);
}

UT__INTERFACE__STORE__Controller_template::UT__INTERFACE__STORE__Controller_template()
{
}

UT__INTERFACE__STORE__Controller_template::UT__INTERFACE__STORE__Controller_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UT__INTERFACE__STORE__Controller_template::UT__INTERFACE__STORE__Controller_template(const UT__INTERFACE__STORE__Controller& other_value)
{
copy_value(other_value);
}

UT__INTERFACE__STORE__Controller_template::UT__INTERFACE__STORE__Controller_template(const OPTIONAL<UT__INTERFACE__STORE__Controller>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UT__INTERFACE__STORE__Controller&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller from an unbound optional field.");
}
}

UT__INTERFACE__STORE__Controller_template::UT__INTERFACE__STORE__Controller_template(const UT__INTERFACE__STORE__Controller_template& other_value)
: Base_Template(){
copy_template(other_value);
}

UT__INTERFACE__STORE__Controller_template::~UT__INTERFACE__STORE__Controller_template()
{
clean_up();
}

void UT__INTERFACE__STORE__Controller_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
delete single_value.field_UV__GPIO;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UT__INTERFACE__STORE__Controller_template& UT__INTERFACE__STORE__Controller_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UT__INTERFACE__STORE__Controller_template& UT__INTERFACE__STORE__Controller_template::operator=(const UT__INTERFACE__STORE__Controller& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UT__INTERFACE__STORE__Controller_template& UT__INTERFACE__STORE__Controller_template::operator=(const OPTIONAL<UT__INTERFACE__STORE__Controller>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UT__INTERFACE__STORE__Controller&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
return *this;
}

UT__INTERFACE__STORE__Controller_template& UT__INTERFACE__STORE__Controller_template::operator=(const UT__INTERFACE__STORE__Controller_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UT__INTERFACE__STORE__Controller_template::match(const UT__INTERFACE__STORE__Controller& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
UT__INTERFACE__STORE__Controller::union_selection_type value_selection = other_value.get_selection();
if (value_selection == UT__INTERFACE__STORE__Controller::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
return single_value.field_UV__GPIO->match(other_value.UV__GPIO(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
return FALSE;
}

boolean UT__INTERFACE__STORE__Controller_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
return single_value.field_UV__GPIO->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
}

UT__INTERFACE__STORE__Controller UT__INTERFACE__STORE__Controller_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
UT__INTERFACE__STORE__Controller ret_val;
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
ret_val.UV__GPIO() = single_value.field_UV__GPIO->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
return ret_val;
}

UT__INTERFACE__STORE__Controller_template& UT__INTERFACE__STORE__Controller_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
return value_list.list_value[list_index];
}
void UT__INTERFACE__STORE__Controller_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UT__INTERFACE__STORE__Controller_template[list_length];
}

COMPONENT_template& UT__INTERFACE__STORE__Controller_template::UV__GPIO()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != UT__INTERFACE__STORE__Controller::ALT_UV__GPIO) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_UV__GPIO = new COMPONENT_template(ANY_VALUE);
else single_value.field_UV__GPIO = new COMPONENT_template;
single_value.union_selection = UT__INTERFACE__STORE__Controller::ALT_UV__GPIO;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_UV__GPIO;
}

const COMPONENT_template& UT__INTERFACE__STORE__Controller_template::UV__GPIO() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field UV_GPIO in a non-specific template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
if (single_value.union_selection != UT__INTERFACE__STORE__Controller::ALT_UV__GPIO) TTCN_error("Accessing non-selected field UV_GPIO in a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
return *single_value.field_UV__GPIO;
}

boolean UT__INTERFACE__STORE__Controller_template::ischosen(UT__INTERFACE__STORE__Controller::union_selection_type checked_selection) const
{
if (checked_selection == UT__INTERFACE__STORE__Controller::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == UT__INTERFACE__STORE__Controller::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
for (unsigned int list_count = 1; ret_val == TRUE && list_count < value_list.n_values; list_count++) {
ret_val = value_list.list_value[list_count].ischosen(checked_selection);
}
return ret_val;
}
default:
return FALSE;
}
return FALSE;
}

void UT__INTERFACE__STORE__Controller_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
TTCN_Logger::log_event_str("{ UV_GPIO := ");
single_value.field_UV__GPIO->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UT__INTERFACE__STORE__Controller_template::log_match(const UT__INTERFACE__STORE__Controller& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".UV_GPIO");
single_value.field_UV__GPIO->log_match(match_value.UV__GPIO(), legacy);
} else {
TTCN_Logger::log_event_str("{ UV_GPIO := ");
single_value.field_UV__GPIO->log_match(match_value.UV__GPIO(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UT__INTERFACE__STORE__Controller_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
single_value.field_UV__GPIO->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
}

void UT__INTERFACE__STORE__Controller_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = UT__INTERFACE__STORE__Controller::UNBOUND_VALUE;
UT__INTERFACE__STORE__Controller::union_selection_type new_selection = (UT__INTERFACE__STORE__Controller::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
single_value.field_UV__GPIO = new COMPONENT_template;
single_value.field_UV__GPIO->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UT__INTERFACE__STORE__Controller_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
}

boolean UT__INTERFACE__STORE__Controller_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UT__INTERFACE__STORE__Controller_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void UT__INTERFACE__STORE__Controller_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@INTERFACE_STORE.UT_INTERFACE_STORE_Controller'");
    }
    if (strcmp("UV_GPIO", param_field) == 0) {
      UV__GPIO().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@INTERFACE_STORE.UT_INTERFACE_STORE_Controller'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UT__INTERFACE__STORE__Controller_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (m_p->get_size()==0) break;
    param.type_error("union template", "@INTERFACE_STORE.UT_INTERFACE_STORE_Controller");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "UV_GPIO")) {
      UV__GPIO().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@INTERFACE_STORE.UT_INTERFACE_STORE_Controller");
  }
  is_ifpresent = param.get_ifpresent();
}

void UT__INTERFACE__STORE__Controller_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case UT__INTERFACE__STORE__Controller::ALT_UV__GPIO:
single_value.field_UV__GPIO->check_restriction(t_res, t_name ? t_name : "@INTERFACE_STORE.UT_INTERFACE_STORE_Controller");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @INTERFACE_STORE.UT_INTERFACE_STORE_Controller.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@INTERFACE_STORE.UT_INTERFACE_STORE_Controller");
}

RT__INTERFACE__STORE__InterfaceElement::RT__INTERFACE__STORE__InterfaceElement()
{
}

RT__INTERFACE__STORE__InterfaceElement::RT__INTERFACE__STORE__InterfaceElement(const CHARSTRING& par_Name,
    const OPTIONAL<UT__INTERFACE__STORE__Device>& par_Device,
    const OPTIONAL<UT__INTERFACE__STORE__Controller>& par_Controller)
  :   field_Name(par_Name),
  field_Device(par_Device),
  field_Controller(par_Controller)
{
}

RT__INTERFACE__STORE__InterfaceElement::RT__INTERFACE__STORE__InterfaceElement(const RT__INTERFACE__STORE__InterfaceElement& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
if (other_value.Name().is_bound()) field_Name = other_value.Name();
else field_Name.clean_up();
if (other_value.Device().is_bound()) field_Device = other_value.Device();
else field_Device.clean_up();
if (other_value.Controller().is_bound()) field_Controller = other_value.Controller();
else field_Controller.clean_up();
}

void RT__INTERFACE__STORE__InterfaceElement::clean_up()
{
field_Name.clean_up();
field_Device.clean_up();
field_Controller.clean_up();
}

RT__INTERFACE__STORE__InterfaceElement& RT__INTERFACE__STORE__InterfaceElement::operator=(const RT__INTERFACE__STORE__InterfaceElement& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
  if (other_value.Name().is_bound()) field_Name = other_value.Name();
  else field_Name.clean_up();
  if (other_value.Device().is_bound()) field_Device = other_value.Device();
  else field_Device.clean_up();
  if (other_value.Controller().is_bound()) field_Controller = other_value.Controller();
  else field_Controller.clean_up();
}
return *this;
}

boolean RT__INTERFACE__STORE__InterfaceElement::operator==(const RT__INTERFACE__STORE__InterfaceElement& other_value) const
{
return field_Name==other_value.field_Name
  && field_Device==other_value.field_Device
  && field_Controller==other_value.field_Controller;
}

boolean RT__INTERFACE__STORE__InterfaceElement::is_bound() const
{
if(field_Name.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_Device.get_selection() || field_Device.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_Controller.get_selection() || field_Controller.is_bound()) return TRUE;
return FALSE;
}
boolean RT__INTERFACE__STORE__InterfaceElement::is_value() const
{
if(!field_Name.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_Device.get_selection() && !field_Device.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_Controller.get_selection() && !field_Controller.is_value()) return FALSE;
return TRUE;
}
int RT__INTERFACE__STORE__InterfaceElement::size_of() const
{
  int ret_val = 1;
  if (field_Device.ispresent()) ret_val++;
  if (field_Controller.ispresent()) ret_val++;
  return ret_val;
}

void RT__INTERFACE__STORE__InterfaceElement::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ Name := ");
field_Name.log();
TTCN_Logger::log_event_str(", Device := ");
field_Device.log();
TTCN_Logger::log_event_str(", Controller := ");
field_Controller.log();
TTCN_Logger::log_event_str(" }");
}

void RT__INTERFACE__STORE__InterfaceElement::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) Name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) Device().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) Controller().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Device")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Device().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Controller")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Controller().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement");
  }
}

void RT__INTERFACE__STORE__InterfaceElement::set_implicit_omit()
{
if (Name().is_bound()) Name().set_implicit_omit();
if (!Device().is_bound()) Device() = OMIT_VALUE;
else Device().set_implicit_omit();
if (!Controller().is_bound()) Controller() = OMIT_VALUE;
else Controller().set_implicit_omit();
}

void RT__INTERFACE__STORE__InterfaceElement::encode_text(Text_Buf& text_buf) const
{
field_Name.encode_text(text_buf);
field_Device.encode_text(text_buf);
field_Controller.encode_text(text_buf);
}

void RT__INTERFACE__STORE__InterfaceElement::decode_text(Text_Buf& text_buf)
{
field_Name.decode_text(text_buf);
field_Device.decode_text(text_buf);
field_Controller.decode_text(text_buf);
}

struct RT__INTERFACE__STORE__InterfaceElement_template::single_value_struct {
CHARSTRING_template field_Name;
UT__INTERFACE__STORE__Device_template field_Device;
UT__INTERFACE__STORE__Controller_template field_Controller;
};

void RT__INTERFACE__STORE__InterfaceElement_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_Name = ANY_VALUE;
single_value->field_Device = ANY_OR_OMIT;
single_value->field_Controller = ANY_OR_OMIT;
}
}
}

void RT__INTERFACE__STORE__InterfaceElement_template::copy_value(const RT__INTERFACE__STORE__InterfaceElement& other_value)
{
single_value = new single_value_struct;
if (other_value.Name().is_bound()) {
  single_value->field_Name = other_value.Name();
} else {
  single_value->field_Name.clean_up();
}
if (other_value.Device().is_bound()) {
  if (other_value.Device().ispresent()) single_value->field_Device = other_value.Device()();
  else single_value->field_Device = OMIT_VALUE;
} else {
  single_value->field_Device.clean_up();
}
if (other_value.Controller().is_bound()) {
  if (other_value.Controller().ispresent()) single_value->field_Controller = other_value.Controller()();
  else single_value->field_Controller = OMIT_VALUE;
} else {
  single_value->field_Controller.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void RT__INTERFACE__STORE__InterfaceElement_template::copy_template(const RT__INTERFACE__STORE__InterfaceElement_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.Name().get_selection()) {
single_value->field_Name = other_value.Name();
} else {
single_value->field_Name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.Device().get_selection()) {
single_value->field_Device = other_value.Device();
} else {
single_value->field_Device.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.Controller().get_selection()) {
single_value->field_Controller = other_value.Controller();
} else {
single_value->field_Controller.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RT__INTERFACE__STORE__InterfaceElement_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
break;
}
set_selection(other_value);
}

RT__INTERFACE__STORE__InterfaceElement_template::RT__INTERFACE__STORE__InterfaceElement_template()
{
}

RT__INTERFACE__STORE__InterfaceElement_template::RT__INTERFACE__STORE__InterfaceElement_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

RT__INTERFACE__STORE__InterfaceElement_template::RT__INTERFACE__STORE__InterfaceElement_template(const RT__INTERFACE__STORE__InterfaceElement& other_value)
{
copy_value(other_value);
}

RT__INTERFACE__STORE__InterfaceElement_template::RT__INTERFACE__STORE__InterfaceElement_template(const OPTIONAL<RT__INTERFACE__STORE__InterfaceElement>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RT__INTERFACE__STORE__InterfaceElement&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement from an unbound optional field.");
}
}

RT__INTERFACE__STORE__InterfaceElement_template::RT__INTERFACE__STORE__InterfaceElement_template(const RT__INTERFACE__STORE__InterfaceElement_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

RT__INTERFACE__STORE__InterfaceElement_template::~RT__INTERFACE__STORE__InterfaceElement_template()
{
clean_up();
}

RT__INTERFACE__STORE__InterfaceElement_template& RT__INTERFACE__STORE__InterfaceElement_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RT__INTERFACE__STORE__InterfaceElement_template& RT__INTERFACE__STORE__InterfaceElement_template::operator=(const RT__INTERFACE__STORE__InterfaceElement& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RT__INTERFACE__STORE__InterfaceElement_template& RT__INTERFACE__STORE__InterfaceElement_template::operator=(const OPTIONAL<RT__INTERFACE__STORE__InterfaceElement>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RT__INTERFACE__STORE__InterfaceElement&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
}
return *this;
}

RT__INTERFACE__STORE__InterfaceElement_template& RT__INTERFACE__STORE__InterfaceElement_template::operator=(const RT__INTERFACE__STORE__InterfaceElement_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean RT__INTERFACE__STORE__InterfaceElement_template::match(const RT__INTERFACE__STORE__InterfaceElement& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.Name().is_bound()) return FALSE;
if(!single_value->field_Name.match(other_value.Name(), legacy))return FALSE;
if(!other_value.Device().is_bound()) return FALSE;
if((other_value.Device().ispresent() ? !single_value->field_Device.match((const UT__INTERFACE__STORE__Device&)other_value.Device(), legacy) : !single_value->field_Device.match_omit(legacy)))return FALSE;
if(!other_value.Controller().is_bound()) return FALSE;
if((other_value.Controller().ispresent() ? !single_value->field_Controller.match((const UT__INTERFACE__STORE__Controller&)other_value.Controller(), legacy) : !single_value->field_Controller.match_omit(legacy)))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
}
return FALSE;
}

boolean RT__INTERFACE__STORE__InterfaceElement_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_Name.is_bound()) return TRUE;
if (single_value->field_Device.is_omit() || single_value->field_Device.is_bound()) return TRUE;
if (single_value->field_Controller.is_omit() || single_value->field_Controller.is_bound()) return TRUE;
return FALSE;
}

boolean RT__INTERFACE__STORE__InterfaceElement_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_Name.is_value()) return FALSE;
if (!single_value->field_Device.is_omit() && !single_value->field_Device.is_value()) return FALSE;
if (!single_value->field_Controller.is_omit() && !single_value->field_Controller.is_value()) return FALSE;
return TRUE;
}

void RT__INTERFACE__STORE__InterfaceElement_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RT__INTERFACE__STORE__InterfaceElement RT__INTERFACE__STORE__InterfaceElement_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
RT__INTERFACE__STORE__InterfaceElement ret_val;
if (single_value->field_Name.is_bound()) {
ret_val.Name() = single_value->field_Name.valueof();
}
if (single_value->field_Device.is_omit()) ret_val.Device() = OMIT_VALUE;
else if (single_value->field_Device.is_bound()) {
ret_val.Device() = single_value->field_Device.valueof();
}
if (single_value->field_Controller.is_omit()) ret_val.Controller() = OMIT_VALUE;
else if (single_value->field_Controller.is_bound()) {
ret_val.Controller() = single_value->field_Controller.valueof();
}
return ret_val;
}

void RT__INTERFACE__STORE__InterfaceElement_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new RT__INTERFACE__STORE__InterfaceElement_template[list_length];
}

RT__INTERFACE__STORE__InterfaceElement_template& RT__INTERFACE__STORE__InterfaceElement_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
return value_list.list_value[list_index];
}

CHARSTRING_template& RT__INTERFACE__STORE__InterfaceElement_template::Name()
{
set_specific();
return single_value->field_Name;
}

const CHARSTRING_template& RT__INTERFACE__STORE__InterfaceElement_template::Name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field Name of a non-specific template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
return single_value->field_Name;
}

UT__INTERFACE__STORE__Device_template& RT__INTERFACE__STORE__InterfaceElement_template::Device()
{
set_specific();
return single_value->field_Device;
}

const UT__INTERFACE__STORE__Device_template& RT__INTERFACE__STORE__InterfaceElement_template::Device() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field Device of a non-specific template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
return single_value->field_Device;
}

UT__INTERFACE__STORE__Controller_template& RT__INTERFACE__STORE__InterfaceElement_template::Controller()
{
set_specific();
return single_value->field_Controller;
}

const UT__INTERFACE__STORE__Controller_template& RT__INTERFACE__STORE__InterfaceElement_template::Controller() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field Controller of a non-specific template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
return single_value->field_Controller;
}

int RT__INTERFACE__STORE__InterfaceElement_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_Device.is_present()) ret_val++;
      if (single_value->field_Controller.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
  }
  return 0;
}

void RT__INTERFACE__STORE__InterfaceElement_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ Name := ");
single_value->field_Name.log();
TTCN_Logger::log_event_str(", Device := ");
single_value->field_Device.log();
TTCN_Logger::log_event_str(", Controller := ");
single_value->field_Controller.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void RT__INTERFACE__STORE__InterfaceElement_template::log_match(const RT__INTERFACE__STORE__InterfaceElement& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_Name.match(match_value.Name(), legacy)){
TTCN_Logger::log_logmatch_info(".Name");
single_value->field_Name.log_match(match_value.Name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.Device().ispresent()){
if(!single_value->field_Device.match(match_value.Device(), legacy)){
TTCN_Logger::log_logmatch_info(".Device");
single_value->field_Device.log_match(match_value.Device(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_Device.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".Device := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_Device.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.Controller().ispresent()){
if(!single_value->field_Controller.match(match_value.Controller(), legacy)){
TTCN_Logger::log_logmatch_info(".Controller");
single_value->field_Controller.log_match(match_value.Controller(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_Controller.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".Controller := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_Controller.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ Name := ");
single_value->field_Name.log_match(match_value.Name(), legacy);
TTCN_Logger::log_event_str(", Device := ");
if (match_value.Device().ispresent()) single_value->field_Device.log_match(match_value.Device(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_Device.log();
if (single_value->field_Device.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", Controller := ");
if (match_value.Controller().ispresent()) single_value->field_Controller.log_match(match_value.Controller(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_Controller.log();
if (single_value->field_Controller.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RT__INTERFACE__STORE__InterfaceElement_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_Name.encode_text(text_buf);
single_value->field_Device.encode_text(text_buf);
single_value->field_Controller.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
}
}

void RT__INTERFACE__STORE__InterfaceElement_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_Name.decode_text(text_buf);
single_value->field_Device.decode_text(text_buf);
single_value->field_Controller.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RT__INTERFACE__STORE__InterfaceElement_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.");
}
}

void RT__INTERFACE__STORE__InterfaceElement_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    RT__INTERFACE__STORE__InterfaceElement_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) Name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) Device().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) Controller().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Device")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Device().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Controller")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Controller().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement");
  }
  is_ifpresent = param.get_ifpresent();
}

void RT__INTERFACE__STORE__InterfaceElement_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_Name.check_restriction(t_res, t_name ? t_name : "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement");
single_value->field_Device.check_restriction(t_res, t_name ? t_name : "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement");
single_value->field_Controller.check_restriction(t_res, t_name ? t_name : "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement");
}

boolean RT__INTERFACE__STORE__InterfaceElement_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean RT__INTERFACE__STORE__InterfaceElement_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


const RT__INTERFACE__STORE__InterfaceElement RT__INTERFACE__STORE__InterfaceElements::UNBOUND_ELEM;
RT__INTERFACE__STORE__InterfaceElements::RT__INTERFACE__STORE__InterfaceElements()
{
val_ptr = NULL;
}

RT__INTERFACE__STORE__InterfaceElements::RT__INTERFACE__STORE__InterfaceElements(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

RT__INTERFACE__STORE__InterfaceElements::RT__INTERFACE__STORE__InterfaceElements(const RT__INTERFACE__STORE__InterfaceElements& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

RT__INTERFACE__STORE__InterfaceElements::~RT__INTERFACE__STORE__InterfaceElements()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void RT__INTERFACE__STORE__InterfaceElements::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

RT__INTERFACE__STORE__InterfaceElements& RT__INTERFACE__STORE__InterfaceElements::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

RT__INTERFACE__STORE__InterfaceElements& RT__INTERFACE__STORE__InterfaceElements::operator=(const RT__INTERFACE__STORE__InterfaceElements& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean RT__INTERFACE__STORE__InterfaceElements::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
return val_ptr->n_elements == 0 ;
}

boolean RT__INTERFACE__STORE__InterfaceElements::operator==(const RT__INTERFACE__STORE__InterfaceElements& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

RT__INTERFACE__STORE__InterfaceElement& RT__INTERFACE__STORE__InterfaceElements::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (RT__INTERFACE__STORE__InterfaceElement**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new RT__INTERFACE__STORE__InterfaceElement;
}
return *val_ptr->value_elements[index_value];
}

RT__INTERFACE__STORE__InterfaceElement& RT__INTERFACE__STORE__InterfaceElements::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
return (*this)[(int)index_value];
}

const RT__INTERFACE__STORE__InterfaceElement& RT__INTERFACE__STORE__InterfaceElements::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
if (index_value < 0) TTCN_error("Accessing an element of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const RT__INTERFACE__STORE__InterfaceElement& RT__INTERFACE__STORE__InterfaceElements::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
return (*this)[(int)index_value];
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
RT__INTERFACE__STORE__InterfaceElements ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new RT__INTERFACE__STORE__InterfaceElement(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements::operator+(const RT__INTERFACE__STORE__InterfaceElements& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
RT__INTERFACE__STORE__InterfaceElements ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new RT__INTERFACE__STORE__InterfaceElement(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new RT__INTERFACE__STORE__InterfaceElement(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements","element");
RT__INTERFACE__STORE__InterfaceElements ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new RT__INTERFACE__STORE__InterfaceElement(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements::replace(int index, int len, const RT__INTERFACE__STORE__InterfaceElements& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
check_replace_arguments(val_ptr->n_elements, index, len, "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements","element");
RT__INTERFACE__STORE__InterfaceElements ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new RT__INTERFACE__STORE__InterfaceElement(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new RT__INTERFACE__STORE__InterfaceElement(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new RT__INTERFACE__STORE__InterfaceElement(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements::replace(int index, int len, const RT__INTERFACE__STORE__InterfaceElements_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void RT__INTERFACE__STORE__InterfaceElements::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (RT__INTERFACE__STORE__InterfaceElement**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (RT__INTERFACE__STORE__InterfaceElement**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (RT__INTERFACE__STORE__InterfaceElement**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean RT__INTERFACE__STORE__InterfaceElements::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int RT__INTERFACE__STORE__InterfaceElements::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
return val_ptr->n_elements;
}

int RT__INTERFACE__STORE__InterfaceElements::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void RT__INTERFACE__STORE__InterfaceElements::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void RT__INTERFACE__STORE__InterfaceElements::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void RT__INTERFACE__STORE__InterfaceElements::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void RT__INTERFACE__STORE__InterfaceElements::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void RT__INTERFACE__STORE__InterfaceElements::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
val_ptr->value_elements = (RT__INTERFACE__STORE__InterfaceElement**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void RT__INTERFACE__STORE__InterfaceElements_template::copy_value(const RT__INTERFACE__STORE__InterfaceElements& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (RT__INTERFACE__STORE__InterfaceElement_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void RT__INTERFACE__STORE__InterfaceElements_template::copy_template(const RT__INTERFACE__STORE__InterfaceElements_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (RT__INTERFACE__STORE__InterfaceElement_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RT__INTERFACE__STORE__InterfaceElements_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
break;
}
set_selection(other_value);
}

boolean RT__INTERFACE__STORE__InterfaceElements_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const RT__INTERFACE__STORE__InterfaceElements_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const RT__INTERFACE__STORE__InterfaceElements*)value_ptr)[value_index], legacy);
else return ((const RT__INTERFACE__STORE__InterfaceElements_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

RT__INTERFACE__STORE__InterfaceElements_template::RT__INTERFACE__STORE__InterfaceElements_template()
{
}

RT__INTERFACE__STORE__InterfaceElements_template::RT__INTERFACE__STORE__InterfaceElements_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

RT__INTERFACE__STORE__InterfaceElements_template::RT__INTERFACE__STORE__InterfaceElements_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

RT__INTERFACE__STORE__InterfaceElements_template::RT__INTERFACE__STORE__InterfaceElements_template(const RT__INTERFACE__STORE__InterfaceElements& other_value)
{
copy_value(other_value);
}

RT__INTERFACE__STORE__InterfaceElements_template::RT__INTERFACE__STORE__InterfaceElements_template(const OPTIONAL<RT__INTERFACE__STORE__InterfaceElements>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RT__INTERFACE__STORE__InterfaceElements&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements from an unbound optional field.");
}
}

RT__INTERFACE__STORE__InterfaceElements_template::RT__INTERFACE__STORE__InterfaceElements_template(const RT__INTERFACE__STORE__InterfaceElements_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

RT__INTERFACE__STORE__InterfaceElements_template::~RT__INTERFACE__STORE__InterfaceElements_template()
{
clean_up();
}

void RT__INTERFACE__STORE__InterfaceElements_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RT__INTERFACE__STORE__InterfaceElements_template& RT__INTERFACE__STORE__InterfaceElements_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RT__INTERFACE__STORE__InterfaceElements_template& RT__INTERFACE__STORE__InterfaceElements_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

RT__INTERFACE__STORE__InterfaceElements_template& RT__INTERFACE__STORE__InterfaceElements_template::operator=(const RT__INTERFACE__STORE__InterfaceElements& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RT__INTERFACE__STORE__InterfaceElements_template& RT__INTERFACE__STORE__InterfaceElements_template::operator=(const OPTIONAL<RT__INTERFACE__STORE__InterfaceElements>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RT__INTERFACE__STORE__InterfaceElements&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
}
return *this;
}

RT__INTERFACE__STORE__InterfaceElements_template& RT__INTERFACE__STORE__InterfaceElements_template::operator=(const RT__INTERFACE__STORE__InterfaceElements_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

RT__INTERFACE__STORE__InterfaceElement_template& RT__INTERFACE__STORE__InterfaceElements_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
    break;
}
return *single_value.value_elements[index_value];
}

RT__INTERFACE__STORE__InterfaceElement_template& RT__INTERFACE__STORE__InterfaceElements_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
return (*this)[(int)index_value];
}

const RT__INTERFACE__STORE__InterfaceElement_template& RT__INTERFACE__STORE__InterfaceElements_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const RT__INTERFACE__STORE__InterfaceElement_template& RT__INTERFACE__STORE__InterfaceElements_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
return (*this)[(int)index_value];
}

void RT__INTERFACE__STORE__InterfaceElements_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (RT__INTERFACE__STORE__InterfaceElement_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (RT__INTERFACE__STORE__InterfaceElement_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int RT__INTERFACE__STORE__InterfaceElements_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int RT__INTERFACE__STORE__InterfaceElements_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements");
}

boolean RT__INTERFACE__STORE__InterfaceElements_template::match(const RT__INTERFACE__STORE__InterfaceElements& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
}
return FALSE;
}

boolean RT__INTERFACE__STORE__InterfaceElements_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
RT__INTERFACE__STORE__InterfaceElements ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements_template::replace(int index, int len, const RT__INTERFACE__STORE__InterfaceElements_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

RT__INTERFACE__STORE__InterfaceElements RT__INTERFACE__STORE__InterfaceElements_template::replace(int index, int len, const RT__INTERFACE__STORE__InterfaceElements& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void RT__INTERFACE__STORE__InterfaceElements_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new RT__INTERFACE__STORE__InterfaceElements_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
}
set_selection(template_type);
}

RT__INTERFACE__STORE__InterfaceElements_template& RT__INTERFACE__STORE__InterfaceElements_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
return value_list.list_value[list_index];
}

void RT__INTERFACE__STORE__InterfaceElements_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void RT__INTERFACE__STORE__InterfaceElements_template::log_match(const RT__INTERFACE__STORE__InterfaceElements& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RT__INTERFACE__STORE__InterfaceElements_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
}
}

void RT__INTERFACE__STORE__InterfaceElements_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
single_value.value_elements = (RT__INTERFACE__STORE__InterfaceElement_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new RT__INTERFACE__STORE__InterfaceElement_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RT__INTERFACE__STORE__InterfaceElements_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
}
}

boolean RT__INTERFACE__STORE__InterfaceElements_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean RT__INTERFACE__STORE__InterfaceElements_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void RT__INTERFACE__STORE__InterfaceElements_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    RT__INTERFACE__STORE__InterfaceElements_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void RT__INTERFACE__STORE__InterfaceElements_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements");
}

boolean RT__INTERFACE__STORE__InterfaceElements_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}
void PT__INTERFACE__STORE__InterfaceStorePort::remove_msg_queue_head()
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
switch (my_head->item_selection) {
case MESSAGE_0:
delete (my_head)->message_0;
break;
default:
TTCN_error("Internal error: Invalid message selector in the queue of port %s.", port_name);
}
msg_queue_item_base *next_item = msg_queue_head->next_item;
delete (msg_queue_item*)msg_queue_head;
msg_queue_head = next_item;
if (next_item == NULL) msg_queue_tail = NULL;
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::extract__msg, port_name, 0, ++msg_head_count, CHARSTRING(0,NULL), CHARSTRING(0,NULL));}

void PT__INTERFACE__STORE__InterfaceStorePort::clear_queue()
{
while (msg_queue_head != NULL) remove_msg_queue_head();
}

PT__INTERFACE__STORE__InterfaceStorePort::PT__INTERFACE__STORE__InterfaceStorePort(const char *par_port_name)
 : PORT(par_port_name)
{
msg_queue_head = NULL;
msg_queue_tail = NULL;
}

PT__INTERFACE__STORE__InterfaceStorePort::~PT__INTERFACE__STORE__InterfaceStorePort()
{
clear_queue();
}

void PT__INTERFACE__STORE__InterfaceStorePort::send(const RT__INTERFACE__STORE__InterfaceElement& send_par, const COMPONENT& destination_component)
{
if (!is_started) TTCN_error("Sending a message on port %s, which is not started.", port_name);
if (!destination_component.is_bound()) TTCN_error("Unbound component reference in the to clause of send operation.");
const TTCN_Logger::Severity log_sev = destination_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMSEND:TTCN_Logger::PORTEVENT_MCSEND;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_send(port_name, destination_component,
(TTCN_Logger::begin_event(log_sev, TRUE), TTCN_Logger::log_event_str(" @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement : "),
send_par.log(), TTCN_Logger::end_event_log2str()));
}
if (destination_component == SYSTEM_COMPREF) TTCN_error("Message cannot be sent to system on internal port %s.", port_name);
else {
Text_Buf text_buf;
prepare_message(text_buf, "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

void PT__INTERFACE__STORE__InterfaceStorePort::send(const RT__INTERFACE__STORE__InterfaceElement& send_par)
{
send(send_par, COMPONENT(get_default_destination()));
}

void PT__INTERFACE__STORE__InterfaceStorePort::send(const RT__INTERFACE__STORE__InterfaceElement_template& send_par, const COMPONENT& destination_component)
{
const RT__INTERFACE__STORE__InterfaceElement& send_par_value = RT__INTERFACE__STORE__InterfaceElement(send_par.valueof());
send(send_par_value, destination_component);
}

void PT__INTERFACE__STORE__InterfaceStorePort::send(const RT__INTERFACE__STORE__InterfaceElement_template& send_par)
{
const RT__INTERFACE__STORE__InterfaceElement& send_par_value = RT__INTERFACE__STORE__InterfaceElement(send_par.valueof());
send(send_par_value, COMPONENT(get_default_destination()));
}

alt_status PT__INTERFACE__STORE__InterfaceStorePort::receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status PT__INTERFACE__STORE__InterfaceStorePort::check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
return ALT_YES;
}
}

alt_status PT__INTERFACE__STORE__InterfaceStorePort::trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status PT__INTERFACE__STORE__InterfaceStorePort::receive(const RT__INTERFACE__STORE__InterfaceElement_template& value_template, RT__INTERFACE__STORE__InterfaceElement *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status PT__INTERFACE__STORE__InterfaceStorePort::check_receive(const RT__INTERFACE__STORE__InterfaceElement_template& value_template, RT__INTERFACE__STORE__InterfaceElement *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Check-receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
return ALT_YES;
}
}

alt_status PT__INTERFACE__STORE__InterfaceStorePort::trigger(const RT__INTERFACE__STORE__InterfaceElement_template& value_template, RT__INTERFACE__STORE__InterfaceElement *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Trigger operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s will drop a message: Type of the first message in the queue is not @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement.", port_name);
remove_msg_queue_head();
return ALT_REPEAT;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

void PT__INTERFACE__STORE__InterfaceStorePort::incoming_message(const RT__INTERFACE__STORE__InterfaceElement& incoming_par, component sender_component)
{
if (!is_started) TTCN_error("Port %s is not started but a message has arrived on it.", port_name);
msg_tail_count++;
if (TTCN_Logger::log_this_event(TTCN_Logger::PORTEVENT_MQUEUE)) {
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::enqueue__msg, port_name, sender_component, msg_tail_count,
CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(TTCN_Logger::PORTEVENT_MQUEUE, TRUE), TTCN_Logger::log_event_str(" @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement : "), incoming_par.log(), TTCN_Logger::end_event_log2str()));
}
msg_queue_item *new_item = new msg_queue_item;
new_item->item_selection = MESSAGE_0;
new_item->message_0 = new RT__INTERFACE__STORE__InterfaceElement(incoming_par);
new_item->sender_component = sender_component;
append_to_msg_queue(new_item);
}

boolean PT__INTERFACE__STORE__InterfaceStorePort::process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING&)
{
if (!strcmp(message_type, "@INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElement")) {
RT__INTERFACE__STORE__InterfaceElement incoming_par;
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return TRUE;
} else return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const RT__INTERFACE__STORE__InterfaceElements& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @INTERFACE_STORE.RT_INTERFACE_STORE_InterfaceElements.");
return other_value.val_ptr->n_elements == 0;
}

void f__INTERFACE__STORE__InterfaceStore__getElement(const CHARSTRING& name, RT__INTERFACE__STORE__InterfaceElement& element, INTEGER& indexOfElement)
{
TTCN_Location current_location("INTERFACE_STORE.ttcn", 43, TTCN_Location::LOCATION_FUNCTION, "f_INTERFACE_STORE_InterfaceStore_getElement");
element.clean_up();
indexOfElement.clean_up();
current_location.update_lineno(46);
/* INTERFACE_STORE.ttcn, line 46 */
indexOfElement = -1;
{
current_location.update_lineno(48);
/* INTERFACE_STORE.ttcn, line 48 */
INTEGER i(0);
current_location.update_lineno(48);
/* INTERFACE_STORE.ttcn, line 48 */
for ( ; ; ) {
current_location.update_lineno(48);
/* INTERFACE_STORE.ttcn, line 48 */
if (!(i < CT__INTERFACE__STORE__InterfaceStore_component_StoredElement.size_of())) break;
current_location.update_lineno(49);
/* INTERFACE_STORE.ttcn, line 49 */
if ((name == const_cast< const RT__INTERFACE__STORE__InterfaceElements&>(CT__INTERFACE__STORE__InterfaceStore_component_StoredElement)[i].Name())) {
current_location.update_lineno(50);
/* INTERFACE_STORE.ttcn, line 50 */
element = const_cast< const RT__INTERFACE__STORE__InterfaceElements&>(CT__INTERFACE__STORE__InterfaceStore_component_StoredElement)[i];
current_location.update_lineno(51);
/* INTERFACE_STORE.ttcn, line 51 */
indexOfElement = i;
current_location.update_lineno(52);
/* INTERFACE_STORE.ttcn, line 52 */
break;
}
current_location.update_lineno(48);
/* INTERFACE_STORE.ttcn, line 48 */
{
INTEGER tmp_3;
++i;
}
}
}
}

void start_f__INTERFACE__STORE__InterfaceStore__getElement(const COMPONENT& component_reference, const CHARSTRING& name, RT__INTERFACE__STORE__InterfaceElement& element, INTEGER& indexOfElement)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_INTERFACE_STORE_InterfaceStore_getElement(");
name.log();
TTCN_Logger::log_event_str(", ");
element.log();
TTCN_Logger::log_event_str(", ");
indexOfElement.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "INTERFACE_STORE", "f_INTERFACE_STORE_InterfaceStore_getElement", text_buf);
name.encode_text(text_buf);
element.encode_text(text_buf);
indexOfElement.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__INTERFACE__STORE__InterfaceStore()
{
TTCN_Location current_location("INTERFACE_STORE.ttcn", 57, TTCN_Location::LOCATION_FUNCTION, "f_INTERFACE_STORE_InterfaceStore");
current_location.update_lineno(59);
/* INTERFACE_STORE.ttcn, line 59 */
RT__INTERFACE__STORE__InterfaceElement receivedElement;
current_location.update_lineno(60);
/* INTERFACE_STORE.ttcn, line 60 */
COMPONENT client;
current_location.update_lineno(61);
/* INTERFACE_STORE.ttcn, line 61 */
{
tmp_4:
alt_status tmp_4_alt_flag_0 = ALT_MAYBE;
alt_status tmp_4_alt_flag_1 = ALT_MAYBE;
alt_status tmp_4_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_4_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(63);
/* INTERFACE_STORE.ttcn, line 63 */
{
RT__INTERFACE__STORE__InterfaceElement_template tmp_5;
tmp_5.Name() = ANY_VALUE;
tmp_5.Device() = OMIT_VALUE;
tmp_5.Controller() = OMIT_VALUE;
tmp_4_alt_flag_0 = CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.receive(tmp_5, &(receivedElement), any_compref, &(client), NULL);
}
if (tmp_4_alt_flag_0 == ALT_YES) {
current_location.update_lineno(65);
/* INTERFACE_STORE.ttcn, line 65 */
RT__INTERFACE__STORE__InterfaceElement existingElement;
current_location.update_lineno(66);
/* INTERFACE_STORE.ttcn, line 66 */
INTEGER indexOfExistingElement;
current_location.update_lineno(68);
/* INTERFACE_STORE.ttcn, line 68 */
f__INTERFACE__STORE__InterfaceStore__getElement(const_cast< const RT__INTERFACE__STORE__InterfaceElement&>(receivedElement).Name(), existingElement, indexOfExistingElement);
current_location.update_lineno(70);
/* INTERFACE_STORE.ttcn, line 70 */
if ((indexOfExistingElement == -1)) {
current_location.update_lineno(71);
/* INTERFACE_STORE.ttcn, line 71 */
TEST__API__Functions::f__TEST__API__Subject__setverdict(FAIL, cs_0);
}
else {
current_location.update_lineno(73);
/* INTERFACE_STORE.ttcn, line 73 */
TEST__API__Functions::f__TEST__API__Subject__setverdict(PASS, cs_1);
current_location.update_lineno(74);
/* INTERFACE_STORE.ttcn, line 74 */
CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.send(existingElement, client);
current_location.update_lineno(75);
/* INTERFACE_STORE.ttcn, line 75 */
goto tmp_4;
}
break;
}
}
if (tmp_4_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(79);
/* INTERFACE_STORE.ttcn, line 79 */
tmp_4_alt_flag_1 = CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.receive(RT__INTERFACE__STORE__InterfaceElement_template(ANY_VALUE), &(receivedElement), any_compref, NULL, NULL);
if (tmp_4_alt_flag_1 == ALT_YES) {
current_location.update_lineno(81);
/* INTERFACE_STORE.ttcn, line 81 */
RT__INTERFACE__STORE__InterfaceElement existingElement;
current_location.update_lineno(82);
/* INTERFACE_STORE.ttcn, line 82 */
INTEGER indexOfExistingElement;
current_location.update_lineno(84);
/* INTERFACE_STORE.ttcn, line 84 */
f__INTERFACE__STORE__InterfaceStore__getElement(const_cast< const RT__INTERFACE__STORE__InterfaceElement&>(receivedElement).Name(), existingElement, indexOfExistingElement);
current_location.update_lineno(86);
/* INTERFACE_STORE.ttcn, line 86 */
if ((indexOfExistingElement != -1)) {
current_location.update_lineno(88);
/* INTERFACE_STORE.ttcn, line 88 */
TEST__API__Functions::f__TEST__API__Subject__setverdict(PASS, cs_2);
current_location.update_lineno(89);
/* INTERFACE_STORE.ttcn, line 89 */
CT__INTERFACE__STORE__InterfaceStore_component_StoredElement[indexOfExistingElement] = receivedElement;
}
else {
current_location.update_lineno(92);
/* INTERFACE_STORE.ttcn, line 92 */
TEST__API__Functions::f__TEST__API__Subject__setverdict(PASS, cs_3);
current_location.update_lineno(93);
/* INTERFACE_STORE.ttcn, line 93 */
CT__INTERFACE__STORE__InterfaceStore_component_StoredElement[CT__INTERFACE__STORE__InterfaceStore_component_StoredElement.size_of()] = receivedElement;
}
current_location.update_lineno(95);
/* INTERFACE_STORE.ttcn, line 95 */
goto tmp_4;
}
}
if (tmp_4_default_flag == ALT_MAYBE) {
tmp_4_default_flag = TTCN_Default::try_altsteps();
if (tmp_4_default_flag == ALT_YES || tmp_4_default_flag == ALT_BREAK) break;
else if (tmp_4_default_flag == ALT_REPEAT) goto tmp_4;
}
current_location.update_lineno(61);
/* INTERFACE_STORE.ttcn, line 61 */
if (tmp_4_alt_flag_0 == ALT_NO && tmp_4_alt_flag_1 == ALT_NO && tmp_4_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file INTERFACE_STORE.ttcn between lines 61 and 97.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void start_f__INTERFACE__STORE__InterfaceStore(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_INTERFACE_STORE_InterfaceStore(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "INTERFACE_STORE", "f_INTERFACE_STORE_InterfaceStore", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("INTERFACE_STORE.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "INTERFACE_STORE");
TEST__API__Functions::module_object.pre_init_module();
GPIO::module_object.pre_init_module();
module_object.add_function("f_INTERFACE_STORE_InterfaceStore_getElement", (genericfunc_t)&f__INTERFACE__STORE__InterfaceStore__getElement, (genericfunc_t)&start_f__INTERFACE__STORE__InterfaceStore__getElement);
module_object.add_function("f_INTERFACE_STORE_InterfaceStore", (genericfunc_t)&f__INTERFACE__STORE__InterfaceStore, (genericfunc_t)&start_f__INTERFACE__STORE__InterfaceStore);
}

static void post_init_module()
{
TTCN_Location current_location("INTERFACE_STORE.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "INTERFACE_STORE");
TEST__API__Functions::module_object.post_init_module();
GPIO::module_object.post_init_module();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "CT_INTERFACE_STORE_InterfaceStore")) {
if (init_base_comps) {
Module_List::initialize_component("TEST_Definitions", "CT_TEST_Subject", FALSE);
}
CT__INTERFACE__STORE__InterfaceStore_component_StoredElement = NULL_VALUE;
CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.activate_port();
return TRUE;
} else if (!strcmp(component_type, "CT_INTERFACE_STORE_InterfaceStoreClient")) {
if (init_base_comps) {
Module_List::initialize_component("TEST_Definitions", "CT_TEST_Subject", FALSE);
}
CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.activate_port();
return TRUE;
} else return FALSE;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_INTERFACE_STORE_InterfaceStore_getElement")) {
CHARSTRING name;
RT__INTERFACE__STORE__InterfaceElement  element;
INTEGER  indexOfElement;
name.decode_text(function_arguments);
element.decode_text(function_arguments);
indexOfElement.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_INTERFACE_STORE_InterfaceStore_getElement(");
name.log();
TTCN_Logger::log_event_str(", ");
element.log();
TTCN_Logger::log_event_str(", ");
indexOfElement.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__INTERFACE__STORE__InterfaceStore__getElement(name, element, indexOfElement);
TTCN_Runtime::function_finished("f_INTERFACE_STORE_InterfaceStore_getElement");
return TRUE;
} else if (!strcmp(function_name, "f_INTERFACE_STORE_InterfaceStore")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_INTERFACE_STORE_InterfaceStore().");
TTCN_Runtime::function_started(function_arguments);
f__INTERFACE__STORE__InterfaceStore();
TTCN_Runtime::function_finished("f_INTERFACE_STORE_InterfaceStore");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
