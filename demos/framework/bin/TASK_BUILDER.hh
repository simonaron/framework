// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef TASK__BUILDER_HH
#define TASK__BUILDER_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "TASK.hh"
#include "INTERFACE_STORE.hh"

#if TTCN3_VERSION != 60300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef TASK__BUILDER_HH
#endif

namespace TASK__BUILDER {

/* Forward declarations of classes */

class RT__TASK__BUILDER__TaskBuilderParameter;
class RT__TASK__BUILDER__TaskBuilderParameter_template;
class RT__TASK__BUILDER__TaskBuilderParameters;
class RT__TASK__BUILDER__TaskBuilderParameters_template;
class RT__TASK__BUILDER__TaskBuilderMission;
class RT__TASK__BUILDER__TaskBuilderMission_template;
class PT__TASK__BUILDER__TaskBuilderPort;

} /* end of namespace */

#ifndef TASK__BUILDER_HH
#define TASK__BUILDER_HH

namespace TASK__BUILDER {

/* Type definitions */

typedef COMPONENT CT__TASK__BUILDER__TaskBuilder;
typedef COMPONENT_template CT__TASK__BUILDER__TaskBuilder_template;

/* Class definitions */

class RT__TASK__BUILDER__TaskBuilderParameter {
  CHARSTRING field_Name;
  CHARSTRING field_Value;
public:
  RT__TASK__BUILDER__TaskBuilderParameter();
  RT__TASK__BUILDER__TaskBuilderParameter(const CHARSTRING& par_Name,
    const CHARSTRING& par_Value);
  RT__TASK__BUILDER__TaskBuilderParameter(const RT__TASK__BUILDER__TaskBuilderParameter& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  RT__TASK__BUILDER__TaskBuilderParameter& operator=(const RT__TASK__BUILDER__TaskBuilderParameter& other_value);
  boolean operator==(const RT__TASK__BUILDER__TaskBuilderParameter& other_value) const;
  inline boolean operator!=(const RT__TASK__BUILDER__TaskBuilderParameter& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& Name()
    {return field_Name;}
  inline const CHARSTRING& Name() const
    {return field_Name;}
  inline CHARSTRING& Value()
    {return field_Value;}
  inline const CHARSTRING& Value() const
    {return field_Value;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class RT__TASK__BUILDER__TaskBuilderParameter_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
RT__TASK__BUILDER__TaskBuilderParameter_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const RT__TASK__BUILDER__TaskBuilderParameter& other_value);
void copy_template(const RT__TASK__BUILDER__TaskBuilderParameter_template& other_value);

public:
RT__TASK__BUILDER__TaskBuilderParameter_template();
RT__TASK__BUILDER__TaskBuilderParameter_template(template_sel other_value);
RT__TASK__BUILDER__TaskBuilderParameter_template(const RT__TASK__BUILDER__TaskBuilderParameter& other_value);
RT__TASK__BUILDER__TaskBuilderParameter_template(const OPTIONAL<RT__TASK__BUILDER__TaskBuilderParameter>& other_value);
RT__TASK__BUILDER__TaskBuilderParameter_template(const RT__TASK__BUILDER__TaskBuilderParameter_template& other_value);
~RT__TASK__BUILDER__TaskBuilderParameter_template();
RT__TASK__BUILDER__TaskBuilderParameter_template& operator=(template_sel other_value);
RT__TASK__BUILDER__TaskBuilderParameter_template& operator=(const RT__TASK__BUILDER__TaskBuilderParameter& other_value);
RT__TASK__BUILDER__TaskBuilderParameter_template& operator=(const OPTIONAL<RT__TASK__BUILDER__TaskBuilderParameter>& other_value);
RT__TASK__BUILDER__TaskBuilderParameter_template& operator=(const RT__TASK__BUILDER__TaskBuilderParameter_template& other_value);
boolean match(const RT__TASK__BUILDER__TaskBuilderParameter& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
RT__TASK__BUILDER__TaskBuilderParameter valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
RT__TASK__BUILDER__TaskBuilderParameter_template& list_item(unsigned int list_index) const;
CHARSTRING_template& Name();
const CHARSTRING_template& Name() const;
CHARSTRING_template& Value();
const CHARSTRING_template& Value() const;
int size_of() const;
void log() const;
void log_match(const RT__TASK__BUILDER__TaskBuilderParameter& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class RT__TASK__BUILDER__TaskBuilderParameters : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
RT__TASK__BUILDER__TaskBuilderParameter **value_elements;
} *val_ptr;

static const RT__TASK__BUILDER__TaskBuilderParameter UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const RT__TASK__BUILDER__TaskBuilderParameters& other_value);
static boolean compare_function(const Base_Type *left_ptr, int left_index, const Base_Type *right_ptr, int right_index);

public:
  typedef RT__TASK__BUILDER__TaskBuilderParameter of_type;
RT__TASK__BUILDER__TaskBuilderParameters();
RT__TASK__BUILDER__TaskBuilderParameters(null_type other_value);
RT__TASK__BUILDER__TaskBuilderParameters(const RT__TASK__BUILDER__TaskBuilderParameters& other_value);
~RT__TASK__BUILDER__TaskBuilderParameters();

void clean_up();
RT__TASK__BUILDER__TaskBuilderParameters& operator=(null_type other_value);
RT__TASK__BUILDER__TaskBuilderParameters& operator=(const RT__TASK__BUILDER__TaskBuilderParameters& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const RT__TASK__BUILDER__TaskBuilderParameters& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const RT__TASK__BUILDER__TaskBuilderParameters& other_value) const { return !(*this == other_value); }

RT__TASK__BUILDER__TaskBuilderParameter& operator[](int index_value);
RT__TASK__BUILDER__TaskBuilderParameter& operator[](const INTEGER& index_value);
const RT__TASK__BUILDER__TaskBuilderParameter& operator[](int index_value) const;
const RT__TASK__BUILDER__TaskBuilderParameter& operator[](const INTEGER& index_value) const;

RT__TASK__BUILDER__TaskBuilderParameters operator<<=(int rotate_count) const;
RT__TASK__BUILDER__TaskBuilderParameters operator<<=(const INTEGER& rotate_count) const;
RT__TASK__BUILDER__TaskBuilderParameters operator>>=(int rotate_count) const;
RT__TASK__BUILDER__TaskBuilderParameters operator>>=(const INTEGER& rotate_count) const;

RT__TASK__BUILDER__TaskBuilderParameters operator+(const RT__TASK__BUILDER__TaskBuilderParameters& other_value) const;

RT__TASK__BUILDER__TaskBuilderParameters substr(int index, int returncount) const;

RT__TASK__BUILDER__TaskBuilderParameters replace(int index, int len, const RT__TASK__BUILDER__TaskBuilderParameters& repl) const;

RT__TASK__BUILDER__TaskBuilderParameters replace(int index, int len, const RT__TASK__BUILDER__TaskBuilderParameters_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class RT__TASK__BUILDER__TaskBuilderParameters_template : public Restricted_Length_Template {
union {
struct {
int n_elements;
RT__TASK__BUILDER__TaskBuilderParameter_template **value_elements;
} single_value;
struct {
unsigned int n_values;
RT__TASK__BUILDER__TaskBuilderParameters_template *list_value;
} value_list;
struct {
unsigned int n_items;
RT__TASK__BUILDER__TaskBuilderParameter_template *set_items;
} value_set;
};
void copy_value(const RT__TASK__BUILDER__TaskBuilderParameters& other_value);
void copy_template(const RT__TASK__BUILDER__TaskBuilderParameters_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);
static boolean match_function_set(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);
static void log_function(const Base_Type *value_ptr, const Restricted_Length_Template *template_ptr, int index_value, int index_template, boolean legacy);

public:
RT__TASK__BUILDER__TaskBuilderParameters_template();
RT__TASK__BUILDER__TaskBuilderParameters_template(template_sel other_value);
RT__TASK__BUILDER__TaskBuilderParameters_template(null_type other_value);
RT__TASK__BUILDER__TaskBuilderParameters_template(const RT__TASK__BUILDER__TaskBuilderParameters& other_value);
RT__TASK__BUILDER__TaskBuilderParameters_template(const OPTIONAL<RT__TASK__BUILDER__TaskBuilderParameters>& other_value);
RT__TASK__BUILDER__TaskBuilderParameters_template(const RT__TASK__BUILDER__TaskBuilderParameters_template& other_value);
~RT__TASK__BUILDER__TaskBuilderParameters_template();

void clean_up();
RT__TASK__BUILDER__TaskBuilderParameters_template& operator=(template_sel other_value);
RT__TASK__BUILDER__TaskBuilderParameters_template& operator=(null_type other_value);
RT__TASK__BUILDER__TaskBuilderParameters_template& operator=(const RT__TASK__BUILDER__TaskBuilderParameters& other_value);
RT__TASK__BUILDER__TaskBuilderParameters_template& operator=(const OPTIONAL<RT__TASK__BUILDER__TaskBuilderParameters>& other_value);
RT__TASK__BUILDER__TaskBuilderParameters_template& operator=(const RT__TASK__BUILDER__TaskBuilderParameters_template& other_value);

RT__TASK__BUILDER__TaskBuilderParameter_template& operator[](int index_value);
RT__TASK__BUILDER__TaskBuilderParameter_template& operator[](const INTEGER& index_value);
const RT__TASK__BUILDER__TaskBuilderParameter_template& operator[](int index_value) const;
const RT__TASK__BUILDER__TaskBuilderParameter_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const RT__TASK__BUILDER__TaskBuilderParameters& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
RT__TASK__BUILDER__TaskBuilderParameters valueof() const;
RT__TASK__BUILDER__TaskBuilderParameters substr(int index, int returncount) const;

RT__TASK__BUILDER__TaskBuilderParameters replace(int index, int len, const RT__TASK__BUILDER__TaskBuilderParameters_template& repl) const;

RT__TASK__BUILDER__TaskBuilderParameters replace(int index, int len, const RT__TASK__BUILDER__TaskBuilderParameters& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
RT__TASK__BUILDER__TaskBuilderParameters_template& list_item(unsigned int list_index);
RT__TASK__BUILDER__TaskBuilderParameter_template& set_item(unsigned int set_index);
void log() const;
void log_match(const RT__TASK__BUILDER__TaskBuilderParameters& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean get_istemplate_kind(const char* type) const;
};

class RT__TASK__BUILDER__TaskBuilderMission {
  CHARSTRING field_TaskName;
  RT__TASK__BUILDER__TaskBuilderParameters field_Parameters;
  OPTIONAL<COMPONENT> field_CreatedTask;
public:
  RT__TASK__BUILDER__TaskBuilderMission();
  RT__TASK__BUILDER__TaskBuilderMission(const CHARSTRING& par_TaskName,
    const RT__TASK__BUILDER__TaskBuilderParameters& par_Parameters,
    const OPTIONAL<COMPONENT>& par_CreatedTask);
  RT__TASK__BUILDER__TaskBuilderMission(const RT__TASK__BUILDER__TaskBuilderMission& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  RT__TASK__BUILDER__TaskBuilderMission& operator=(const RT__TASK__BUILDER__TaskBuilderMission& other_value);
  boolean operator==(const RT__TASK__BUILDER__TaskBuilderMission& other_value) const;
  inline boolean operator!=(const RT__TASK__BUILDER__TaskBuilderMission& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& TaskName()
    {return field_TaskName;}
  inline const CHARSTRING& TaskName() const
    {return field_TaskName;}
  inline RT__TASK__BUILDER__TaskBuilderParameters& Parameters()
    {return field_Parameters;}
  inline const RT__TASK__BUILDER__TaskBuilderParameters& Parameters() const
    {return field_Parameters;}
  inline OPTIONAL<COMPONENT>& CreatedTask()
    {return field_CreatedTask;}
  inline const OPTIONAL<COMPONENT>& CreatedTask() const
    {return field_CreatedTask;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class RT__TASK__BUILDER__TaskBuilderMission_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
RT__TASK__BUILDER__TaskBuilderMission_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const RT__TASK__BUILDER__TaskBuilderMission& other_value);
void copy_template(const RT__TASK__BUILDER__TaskBuilderMission_template& other_value);

public:
RT__TASK__BUILDER__TaskBuilderMission_template();
RT__TASK__BUILDER__TaskBuilderMission_template(template_sel other_value);
RT__TASK__BUILDER__TaskBuilderMission_template(const RT__TASK__BUILDER__TaskBuilderMission& other_value);
RT__TASK__BUILDER__TaskBuilderMission_template(const OPTIONAL<RT__TASK__BUILDER__TaskBuilderMission>& other_value);
RT__TASK__BUILDER__TaskBuilderMission_template(const RT__TASK__BUILDER__TaskBuilderMission_template& other_value);
~RT__TASK__BUILDER__TaskBuilderMission_template();
RT__TASK__BUILDER__TaskBuilderMission_template& operator=(template_sel other_value);
RT__TASK__BUILDER__TaskBuilderMission_template& operator=(const RT__TASK__BUILDER__TaskBuilderMission& other_value);
RT__TASK__BUILDER__TaskBuilderMission_template& operator=(const OPTIONAL<RT__TASK__BUILDER__TaskBuilderMission>& other_value);
RT__TASK__BUILDER__TaskBuilderMission_template& operator=(const RT__TASK__BUILDER__TaskBuilderMission_template& other_value);
boolean match(const RT__TASK__BUILDER__TaskBuilderMission& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
RT__TASK__BUILDER__TaskBuilderMission valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
RT__TASK__BUILDER__TaskBuilderMission_template& list_item(unsigned int list_index) const;
CHARSTRING_template& TaskName();
const CHARSTRING_template& TaskName() const;
RT__TASK__BUILDER__TaskBuilderParameters_template& Parameters();
const RT__TASK__BUILDER__TaskBuilderParameters_template& Parameters() const;
COMPONENT_template& CreatedTask();
const COMPONENT_template& CreatedTask() const;
int size_of() const;
void log() const;
void log_match(const RT__TASK__BUILDER__TaskBuilderMission& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PT__TASK__BUILDER__TaskBuilderPort : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
RT__TASK__BUILDER__TaskBuilderMission *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
PT__TASK__BUILDER__TaskBuilderPort(const char *par_port_name = NULL);
~PT__TASK__BUILDER__TaskBuilderPort();
void send(const RT__TASK__BUILDER__TaskBuilderMission& send_par, const COMPONENT& destination_component);
void send(const RT__TASK__BUILDER__TaskBuilderMission& send_par);
void send(const RT__TASK__BUILDER__TaskBuilderMission_template& send_par, const COMPONENT& destination_component);
void send(const RT__TASK__BUILDER__TaskBuilderMission_template& send_par);
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const RT__TASK__BUILDER__TaskBuilderMission_template& value_template, RT__TASK__BUILDER__TaskBuilderMission *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const RT__TASK__BUILDER__TaskBuilderMission_template& value_template, RT__TASK__BUILDER__TaskBuilderMission *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const RT__TASK__BUILDER__TaskBuilderMission_template& value_template, RT__TASK__BUILDER__TaskBuilderMission *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
private:
void incoming_message(const RT__TASK__BUILDER__TaskBuilderMission& incoming_par, component sender_component);
protected:
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const RT__TASK__BUILDER__TaskBuilderParameters& other_value);
inline boolean operator!=(null_type null_value, const RT__TASK__BUILDER__TaskBuilderParameters& other_value) { return !(null_value == other_value); }
extern CHARSTRING f__TaskBuilderParameters__getValueOf(const RT__TASK__BUILDER__TaskBuilderParameters& r__parameters, const CHARSTRING& v__name);

/* Global variable declarations */

extern const XERdescriptor_t RT__TASK__BUILDER__TaskBuilderParameter_Name_xer_;
extern const TTCN_JSONdescriptor_t RT__TASK__BUILDER__TaskBuilderParameter_Name_json_;
extern const TTCN_Typedescriptor_t RT__TASK__BUILDER__TaskBuilderParameter_Name_descr_;
extern const XERdescriptor_t RT__TASK__BUILDER__TaskBuilderParameter_Value_xer_;
extern const TTCN_JSONdescriptor_t RT__TASK__BUILDER__TaskBuilderParameter_Value_json_;
extern const TTCN_Typedescriptor_t RT__TASK__BUILDER__TaskBuilderParameter_Value_descr_;
extern const TTCN_Typedescriptor_t RT__TASK__BUILDER__TaskBuilderParameter_descr_;
extern const TTCN_Typedescriptor_t RT__TASK__BUILDER__TaskBuilderParameters_descr_;
extern const XERdescriptor_t RT__TASK__BUILDER__TaskBuilderMission_TaskName_xer_;
extern const TTCN_JSONdescriptor_t RT__TASK__BUILDER__TaskBuilderMission_TaskName_json_;
extern const TTCN_Typedescriptor_t RT__TASK__BUILDER__TaskBuilderMission_TaskName_descr_;
extern const TTCN_Typedescriptor_t RT__TASK__BUILDER__TaskBuilderMission_descr_;
extern const TTCN_Typedescriptor_t& CT__TASK__BUILDER__TaskBuilder_descr_;
extern PT__TASK__BUILDER__TaskBuilderPort CT__TASK__BUILDER__TaskBuilder_component_p__taskBuilderPort;
extern INTERFACE__STORE::PT__INTERFACE__STORE__InterfaceStorePort CT__TASK__BUILDER__TaskBuilder_component_p__interfaceStore;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
