// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "TEST_EXECUTOR.hh"

namespace TEST__EXECUTOR {

/* Prototypes of static functions */

static void pre_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x73, 0x7d, 0xe8, 0x1f, 0x6d, 0xf8, 0x2b, 0x64, 0xf5, 0xdb, 0xae, 0x74, 0xc0, 0xd1, 0x26, 0x24 };

/* Global variable definitions */

const TTCN_Typedescriptor_t& TEST__EXECUTOR__TestExecutor_descr_ = COMPONENT_descr_;
TTCN_Module module_object("TEST_EXECUTOR", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, init_comp_type, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

void f__TEST__EXECUTOR__TestExecutor()
{
TTCN_Location current_location("TEST_EXECUTOR.ttcn", 7, TTCN_Location::LOCATION_FUNCTION, "f_TEST_EXECUTOR_TestExecutor");
}

void start_f__TEST__EXECUTOR__TestExecutor(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_TEST_EXECUTOR_TestExecutor(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "TEST_EXECUTOR", "f_TEST_EXECUTOR_TestExecutor", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("TEST_EXECUTOR.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "TEST_EXECUTOR");
module_object.add_function("f_TEST_EXECUTOR_TestExecutor", (genericfunc_t)&f__TEST__EXECUTOR__TestExecutor, (genericfunc_t)&start_f__TEST__EXECUTOR__TestExecutor);
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "TEST_EXECUTOR_TestExecutor")) {
return TRUE;
} else return FALSE;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_TEST_EXECUTOR_TestExecutor")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_TEST_EXECUTOR_TestExecutor().");
TTCN_Runtime::function_started(function_arguments);
f__TEST__EXECUTOR__TestExecutor();
TTCN_Runtime::function_finished("f_TEST_EXECUTOR_TestExecutor");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
