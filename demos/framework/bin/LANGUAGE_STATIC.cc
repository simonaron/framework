// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LANGUAGE_STATIC.hh"

namespace LANGUAGE__STATIC {

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x79, 0xce, 0x44, 0xf6, 0x07, 0x26, 0xb0, 0x42, 0xb8, 0xa7, 0x45, 0xe1, 0x65, 0xdb, 0x9f, 0x04 };

/* Global variable definitions */

const XERdescriptor_t       LANGUAGE__STATIC__Interface_Name_xer_ = { {"Name>\n", "Name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t LANGUAGE__STATIC__Interface_Name_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t LANGUAGE__STATIC__Interface_Name_descr_ = { "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.Name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &LANGUAGE__STATIC__Interface_Name_xer_, &LANGUAGE__STATIC__Interface_Name_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       LANGUAGE__STATIC__Interface_Library_xer_ = { {"Library>\n", "Library>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t LANGUAGE__STATIC__Interface_Library_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t LANGUAGE__STATIC__Interface_Library_descr_ = { "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.Library", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &LANGUAGE__STATIC__Interface_Library_xer_, &LANGUAGE__STATIC__Interface_Library_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for LANGUAGE__STATIC__Interface
const TTCN_Typedescriptor_t LANGUAGE__STATIC__Interface_descr_ = { "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interface", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for LANGUAGE__STATIC__Interfaces
const TTCN_Typedescriptor_t LANGUAGE__STATIC__Interfaces_descr_ = { "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces", NULL, NULL, NULL, NULL, NULL, NULL, &LANGUAGE__STATIC__Interface_descr_, TTCN_Typedescriptor_t::DONTCARE };
TTCN_Module module_object("LANGUAGE_STATIC", __DATE__, __TIME__, module_checksum, NULL, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

LANGUAGE__STATIC__Interface::LANGUAGE__STATIC__Interface()
{
}

LANGUAGE__STATIC__Interface::LANGUAGE__STATIC__Interface(const CHARSTRING& par_Name,
    const CHARSTRING& par_Library)
  :   field_Name(par_Name),
  field_Library(par_Library)
{
}

LANGUAGE__STATIC__Interface::LANGUAGE__STATIC__Interface(const LANGUAGE__STATIC__Interface& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
if (other_value.Name().is_bound()) field_Name = other_value.Name();
else field_Name.clean_up();
if (other_value.Library().is_bound()) field_Library = other_value.Library();
else field_Library.clean_up();
}

void LANGUAGE__STATIC__Interface::clean_up()
{
field_Name.clean_up();
field_Library.clean_up();
}

LANGUAGE__STATIC__Interface& LANGUAGE__STATIC__Interface::operator=(const LANGUAGE__STATIC__Interface& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
  if (other_value.Name().is_bound()) field_Name = other_value.Name();
  else field_Name.clean_up();
  if (other_value.Library().is_bound()) field_Library = other_value.Library();
  else field_Library.clean_up();
}
return *this;
}

boolean LANGUAGE__STATIC__Interface::operator==(const LANGUAGE__STATIC__Interface& other_value) const
{
return field_Name==other_value.field_Name
  && field_Library==other_value.field_Library;
}

boolean LANGUAGE__STATIC__Interface::is_bound() const
{
if(field_Name.is_bound()) return TRUE;
if(field_Library.is_bound()) return TRUE;
return FALSE;
}
boolean LANGUAGE__STATIC__Interface::is_value() const
{
if(!field_Name.is_value()) return FALSE;
if(!field_Library.is_value()) return FALSE;
return TRUE;
}
void LANGUAGE__STATIC__Interface::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ Name := ");
field_Name.log();
TTCN_Logger::log_event_str(", Library := ");
field_Library.log();
TTCN_Logger::log_event_str(" }");
}

void LANGUAGE__STATIC__Interface::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) Name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) Library().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Library")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Library().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interface");
  }
}

void LANGUAGE__STATIC__Interface::set_implicit_omit()
{
if (Name().is_bound()) Name().set_implicit_omit();
if (Library().is_bound()) Library().set_implicit_omit();
}

void LANGUAGE__STATIC__Interface::encode_text(Text_Buf& text_buf) const
{
field_Name.encode_text(text_buf);
field_Library.encode_text(text_buf);
}

void LANGUAGE__STATIC__Interface::decode_text(Text_Buf& text_buf)
{
field_Name.decode_text(text_buf);
field_Library.decode_text(text_buf);
}

struct LANGUAGE__STATIC__Interface_template::single_value_struct {
CHARSTRING_template field_Name;
CHARSTRING_template field_Library;
};

void LANGUAGE__STATIC__Interface_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_Name = ANY_VALUE;
single_value->field_Library = ANY_VALUE;
}
}
}

void LANGUAGE__STATIC__Interface_template::copy_value(const LANGUAGE__STATIC__Interface& other_value)
{
single_value = new single_value_struct;
if (other_value.Name().is_bound()) {
  single_value->field_Name = other_value.Name();
} else {
  single_value->field_Name.clean_up();
}
if (other_value.Library().is_bound()) {
  single_value->field_Library = other_value.Library();
} else {
  single_value->field_Library.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void LANGUAGE__STATIC__Interface_template::copy_template(const LANGUAGE__STATIC__Interface_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.Name().get_selection()) {
single_value->field_Name = other_value.Name();
} else {
single_value->field_Name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.Library().get_selection()) {
single_value->field_Library = other_value.Library();
} else {
single_value->field_Library.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new LANGUAGE__STATIC__Interface_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
break;
}
set_selection(other_value);
}

LANGUAGE__STATIC__Interface_template::LANGUAGE__STATIC__Interface_template()
{
}

LANGUAGE__STATIC__Interface_template::LANGUAGE__STATIC__Interface_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

LANGUAGE__STATIC__Interface_template::LANGUAGE__STATIC__Interface_template(const LANGUAGE__STATIC__Interface& other_value)
{
copy_value(other_value);
}

LANGUAGE__STATIC__Interface_template::LANGUAGE__STATIC__Interface_template(const OPTIONAL<LANGUAGE__STATIC__Interface>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__STATIC__Interface&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface from an unbound optional field.");
}
}

LANGUAGE__STATIC__Interface_template::LANGUAGE__STATIC__Interface_template(const LANGUAGE__STATIC__Interface_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

LANGUAGE__STATIC__Interface_template::~LANGUAGE__STATIC__Interface_template()
{
clean_up();
}

LANGUAGE__STATIC__Interface_template& LANGUAGE__STATIC__Interface_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

LANGUAGE__STATIC__Interface_template& LANGUAGE__STATIC__Interface_template::operator=(const LANGUAGE__STATIC__Interface& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

LANGUAGE__STATIC__Interface_template& LANGUAGE__STATIC__Interface_template::operator=(const OPTIONAL<LANGUAGE__STATIC__Interface>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__STATIC__Interface&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
}
return *this;
}

LANGUAGE__STATIC__Interface_template& LANGUAGE__STATIC__Interface_template::operator=(const LANGUAGE__STATIC__Interface_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean LANGUAGE__STATIC__Interface_template::match(const LANGUAGE__STATIC__Interface& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.Name().is_bound()) return FALSE;
if(!single_value->field_Name.match(other_value.Name(), legacy))return FALSE;
if(!other_value.Library().is_bound()) return FALSE;
if(!single_value->field_Library.match(other_value.Library(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
}
return FALSE;
}

boolean LANGUAGE__STATIC__Interface_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_Name.is_bound()) return TRUE;
if (single_value->field_Library.is_bound()) return TRUE;
return FALSE;
}

boolean LANGUAGE__STATIC__Interface_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_Name.is_value()) return FALSE;
if (!single_value->field_Library.is_value()) return FALSE;
return TRUE;
}

void LANGUAGE__STATIC__Interface_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

LANGUAGE__STATIC__Interface LANGUAGE__STATIC__Interface_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
LANGUAGE__STATIC__Interface ret_val;
if (single_value->field_Name.is_bound()) {
ret_val.Name() = single_value->field_Name.valueof();
}
if (single_value->field_Library.is_bound()) {
ret_val.Library() = single_value->field_Library.valueof();
}
return ret_val;
}

void LANGUAGE__STATIC__Interface_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new LANGUAGE__STATIC__Interface_template[list_length];
}

LANGUAGE__STATIC__Interface_template& LANGUAGE__STATIC__Interface_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
return value_list.list_value[list_index];
}

CHARSTRING_template& LANGUAGE__STATIC__Interface_template::Name()
{
set_specific();
return single_value->field_Name;
}

const CHARSTRING_template& LANGUAGE__STATIC__Interface_template::Name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field Name of a non-specific template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
return single_value->field_Name;
}

CHARSTRING_template& LANGUAGE__STATIC__Interface_template::Library()
{
set_specific();
return single_value->field_Library;
}

const CHARSTRING_template& LANGUAGE__STATIC__Interface_template::Library() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field Library of a non-specific template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
return single_value->field_Library;
}

int LANGUAGE__STATIC__Interface_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
  }
  return 0;
}

void LANGUAGE__STATIC__Interface_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ Name := ");
single_value->field_Name.log();
TTCN_Logger::log_event_str(", Library := ");
single_value->field_Library.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void LANGUAGE__STATIC__Interface_template::log_match(const LANGUAGE__STATIC__Interface& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_Name.match(match_value.Name(), legacy)){
TTCN_Logger::log_logmatch_info(".Name");
single_value->field_Name.log_match(match_value.Name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_Library.match(match_value.Library(), legacy)){
TTCN_Logger::log_logmatch_info(".Library");
single_value->field_Library.log_match(match_value.Library(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ Name := ");
single_value->field_Name.log_match(match_value.Name(), legacy);
TTCN_Logger::log_event_str(", Library := ");
single_value->field_Library.log_match(match_value.Library(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void LANGUAGE__STATIC__Interface_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_Name.encode_text(text_buf);
single_value->field_Library.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
}
}

void LANGUAGE__STATIC__Interface_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_Name.decode_text(text_buf);
single_value->field_Library.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new LANGUAGE__STATIC__Interface_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface.");
}
}

void LANGUAGE__STATIC__Interface_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    LANGUAGE__STATIC__Interface_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) Name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) Library().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Library")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Library().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interface: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interface");
  }
  is_ifpresent = param.get_ifpresent();
}

void LANGUAGE__STATIC__Interface_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_Name.check_restriction(t_res, t_name ? t_name : "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interface");
single_value->field_Library.check_restriction(t_res, t_name ? t_name : "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interface");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interface");
}

boolean LANGUAGE__STATIC__Interface_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean LANGUAGE__STATIC__Interface_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


const LANGUAGE__STATIC__Interface LANGUAGE__STATIC__Interfaces::UNBOUND_ELEM;
LANGUAGE__STATIC__Interfaces::LANGUAGE__STATIC__Interfaces()
{
val_ptr = NULL;
}

LANGUAGE__STATIC__Interfaces::LANGUAGE__STATIC__Interfaces(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

LANGUAGE__STATIC__Interfaces::LANGUAGE__STATIC__Interfaces(const LANGUAGE__STATIC__Interfaces& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

LANGUAGE__STATIC__Interfaces::~LANGUAGE__STATIC__Interfaces()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void LANGUAGE__STATIC__Interfaces::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

LANGUAGE__STATIC__Interfaces& LANGUAGE__STATIC__Interfaces::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

LANGUAGE__STATIC__Interfaces& LANGUAGE__STATIC__Interfaces::operator=(const LANGUAGE__STATIC__Interfaces& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean LANGUAGE__STATIC__Interfaces::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
return val_ptr->n_elements == 0 ;
}

boolean LANGUAGE__STATIC__Interfaces::operator==(const LANGUAGE__STATIC__Interfaces& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

LANGUAGE__STATIC__Interface& LANGUAGE__STATIC__Interfaces::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (LANGUAGE__STATIC__Interface**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new LANGUAGE__STATIC__Interface(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new LANGUAGE__STATIC__Interface;
}
return *val_ptr->value_elements[index_value];
}

LANGUAGE__STATIC__Interface& LANGUAGE__STATIC__Interfaces::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
return (*this)[(int)index_value];
}

const LANGUAGE__STATIC__Interface& LANGUAGE__STATIC__Interfaces::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
if (index_value < 0) TTCN_error("Accessing an element of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const LANGUAGE__STATIC__Interface& LANGUAGE__STATIC__Interfaces::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
return (*this)[(int)index_value];
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
LANGUAGE__STATIC__Interfaces ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new LANGUAGE__STATIC__Interface(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces::operator+(const LANGUAGE__STATIC__Interfaces& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
LANGUAGE__STATIC__Interfaces ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new LANGUAGE__STATIC__Interface(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new LANGUAGE__STATIC__Interface(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces","element");
LANGUAGE__STATIC__Interfaces ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new LANGUAGE__STATIC__Interface(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces::replace(int index, int len, const LANGUAGE__STATIC__Interfaces& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
check_replace_arguments(val_ptr->n_elements, index, len, "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces","element");
LANGUAGE__STATIC__Interfaces ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new LANGUAGE__STATIC__Interface(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new LANGUAGE__STATIC__Interface(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new LANGUAGE__STATIC__Interface(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces::replace(int index, int len, const LANGUAGE__STATIC__Interfaces_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void LANGUAGE__STATIC__Interfaces::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (LANGUAGE__STATIC__Interface**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new LANGUAGE__STATIC__Interface(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (LANGUAGE__STATIC__Interface**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (LANGUAGE__STATIC__Interface**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean LANGUAGE__STATIC__Interfaces::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int LANGUAGE__STATIC__Interfaces::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
return val_ptr->n_elements;
}

int LANGUAGE__STATIC__Interfaces::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void LANGUAGE__STATIC__Interfaces::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void LANGUAGE__STATIC__Interfaces::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void LANGUAGE__STATIC__Interfaces::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void LANGUAGE__STATIC__Interfaces::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void LANGUAGE__STATIC__Interfaces::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
val_ptr->value_elements = (LANGUAGE__STATIC__Interface**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new LANGUAGE__STATIC__Interface;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void LANGUAGE__STATIC__Interfaces_template::copy_value(const LANGUAGE__STATIC__Interfaces& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (LANGUAGE__STATIC__Interface_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new LANGUAGE__STATIC__Interface_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new LANGUAGE__STATIC__Interface_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void LANGUAGE__STATIC__Interfaces_template::copy_template(const LANGUAGE__STATIC__Interfaces_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (LANGUAGE__STATIC__Interface_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new LANGUAGE__STATIC__Interface_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new LANGUAGE__STATIC__Interface_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new LANGUAGE__STATIC__Interfaces_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
break;
}
set_selection(other_value);
}

boolean LANGUAGE__STATIC__Interfaces_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const LANGUAGE__STATIC__Interfaces_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const LANGUAGE__STATIC__Interfaces*)value_ptr)[value_index], legacy);
else return ((const LANGUAGE__STATIC__Interfaces_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

LANGUAGE__STATIC__Interfaces_template::LANGUAGE__STATIC__Interfaces_template()
{
}

LANGUAGE__STATIC__Interfaces_template::LANGUAGE__STATIC__Interfaces_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

LANGUAGE__STATIC__Interfaces_template::LANGUAGE__STATIC__Interfaces_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

LANGUAGE__STATIC__Interfaces_template::LANGUAGE__STATIC__Interfaces_template(const LANGUAGE__STATIC__Interfaces& other_value)
{
copy_value(other_value);
}

LANGUAGE__STATIC__Interfaces_template::LANGUAGE__STATIC__Interfaces_template(const OPTIONAL<LANGUAGE__STATIC__Interfaces>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__STATIC__Interfaces&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces from an unbound optional field.");
}
}

LANGUAGE__STATIC__Interfaces_template::LANGUAGE__STATIC__Interfaces_template(const LANGUAGE__STATIC__Interfaces_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

LANGUAGE__STATIC__Interfaces_template::~LANGUAGE__STATIC__Interfaces_template()
{
clean_up();
}

void LANGUAGE__STATIC__Interfaces_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

LANGUAGE__STATIC__Interfaces_template& LANGUAGE__STATIC__Interfaces_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

LANGUAGE__STATIC__Interfaces_template& LANGUAGE__STATIC__Interfaces_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

LANGUAGE__STATIC__Interfaces_template& LANGUAGE__STATIC__Interfaces_template::operator=(const LANGUAGE__STATIC__Interfaces& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

LANGUAGE__STATIC__Interfaces_template& LANGUAGE__STATIC__Interfaces_template::operator=(const OPTIONAL<LANGUAGE__STATIC__Interfaces>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__STATIC__Interfaces&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
}
return *this;
}

LANGUAGE__STATIC__Interfaces_template& LANGUAGE__STATIC__Interfaces_template::operator=(const LANGUAGE__STATIC__Interfaces_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

LANGUAGE__STATIC__Interface_template& LANGUAGE__STATIC__Interfaces_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
    break;
}
return *single_value.value_elements[index_value];
}

LANGUAGE__STATIC__Interface_template& LANGUAGE__STATIC__Interfaces_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
return (*this)[(int)index_value];
}

const LANGUAGE__STATIC__Interface_template& LANGUAGE__STATIC__Interfaces_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const LANGUAGE__STATIC__Interface_template& LANGUAGE__STATIC__Interfaces_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
return (*this)[(int)index_value];
}

void LANGUAGE__STATIC__Interfaces_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (LANGUAGE__STATIC__Interface_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new LANGUAGE__STATIC__Interface_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new LANGUAGE__STATIC__Interface_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (LANGUAGE__STATIC__Interface_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int LANGUAGE__STATIC__Interfaces_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int LANGUAGE__STATIC__Interfaces_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces");
}

boolean LANGUAGE__STATIC__Interfaces_template::match(const LANGUAGE__STATIC__Interfaces& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
}
return FALSE;
}

boolean LANGUAGE__STATIC__Interfaces_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
LANGUAGE__STATIC__Interfaces ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces_template::replace(int index, int len, const LANGUAGE__STATIC__Interfaces_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

LANGUAGE__STATIC__Interfaces LANGUAGE__STATIC__Interfaces_template::replace(int index, int len, const LANGUAGE__STATIC__Interfaces& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void LANGUAGE__STATIC__Interfaces_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new LANGUAGE__STATIC__Interfaces_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
}
set_selection(template_type);
}

LANGUAGE__STATIC__Interfaces_template& LANGUAGE__STATIC__Interfaces_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
return value_list.list_value[list_index];
}

void LANGUAGE__STATIC__Interfaces_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void LANGUAGE__STATIC__Interfaces_template::log_match(const LANGUAGE__STATIC__Interfaces& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void LANGUAGE__STATIC__Interfaces_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
}
}

void LANGUAGE__STATIC__Interfaces_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
single_value.value_elements = (LANGUAGE__STATIC__Interface_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new LANGUAGE__STATIC__Interface_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new LANGUAGE__STATIC__Interfaces_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
}
}

boolean LANGUAGE__STATIC__Interfaces_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean LANGUAGE__STATIC__Interfaces_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void LANGUAGE__STATIC__Interfaces_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    LANGUAGE__STATIC__Interfaces_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void LANGUAGE__STATIC__Interfaces_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces");
}

boolean LANGUAGE__STATIC__Interfaces_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}

/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const LANGUAGE__STATIC__Interfaces& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @LANGUAGE_STATIC.LANGUAGE_STATIC_Interfaces.");
return other_value.val_ptr->n_elements == 0;
}


} /* end of namespace */
