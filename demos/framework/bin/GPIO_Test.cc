// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "GPIO_Test.hh"

namespace GPIO__Test {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static void module_control_part();

/* Literal string constants */

static const CHARSTRING cs_5(4, "HIGH"),
cs_3(9, "INTERFACE"),
cs_7(3, "LOW"),
cs_4(7, "PARAM_1"),
cs_1(13, "STORED DEVICE"),
cs_0(15, "Value received!"),
cs_2(7, "receive"),
cs_6(4, "send");
static const unsigned char module_checksum[] = { 0x7a, 0x6f, 0x52, 0x39, 0x55, 0x9e, 0x04, 0xac, 0x03, 0xd0, 0x60, 0x9f, 0xa0, 0xd4, 0xe3, 0xbf };

/* Global variable definitions */

const TTCN_Typedescriptor_t& CT__GPIO__TEST__TaskBuilder_descr_ = COMPONENT_descr_;
TASK__BUILDER::PT__TASK__BUILDER__TaskBuilderPort CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort("p_taskBuilderPort");
TASK::PT__TASK__TaskExecutorPort CT__GPIO__TEST__TaskBuilder_component_p__task("p_task");
INTERFACE__STORE::PT__INTERFACE__STORE__InterfaceStorePort CT__GPIO__TEST__TaskBuilder_component_p__interfaceStorePort("p_interfaceStorePort");
TTCN_Module module_object("GPIO_Test", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, init_comp_type, NULL, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

verdicttype testcase_tc__GPIO__UnitTest____Device____receive__value(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("GPIO_Test.ttcn", 10, TTCN_Location::LOCATION_TESTCASE, "tc_GPIO_UnitTest__Device__receive_value");
try {
TTCN_Runtime::begin_testcase("GPIO_Test", "tc_GPIO_UnitTest__Device__receive_value", "TEST_Definitions", "CT_TEST_Watcher", "TEST_Definitions", "CT_TEST_Watcher", has_timer, timer_value);
current_location.update_lineno(11);
/* GPIO_Test.ttcn, line 11 */
TEST__API__Functions::f__TEST__API__UnitTest__Start();
current_location.update_lineno(13);
/* GPIO_Test.ttcn, line 13 */
COMPONENT device(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(14);
/* GPIO_Test.ttcn, line 14 */
COMPONENT controller(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Controller", NULL, NULL, TRUE));
current_location.update_lineno(15);
/* GPIO_Test.ttcn, line 15 */
TEST__API__Functions::f__TEST__API__Watcher__watch(device);
current_location.update_lineno(17);
/* GPIO_Test.ttcn, line 17 */
TTCN_Runtime::connect_port(device, GPIO__Definitions::CT__GPIO__Device_component_controller.get_name(), controller, GPIO__Definitions::CT__GPIO__Controller_component_device.get_name());
current_location.update_lineno(18);
/* GPIO_Test.ttcn, line 18 */
GPIO__Functions::start_f__GPIO__Controller__sendValue(controller, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(19);
/* GPIO_Test.ttcn, line 19 */
GPIO__Functions::start_f__GPIO__Device__receiveValue(device);
current_location.update_lineno(21);
/* GPIO_Test.ttcn, line 21 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_0, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(23);
/* GPIO_Test.ttcn, line 23 */
TEST__API__Functions::f__TEST__API__UnitTest__Finished();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_GPIO_UnitTest__Device__receive_value was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__GPIO__UnitTest____Controller____receive__value(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("GPIO_Test.ttcn", 26, TTCN_Location::LOCATION_TESTCASE, "tc_GPIO_UnitTest__Controller__receive_value");
try {
TTCN_Runtime::begin_testcase("GPIO_Test", "tc_GPIO_UnitTest__Controller__receive_value", "TEST_Definitions", "CT_TEST_Watcher", "TEST_Definitions", "CT_TEST_Watcher", has_timer, timer_value);
current_location.update_lineno(27);
/* GPIO_Test.ttcn, line 27 */
TEST__API__Functions::f__TEST__API__UnitTest__Start();
current_location.update_lineno(29);
/* GPIO_Test.ttcn, line 29 */
COMPONENT device(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(30);
/* GPIO_Test.ttcn, line 30 */
COMPONENT controller(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Controller", NULL, NULL, TRUE));
current_location.update_lineno(31);
/* GPIO_Test.ttcn, line 31 */
TEST__API__Functions::f__TEST__API__Watcher__watch(controller);
current_location.update_lineno(33);
/* GPIO_Test.ttcn, line 33 */
TTCN_Runtime::connect_port(device, GPIO__Definitions::CT__GPIO__Device_component_controller.get_name(), controller, GPIO__Definitions::CT__GPIO__Controller_component_device.get_name());
current_location.update_lineno(34);
/* GPIO_Test.ttcn, line 34 */
GPIO__Functions::start_f__GPIO__Device__sendValue(device, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(35);
/* GPIO_Test.ttcn, line 35 */
GPIO__Functions::start_f__GPIO__Controller__receiveValue(controller);
current_location.update_lineno(37);
/* GPIO_Test.ttcn, line 37 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_0, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(39);
/* GPIO_Test.ttcn, line 39 */
TEST__API__Functions::f__TEST__API__UnitTest__Finished();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_GPIO_UnitTest__Controller__receive_value was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__GPIO__UnitTest____TaskBuilder____create__task__with__builder(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("GPIO_Test.ttcn", 49, TTCN_Location::LOCATION_TESTCASE, "tc_GPIO_UnitTest__TaskBuilder__create_task_with_builder");
try {
TTCN_Runtime::begin_testcase("GPIO_Test", "tc_GPIO_UnitTest__TaskBuilder__create_task_with_builder", "GPIO_Test", "CT_GPIO_TEST_TaskBuilder", "GPIO_Test", "CT_GPIO_TEST_TaskBuilder", has_timer, timer_value);
current_location.update_lineno(50);
/* GPIO_Test.ttcn, line 50 */
TEST__API__Functions::f__TEST__API__UnitTest__Start();
current_location.update_lineno(52);
/* GPIO_Test.ttcn, line 52 */
COMPONENT interfaceStore(TTCN_Runtime::create_component("INTERFACE_STORE", "CT_INTERFACE_STORE_InterfaceStore", NULL, NULL, TRUE));
current_location.update_lineno(53);
/* GPIO_Test.ttcn, line 53 */
TTCN_Runtime::connect_port(self, CT__GPIO__TEST__TaskBuilder_component_p__interfaceStorePort.get_name(), interfaceStore, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.get_name());
current_location.update_lineno(54);
/* GPIO_Test.ttcn, line 54 */
INTERFACE__STORE::start_f__INTERFACE__STORE__InterfaceStore(interfaceStore);
current_location.update_lineno(56);
/* GPIO_Test.ttcn, line 56 */
COMPONENT device(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(57);
/* GPIO_Test.ttcn, line 57 */
{
INTERFACE__STORE::RT__INTERFACE__STORE__InterfaceElement_template tmp_0;
tmp_0.Name() = cs_1;
tmp_0.Device().UV__GPIO() = device;
tmp_0.Controller() = OMIT_VALUE;
CT__GPIO__TEST__TaskBuilder_component_p__interfaceStorePort.send(tmp_0);
}
current_location.update_lineno(58);
/* GPIO_Test.ttcn, line 58 */
COMPONENT builder(TTCN_Runtime::create_component("GPIO_TaskBuilder", "CT_GPIO_TaskBuilder", NULL, NULL, TRUE));
current_location.update_lineno(60);
/* GPIO_Test.ttcn, line 60 */
GPIO__TaskBuilder::start_f__GPIO__TaskBuilder(builder, interfaceStore);
current_location.update_lineno(61);
/* GPIO_Test.ttcn, line 61 */
TTCN_Runtime::connect_port(self, CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.get_name(), builder, TASK__BUILDER::CT__TASK__BUILDER__TaskBuilder_component_p__taskBuilderPort.get_name());
current_location.update_lineno(63);
/* GPIO_Test.ttcn, line 63 */
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission receivedMission;
current_location.update_lineno(65);
/* GPIO_Test.ttcn, line 65 */
TTCN_Logger::log_str(TTCN_USER, "TASK 1 Receive value --- START");
current_location.update_lineno(66);
/* GPIO_Test.ttcn, line 66 */
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_1;
tmp_1.TaskName() = cs_2;
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameters_template& tmp_2 = tmp_1.Parameters();
tmp_2.set_size(2);
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_3 = tmp_2[0];
tmp_3.Name() = cs_3;
tmp_3.Value() = cs_1;
}
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_4 = tmp_2[1];
tmp_4.Name() = cs_4;
tmp_4.Value() = cs_5;
}
}
tmp_1.CreatedTask() = OMIT_VALUE;
CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.send(tmp_1);
}
current_location.update_lineno(67);
/* GPIO_Test.ttcn, line 67 */
{
tmp_5:
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_6;
tmp_6.TaskName() = cs_2;
tmp_6.Parameters() = ANY_VALUE;
tmp_6.CreatedTask() = ANY_VALUE;
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.receive(tmp_6, &(receivedMission), any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_5;
}
current_location.update_lineno(67);
/* GPIO_Test.ttcn, line 67 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 67.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(69);
/* GPIO_Test.ttcn, line 69 */
TTCN_Runtime::connect_port(self, CT__GPIO__TEST__TaskBuilder_component_p__task.get_name(), const_cast< const TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission&>(receivedMission).CreatedTask(), TASK::CT__TASK__Task_component_p__taskPort.get_name());
current_location.update_lineno(70);
/* GPIO_Test.ttcn, line 70 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__INIT));
current_location.update_lineno(71);
/* GPIO_Test.ttcn, line 71 */
{
tmp_7:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__INITIALISED), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_7;
}
current_location.update_lineno(71);
/* GPIO_Test.ttcn, line 71 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 71.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(72);
/* GPIO_Test.ttcn, line 72 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__START));
current_location.update_lineno(74);
/* GPIO_Test.ttcn, line 74 */
GPIO__Functions::start_f__GPIO__Device__sendValue(device, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(76);
/* GPIO_Test.ttcn, line 76 */
{
tmp_8:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__FINISH), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_8;
}
current_location.update_lineno(76);
/* GPIO_Test.ttcn, line 76 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 76.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(77);
/* GPIO_Test.ttcn, line 77 */
TTCN_Logger::log_str(TTCN_USER, "");
current_location.update_lineno(79);
/* GPIO_Test.ttcn, line 79 */
TTCN_Logger::log_str(TTCN_USER, "TASK 2 Receive value --- START");
current_location.update_lineno(80);
/* GPIO_Test.ttcn, line 80 */
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_9;
tmp_9.TaskName() = cs_2;
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameters_template& tmp_10 = tmp_9.Parameters();
tmp_10.set_size(2);
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_11 = tmp_10[0];
tmp_11.Name() = cs_3;
tmp_11.Value() = cs_1;
}
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_12 = tmp_10[1];
tmp_12.Name() = cs_4;
tmp_12.Value() = cs_5;
}
}
tmp_9.CreatedTask() = OMIT_VALUE;
CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.send(tmp_9);
}
current_location.update_lineno(81);
/* GPIO_Test.ttcn, line 81 */
{
tmp_13:
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_14;
tmp_14.TaskName() = cs_2;
tmp_14.Parameters() = ANY_VALUE;
tmp_14.CreatedTask() = ANY_VALUE;
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.receive(tmp_14, &(receivedMission), any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_13;
}
current_location.update_lineno(81);
/* GPIO_Test.ttcn, line 81 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 81.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(83);
/* GPIO_Test.ttcn, line 83 */
TTCN_Runtime::connect_port(self, CT__GPIO__TEST__TaskBuilder_component_p__task.get_name(), const_cast< const TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission&>(receivedMission).CreatedTask(), TASK::CT__TASK__Task_component_p__taskPort.get_name());
current_location.update_lineno(84);
/* GPIO_Test.ttcn, line 84 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__INIT));
current_location.update_lineno(85);
/* GPIO_Test.ttcn, line 85 */
{
tmp_15:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__INITIALISED), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_15;
}
current_location.update_lineno(85);
/* GPIO_Test.ttcn, line 85 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 85.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(86);
/* GPIO_Test.ttcn, line 86 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__START));
current_location.update_lineno(88);
/* GPIO_Test.ttcn, line 88 */
GPIO__Functions::start_f__GPIO__Device__sendValue(device, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(90);
/* GPIO_Test.ttcn, line 90 */
{
tmp_16:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__FINISH), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_16;
}
current_location.update_lineno(90);
/* GPIO_Test.ttcn, line 90 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 90.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(91);
/* GPIO_Test.ttcn, line 91 */
TTCN_Logger::log_str(TTCN_USER, "");
current_location.update_lineno(93);
/* GPIO_Test.ttcn, line 93 */
TTCN_Logger::log_str(TTCN_USER, "TASK 3 Send value --- START");
current_location.update_lineno(94);
/* GPIO_Test.ttcn, line 94 */
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_17;
tmp_17.TaskName() = cs_6;
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameters_template& tmp_18 = tmp_17.Parameters();
tmp_18.set_size(2);
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_19 = tmp_18[0];
tmp_19.Name() = cs_3;
tmp_19.Value() = cs_1;
}
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_20 = tmp_18[1];
tmp_20.Name() = cs_4;
tmp_20.Value() = cs_5;
}
}
tmp_17.CreatedTask() = OMIT_VALUE;
CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.send(tmp_17);
}
current_location.update_lineno(95);
/* GPIO_Test.ttcn, line 95 */
{
tmp_21:
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_22;
tmp_22.TaskName() = cs_6;
tmp_22.Parameters() = ANY_VALUE;
tmp_22.CreatedTask() = ANY_VALUE;
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.receive(tmp_22, &(receivedMission), any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_21;
}
current_location.update_lineno(95);
/* GPIO_Test.ttcn, line 95 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 95.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(97);
/* GPIO_Test.ttcn, line 97 */
TTCN_Runtime::connect_port(self, CT__GPIO__TEST__TaskBuilder_component_p__task.get_name(), const_cast< const TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission&>(receivedMission).CreatedTask(), TASK::CT__TASK__Task_component_p__taskPort.get_name());
current_location.update_lineno(98);
/* GPIO_Test.ttcn, line 98 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__INIT));
current_location.update_lineno(99);
/* GPIO_Test.ttcn, line 99 */
{
tmp_23:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__INITIALISED), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_23;
}
current_location.update_lineno(99);
/* GPIO_Test.ttcn, line 99 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 99.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(100);
/* GPIO_Test.ttcn, line 100 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__START));
current_location.update_lineno(102);
/* GPIO_Test.ttcn, line 102 */
GPIO__Functions::start_f__GPIO__Device__receiveValue(device);
current_location.update_lineno(104);
/* GPIO_Test.ttcn, line 104 */
{
tmp_24:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__FINISH), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_24;
}
current_location.update_lineno(104);
/* GPIO_Test.ttcn, line 104 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 104.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(105);
/* GPIO_Test.ttcn, line 105 */
TTCN_Logger::log_str(TTCN_USER, "");
current_location.update_lineno(107);
/* GPIO_Test.ttcn, line 107 */
TEST__API__Functions::f__TEST__API__UnitTest__Finished();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_GPIO_UnitTest__TaskBuilder__create_task_with_builder was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__GPIO__UnitTest____TaskBuilder____parametrised__performance(const INTEGER& sum, boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("GPIO_Test.ttcn", 110, TTCN_Location::LOCATION_TESTCASE, "tc_GPIO_UnitTest__TaskBuilder__parametrised_performance");
try {
TTCN_Runtime::begin_testcase("GPIO_Test", "tc_GPIO_UnitTest__TaskBuilder__parametrised_performance", "GPIO_Test", "CT_GPIO_TEST_TaskBuilder", "GPIO_Test", "CT_GPIO_TEST_TaskBuilder", has_timer, timer_value);
current_location.update_lineno(111);
/* GPIO_Test.ttcn, line 111 */
TEST__API__Functions::f__TEST__API__UnitTest__Start();
current_location.update_lineno(113);
/* GPIO_Test.ttcn, line 113 */
COMPONENT interfaceStore(TTCN_Runtime::create_component("INTERFACE_STORE", "CT_INTERFACE_STORE_InterfaceStore", NULL, NULL, TRUE));
current_location.update_lineno(114);
/* GPIO_Test.ttcn, line 114 */
TTCN_Runtime::connect_port(self, CT__GPIO__TEST__TaskBuilder_component_p__interfaceStorePort.get_name(), interfaceStore, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.get_name());
current_location.update_lineno(115);
/* GPIO_Test.ttcn, line 115 */
INTERFACE__STORE::start_f__INTERFACE__STORE__InterfaceStore(interfaceStore);
current_location.update_lineno(117);
/* GPIO_Test.ttcn, line 117 */
COMPONENT device(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(118);
/* GPIO_Test.ttcn, line 118 */
{
INTERFACE__STORE::RT__INTERFACE__STORE__InterfaceElement_template tmp_25;
tmp_25.Name() = cs_1;
tmp_25.Device().UV__GPIO() = device;
tmp_25.Controller() = OMIT_VALUE;
CT__GPIO__TEST__TaskBuilder_component_p__interfaceStorePort.send(tmp_25);
}
current_location.update_lineno(119);
/* GPIO_Test.ttcn, line 119 */
COMPONENT builder(TTCN_Runtime::create_component("GPIO_TaskBuilder", "CT_GPIO_TaskBuilder", NULL, NULL, TRUE));
current_location.update_lineno(121);
/* GPIO_Test.ttcn, line 121 */
GPIO__TaskBuilder::start_f__GPIO__TaskBuilder(builder, interfaceStore);
current_location.update_lineno(122);
/* GPIO_Test.ttcn, line 122 */
TTCN_Runtime::connect_port(self, CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.get_name(), builder, TASK__BUILDER::CT__TASK__BUILDER__TaskBuilder_component_p__taskBuilderPort.get_name());
current_location.update_lineno(124);
/* GPIO_Test.ttcn, line 124 */
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission receivedMission;
current_location.update_lineno(126);
/* GPIO_Test.ttcn, line 126 */
TIMER t("t", 1.0e2);
current_location.update_lineno(127);
/* GPIO_Test.ttcn, line 127 */
t.start();
{
current_location.update_lineno(129);
/* GPIO_Test.ttcn, line 129 */
INTEGER i(0);
current_location.update_lineno(129);
/* GPIO_Test.ttcn, line 129 */
for ( ; ; ) {
current_location.update_lineno(129);
/* GPIO_Test.ttcn, line 129 */
if (!(i < sum)) break;
current_location.update_lineno(131);
/* GPIO_Test.ttcn, line 131 */
TTCN_Logger::log_str(TTCN_USER, "TASK 3 Send HIGH --- START");
current_location.update_lineno(132);
/* GPIO_Test.ttcn, line 132 */
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_26;
tmp_26.TaskName() = cs_6;
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameters_template& tmp_27 = tmp_26.Parameters();
tmp_27.set_size(2);
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_28 = tmp_27[0];
tmp_28.Name() = cs_3;
tmp_28.Value() = cs_1;
}
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_29 = tmp_27[1];
tmp_29.Name() = cs_4;
tmp_29.Value() = cs_5;
}
}
tmp_26.CreatedTask() = OMIT_VALUE;
CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.send(tmp_26);
}
current_location.update_lineno(133);
/* GPIO_Test.ttcn, line 133 */
{
tmp_30:
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_31;
tmp_31.TaskName() = cs_6;
tmp_31.Parameters() = ANY_VALUE;
tmp_31.CreatedTask() = ANY_VALUE;
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.receive(tmp_31, &(receivedMission), any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_30;
}
current_location.update_lineno(133);
/* GPIO_Test.ttcn, line 133 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 133.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(135);
/* GPIO_Test.ttcn, line 135 */
TTCN_Runtime::connect_port(self, CT__GPIO__TEST__TaskBuilder_component_p__task.get_name(), const_cast< const TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission&>(receivedMission).CreatedTask(), TASK::CT__TASK__Task_component_p__taskPort.get_name());
current_location.update_lineno(136);
/* GPIO_Test.ttcn, line 136 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__INIT));
current_location.update_lineno(137);
/* GPIO_Test.ttcn, line 137 */
{
tmp_32:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__INITIALISED), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_32;
}
current_location.update_lineno(137);
/* GPIO_Test.ttcn, line 137 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 137.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(138);
/* GPIO_Test.ttcn, line 138 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__START));
current_location.update_lineno(140);
/* GPIO_Test.ttcn, line 140 */
GPIO__Functions::start_f__GPIO__Device__receiveValue(device);
current_location.update_lineno(142);
/* GPIO_Test.ttcn, line 142 */
{
tmp_33:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__FINISH), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_33;
}
current_location.update_lineno(142);
/* GPIO_Test.ttcn, line 142 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 142.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(143);
/* GPIO_Test.ttcn, line 143 */
TTCN_Logger::log_str(TTCN_USER, "");
current_location.update_lineno(145);
/* GPIO_Test.ttcn, line 145 */
TTCN_Logger::log_str(TTCN_USER, "TASK 3 Send LOW --- START");
current_location.update_lineno(146);
/* GPIO_Test.ttcn, line 146 */
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_34;
tmp_34.TaskName() = cs_6;
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameters_template& tmp_35 = tmp_34.Parameters();
tmp_35.set_size(2);
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_36 = tmp_35[0];
tmp_36.Name() = cs_3;
tmp_36.Value() = cs_1;
}
{
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderParameter_template& tmp_37 = tmp_35[1];
tmp_37.Name() = cs_4;
tmp_37.Value() = cs_7;
}
}
tmp_34.CreatedTask() = OMIT_VALUE;
CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.send(tmp_34);
}
current_location.update_lineno(147);
/* GPIO_Test.ttcn, line 147 */
{
tmp_38:
TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission_template tmp_39;
tmp_39.TaskName() = cs_6;
tmp_39.Parameters() = ANY_VALUE;
tmp_39.CreatedTask() = ANY_VALUE;
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.receive(tmp_39, &(receivedMission), any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_38;
}
current_location.update_lineno(147);
/* GPIO_Test.ttcn, line 147 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 147.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(149);
/* GPIO_Test.ttcn, line 149 */
TTCN_Runtime::connect_port(self, CT__GPIO__TEST__TaskBuilder_component_p__task.get_name(), const_cast< const TASK__BUILDER::RT__TASK__BUILDER__TaskBuilderMission&>(receivedMission).CreatedTask(), TASK::CT__TASK__Task_component_p__taskPort.get_name());
current_location.update_lineno(150);
/* GPIO_Test.ttcn, line 150 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__INIT));
current_location.update_lineno(151);
/* GPIO_Test.ttcn, line 151 */
{
tmp_40:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__INITIALISED), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_40;
}
current_location.update_lineno(151);
/* GPIO_Test.ttcn, line 151 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 151.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(152);
/* GPIO_Test.ttcn, line 152 */
CT__GPIO__TEST__TaskBuilder_component_p__task.send(TASK::ET__TASK__ControlIncomingMessage(TASK::ET__TASK__ControlIncomingMessage::EV__TASK__START));
current_location.update_lineno(154);
/* GPIO_Test.ttcn, line 154 */
GPIO__Functions::start_f__GPIO__Device__receiveValue(device);
current_location.update_lineno(156);
/* GPIO_Test.ttcn, line 156 */
{
tmp_41:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = CT__GPIO__TEST__TaskBuilder_component_p__task.receive(TASK::ET__TASK__ControlOutcomingMessage_template(TASK::ET__TASK__ControlOutcomingMessage::EV__TASK__FINISH), NULL, any_compref, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_41;
}
current_location.update_lineno(156);
/* GPIO_Test.ttcn, line 156 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file GPIO_Test.ttcn, line 156.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(157);
/* GPIO_Test.ttcn, line 157 */
TTCN_Logger::log_str(TTCN_USER, "");
current_location.update_lineno(129);
/* GPIO_Test.ttcn, line 129 */
{
INTEGER tmp_42;
++i;
}
}
}
current_location.update_lineno(159);
/* GPIO_Test.ttcn, line 159 */
try {
TTCN_Logger::begin_event(TTCN_USER);
sum.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(160);
/* GPIO_Test.ttcn, line 160 */
try {
TTCN_Logger::begin_event(TTCN_USER);
{
FLOAT tmp_43(t.read());
tmp_43.log();
}
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(161);
/* GPIO_Test.ttcn, line 161 */
TEST__API__Functions::f__TEST__API__UnitTest__Finished();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_GPIO_UnitTest__TaskBuilder__parametrised_performance was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("GPIO_Test.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "GPIO_Test");
GPIO::module_object.pre_init_module();
TASK__BUILDER::module_object.pre_init_module();
INTERFACE__STORE::module_object.pre_init_module();
module_object.add_testcase_nonpard("tc_GPIO_UnitTest__Device__receive_value", testcase_tc__GPIO__UnitTest____Device____receive__value);
module_object.add_testcase_nonpard("tc_GPIO_UnitTest__Controller__receive_value", testcase_tc__GPIO__UnitTest____Controller____receive__value);
module_object.add_testcase_nonpard("tc_GPIO_UnitTest__TaskBuilder__create_task_with_builder", testcase_tc__GPIO__UnitTest____TaskBuilder____create__task__with__builder);
module_object.add_testcase_pard("tc_GPIO_UnitTest__TaskBuilder__parametrised_performance", (genericfunc_t)&testcase_tc__GPIO__UnitTest____TaskBuilder____parametrised__performance);
}

static void post_init_module()
{
TTCN_Location current_location("GPIO_Test.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "GPIO_Test");
GPIO::module_object.post_init_module();
TASK__BUILDER::module_object.post_init_module();
INTERFACE__STORE::module_object.post_init_module();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "CT_GPIO_TEST_TaskBuilder")) {
if (init_base_comps) {
Module_List::initialize_component("TEST_Definitions", "CT_TEST_Subject", FALSE);
Module_List::initialize_component("TEST_Definitions", "CT_TEST_Watcher", FALSE);
}
CT__GPIO__TEST__TaskBuilder_component_p__taskBuilderPort.activate_port();
CT__GPIO__TEST__TaskBuilder_component_p__task.activate_port();
CT__GPIO__TEST__TaskBuilder_component_p__interfaceStorePort.activate_port();
return TRUE;
} else return FALSE;
}

static void module_control_part()
{
TTCN_Location current_location("GPIO_Test.ttcn", 164, TTCN_Location::LOCATION_CONTROLPART, "GPIO_Test");
TTCN_Runtime::begin_controlpart("GPIO_Test");
current_location.update_lineno(165);
/* GPIO_Test.ttcn, line 165 */
testcase_tc__GPIO__UnitTest____Device____receive__value(FALSE, 0.0);
current_location.update_lineno(166);
/* GPIO_Test.ttcn, line 166 */
testcase_tc__GPIO__UnitTest____Controller____receive__value(FALSE, 0.0);
current_location.update_lineno(167);
/* GPIO_Test.ttcn, line 167 */
testcase_tc__GPIO__UnitTest____TaskBuilder____create__task__with__builder(FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
