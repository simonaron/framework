// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LANGUAGE__STATIC_HH
#define LANGUAGE__STATIC_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef LANGUAGE__STATIC_HH
#endif

namespace LANGUAGE__STATIC {

/* Forward declarations of classes */

class LANGUAGE__STATIC__Interface;
class LANGUAGE__STATIC__Interface_template;
class LANGUAGE__STATIC__Interfaces;
class LANGUAGE__STATIC__Interfaces_template;

} /* end of namespace */

#ifndef LANGUAGE__STATIC_HH
#define LANGUAGE__STATIC_HH

namespace LANGUAGE__STATIC {

/* Class definitions */

class LANGUAGE__STATIC__Interface {
  CHARSTRING field_Name;
  CHARSTRING field_Library;
public:
  LANGUAGE__STATIC__Interface();
  LANGUAGE__STATIC__Interface(const CHARSTRING& par_Name,
    const CHARSTRING& par_Library);
  LANGUAGE__STATIC__Interface(const LANGUAGE__STATIC__Interface& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  LANGUAGE__STATIC__Interface& operator=(const LANGUAGE__STATIC__Interface& other_value);
  boolean operator==(const LANGUAGE__STATIC__Interface& other_value) const;
  inline boolean operator!=(const LANGUAGE__STATIC__Interface& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& Name()
    {return field_Name;}
  inline const CHARSTRING& Name() const
    {return field_Name;}
  inline CHARSTRING& Library()
    {return field_Library;}
  inline const CHARSTRING& Library() const
    {return field_Library;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class LANGUAGE__STATIC__Interface_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
LANGUAGE__STATIC__Interface_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const LANGUAGE__STATIC__Interface& other_value);
void copy_template(const LANGUAGE__STATIC__Interface_template& other_value);

public:
LANGUAGE__STATIC__Interface_template();
LANGUAGE__STATIC__Interface_template(template_sel other_value);
LANGUAGE__STATIC__Interface_template(const LANGUAGE__STATIC__Interface& other_value);
LANGUAGE__STATIC__Interface_template(const OPTIONAL<LANGUAGE__STATIC__Interface>& other_value);
LANGUAGE__STATIC__Interface_template(const LANGUAGE__STATIC__Interface_template& other_value);
~LANGUAGE__STATIC__Interface_template();
LANGUAGE__STATIC__Interface_template& operator=(template_sel other_value);
LANGUAGE__STATIC__Interface_template& operator=(const LANGUAGE__STATIC__Interface& other_value);
LANGUAGE__STATIC__Interface_template& operator=(const OPTIONAL<LANGUAGE__STATIC__Interface>& other_value);
LANGUAGE__STATIC__Interface_template& operator=(const LANGUAGE__STATIC__Interface_template& other_value);
boolean match(const LANGUAGE__STATIC__Interface& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
LANGUAGE__STATIC__Interface valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
LANGUAGE__STATIC__Interface_template& list_item(unsigned int list_index) const;
CHARSTRING_template& Name();
const CHARSTRING_template& Name() const;
CHARSTRING_template& Library();
const CHARSTRING_template& Library() const;
int size_of() const;
void log() const;
void log_match(const LANGUAGE__STATIC__Interface& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class LANGUAGE__STATIC__Interfaces : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
LANGUAGE__STATIC__Interface **value_elements;
} *val_ptr;

static const LANGUAGE__STATIC__Interface UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const LANGUAGE__STATIC__Interfaces& other_value);

public:
  typedef LANGUAGE__STATIC__Interface of_type;
LANGUAGE__STATIC__Interfaces();
LANGUAGE__STATIC__Interfaces(null_type other_value);
LANGUAGE__STATIC__Interfaces(const LANGUAGE__STATIC__Interfaces& other_value);
~LANGUAGE__STATIC__Interfaces();

void clean_up();
LANGUAGE__STATIC__Interfaces& operator=(null_type other_value);
LANGUAGE__STATIC__Interfaces& operator=(const LANGUAGE__STATIC__Interfaces& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const LANGUAGE__STATIC__Interfaces& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const LANGUAGE__STATIC__Interfaces& other_value) const { return !(*this == other_value); }

LANGUAGE__STATIC__Interface& operator[](int index_value);
LANGUAGE__STATIC__Interface& operator[](const INTEGER& index_value);
const LANGUAGE__STATIC__Interface& operator[](int index_value) const;
const LANGUAGE__STATIC__Interface& operator[](const INTEGER& index_value) const;

LANGUAGE__STATIC__Interfaces operator<<=(int rotate_count) const;
LANGUAGE__STATIC__Interfaces operator<<=(const INTEGER& rotate_count) const;
LANGUAGE__STATIC__Interfaces operator>>=(int rotate_count) const;
LANGUAGE__STATIC__Interfaces operator>>=(const INTEGER& rotate_count) const;

LANGUAGE__STATIC__Interfaces operator+(const LANGUAGE__STATIC__Interfaces& other_value) const;

LANGUAGE__STATIC__Interfaces substr(int index, int returncount) const;

LANGUAGE__STATIC__Interfaces replace(int index, int len, const LANGUAGE__STATIC__Interfaces& repl) const;

LANGUAGE__STATIC__Interfaces replace(int index, int len, const LANGUAGE__STATIC__Interfaces_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class LANGUAGE__STATIC__Interfaces_template : public Record_Of_Template {
union {
struct {
int n_elements;
LANGUAGE__STATIC__Interface_template **value_elements;
} single_value;
struct {
unsigned int n_values;
LANGUAGE__STATIC__Interfaces_template *list_value;
} value_list;
};
void copy_value(const LANGUAGE__STATIC__Interfaces& other_value);
void copy_template(const LANGUAGE__STATIC__Interfaces_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);

public:
LANGUAGE__STATIC__Interfaces_template();
LANGUAGE__STATIC__Interfaces_template(template_sel other_value);
LANGUAGE__STATIC__Interfaces_template(null_type other_value);
LANGUAGE__STATIC__Interfaces_template(const LANGUAGE__STATIC__Interfaces& other_value);
LANGUAGE__STATIC__Interfaces_template(const OPTIONAL<LANGUAGE__STATIC__Interfaces>& other_value);
LANGUAGE__STATIC__Interfaces_template(const LANGUAGE__STATIC__Interfaces_template& other_value);
~LANGUAGE__STATIC__Interfaces_template();

void clean_up();
LANGUAGE__STATIC__Interfaces_template& operator=(template_sel other_value);
LANGUAGE__STATIC__Interfaces_template& operator=(null_type other_value);
LANGUAGE__STATIC__Interfaces_template& operator=(const LANGUAGE__STATIC__Interfaces& other_value);
LANGUAGE__STATIC__Interfaces_template& operator=(const OPTIONAL<LANGUAGE__STATIC__Interfaces>& other_value);
LANGUAGE__STATIC__Interfaces_template& operator=(const LANGUAGE__STATIC__Interfaces_template& other_value);

LANGUAGE__STATIC__Interface_template& operator[](int index_value);
LANGUAGE__STATIC__Interface_template& operator[](const INTEGER& index_value);
const LANGUAGE__STATIC__Interface_template& operator[](int index_value) const;
const LANGUAGE__STATIC__Interface_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const LANGUAGE__STATIC__Interfaces& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
LANGUAGE__STATIC__Interfaces valueof() const;
LANGUAGE__STATIC__Interfaces substr(int index, int returncount) const;

LANGUAGE__STATIC__Interfaces replace(int index, int len, const LANGUAGE__STATIC__Interfaces_template& repl) const;

LANGUAGE__STATIC__Interfaces replace(int index, int len, const LANGUAGE__STATIC__Interfaces& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
LANGUAGE__STATIC__Interfaces_template& list_item(unsigned int list_index);
void log() const;
void log_match(const LANGUAGE__STATIC__Interfaces& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean get_istemplate_kind(const char* type) const;
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const LANGUAGE__STATIC__Interfaces& other_value);
inline boolean operator!=(null_type null_value, const LANGUAGE__STATIC__Interfaces& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const XERdescriptor_t LANGUAGE__STATIC__Interface_Name_xer_;
extern const TTCN_JSONdescriptor_t LANGUAGE__STATIC__Interface_Name_json_;
extern const TTCN_Typedescriptor_t LANGUAGE__STATIC__Interface_Name_descr_;
extern const XERdescriptor_t LANGUAGE__STATIC__Interface_Library_xer_;
extern const TTCN_JSONdescriptor_t LANGUAGE__STATIC__Interface_Library_json_;
extern const TTCN_Typedescriptor_t LANGUAGE__STATIC__Interface_Library_descr_;
extern const TTCN_Typedescriptor_t LANGUAGE__STATIC__Interface_descr_;
extern const TTCN_Typedescriptor_t LANGUAGE__STATIC__Interfaces_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
