// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LANGUAGE_HH
#define LANGUAGE_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "LANGUAGE_STATIC.hh"
#include "LANGUAGE_DYNAMIC.hh"

#if TTCN3_VERSION != 60300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef LANGUAGE_HH
#endif

namespace LANGUAGE {

/* Forward declarations of classes */

class LANGUAGE__DynamicTestConfiguration;
class LANGUAGE__DynamicTestConfiguration_template;
class LANGUAGE__LogicalTestConfiguration;
class LANGUAGE__LogicalTestConfiguration_template;

} /* end of namespace */

#ifndef LANGUAGE_HH
#define LANGUAGE_HH

namespace LANGUAGE {

/* Type definitions */

typedef LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces LANGUAGE__StaticTestConfiguration;
typedef LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces_template LANGUAGE__StaticTestConfiguration_template;

/* Class definitions */

class LANGUAGE__DynamicTestConfiguration : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_Sequence = 1 };
private:
union_selection_type union_selection;
union {
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence *field_Sequence;
};
void copy_value(const LANGUAGE__DynamicTestConfiguration& other_value);

public:
LANGUAGE__DynamicTestConfiguration();
LANGUAGE__DynamicTestConfiguration(const LANGUAGE__DynamicTestConfiguration& other_value);
~LANGUAGE__DynamicTestConfiguration();
LANGUAGE__DynamicTestConfiguration& operator=(const LANGUAGE__DynamicTestConfiguration& other_value);
boolean operator==(const LANGUAGE__DynamicTestConfiguration& other_value) const;
inline boolean operator!=(const LANGUAGE__DynamicTestConfiguration& other_value) const { return !(*this == other_value); }
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence& Sequence();
const LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence& Sequence() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class LANGUAGE__DynamicTestConfiguration_template : public Base_Template {
union {
struct {
LANGUAGE__DynamicTestConfiguration::union_selection_type union_selection;
union {
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template *field_Sequence;
};
} single_value;
struct {
unsigned int n_values;
LANGUAGE__DynamicTestConfiguration_template *list_value;
} value_list;
};
void copy_value(const LANGUAGE__DynamicTestConfiguration& other_value);

void copy_template(const LANGUAGE__DynamicTestConfiguration_template& other_value);

public:
LANGUAGE__DynamicTestConfiguration_template();
LANGUAGE__DynamicTestConfiguration_template(template_sel other_value);
LANGUAGE__DynamicTestConfiguration_template(const LANGUAGE__DynamicTestConfiguration& other_value);
LANGUAGE__DynamicTestConfiguration_template(const OPTIONAL<LANGUAGE__DynamicTestConfiguration>& other_value);
LANGUAGE__DynamicTestConfiguration_template(const LANGUAGE__DynamicTestConfiguration_template& other_value);
~LANGUAGE__DynamicTestConfiguration_template();
void clean_up();
LANGUAGE__DynamicTestConfiguration_template& operator=(template_sel other_value);
LANGUAGE__DynamicTestConfiguration_template& operator=(const LANGUAGE__DynamicTestConfiguration& other_value);
LANGUAGE__DynamicTestConfiguration_template& operator=(const OPTIONAL<LANGUAGE__DynamicTestConfiguration>& other_value);
LANGUAGE__DynamicTestConfiguration_template& operator=(const LANGUAGE__DynamicTestConfiguration_template& other_value);
boolean match(const LANGUAGE__DynamicTestConfiguration& other_value, boolean legacy = FALSE) const;
boolean is_value() const;LANGUAGE__DynamicTestConfiguration valueof() const;
LANGUAGE__DynamicTestConfiguration_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template& Sequence();
const LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template& Sequence() const;
boolean ischosen(LANGUAGE__DynamicTestConfiguration::union_selection_type checked_selection) const;
void log() const;
void log_match(const LANGUAGE__DynamicTestConfiguration& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class LANGUAGE__LogicalTestConfiguration {
  CHARSTRING field_TestName;
  LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces field_StaticTestConfiguration;
  LANGUAGE__DynamicTestConfiguration field_DynamicTestConfiguration;
public:
  LANGUAGE__LogicalTestConfiguration();
  LANGUAGE__LogicalTestConfiguration(const CHARSTRING& par_TestName,
    const LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces& par_StaticTestConfiguration,
    const LANGUAGE__DynamicTestConfiguration& par_DynamicTestConfiguration);
  LANGUAGE__LogicalTestConfiguration(const LANGUAGE__LogicalTestConfiguration& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  LANGUAGE__LogicalTestConfiguration& operator=(const LANGUAGE__LogicalTestConfiguration& other_value);
  boolean operator==(const LANGUAGE__LogicalTestConfiguration& other_value) const;
  inline boolean operator!=(const LANGUAGE__LogicalTestConfiguration& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& TestName()
    {return field_TestName;}
  inline const CHARSTRING& TestName() const
    {return field_TestName;}
  inline LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces& StaticTestConfiguration()
    {return field_StaticTestConfiguration;}
  inline const LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces& StaticTestConfiguration() const
    {return field_StaticTestConfiguration;}
  inline LANGUAGE__DynamicTestConfiguration& DynamicTestConfiguration()
    {return field_DynamicTestConfiguration;}
  inline const LANGUAGE__DynamicTestConfiguration& DynamicTestConfiguration() const
    {return field_DynamicTestConfiguration;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class LANGUAGE__LogicalTestConfiguration_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
LANGUAGE__LogicalTestConfiguration_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const LANGUAGE__LogicalTestConfiguration& other_value);
void copy_template(const LANGUAGE__LogicalTestConfiguration_template& other_value);

public:
LANGUAGE__LogicalTestConfiguration_template();
LANGUAGE__LogicalTestConfiguration_template(template_sel other_value);
LANGUAGE__LogicalTestConfiguration_template(const LANGUAGE__LogicalTestConfiguration& other_value);
LANGUAGE__LogicalTestConfiguration_template(const OPTIONAL<LANGUAGE__LogicalTestConfiguration>& other_value);
LANGUAGE__LogicalTestConfiguration_template(const LANGUAGE__LogicalTestConfiguration_template& other_value);
~LANGUAGE__LogicalTestConfiguration_template();
LANGUAGE__LogicalTestConfiguration_template& operator=(template_sel other_value);
LANGUAGE__LogicalTestConfiguration_template& operator=(const LANGUAGE__LogicalTestConfiguration& other_value);
LANGUAGE__LogicalTestConfiguration_template& operator=(const OPTIONAL<LANGUAGE__LogicalTestConfiguration>& other_value);
LANGUAGE__LogicalTestConfiguration_template& operator=(const LANGUAGE__LogicalTestConfiguration_template& other_value);
boolean match(const LANGUAGE__LogicalTestConfiguration& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
LANGUAGE__LogicalTestConfiguration valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
LANGUAGE__LogicalTestConfiguration_template& list_item(unsigned int list_index) const;
CHARSTRING_template& TestName();
const CHARSTRING_template& TestName() const;
LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces_template& StaticTestConfiguration();
const LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces_template& StaticTestConfiguration() const;
LANGUAGE__DynamicTestConfiguration_template& DynamicTestConfiguration();
const LANGUAGE__DynamicTestConfiguration_template& DynamicTestConfiguration() const;
int size_of() const;
void log() const;
void log_match(const LANGUAGE__LogicalTestConfiguration& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Global variable declarations */

extern const TTCN_Typedescriptor_t& LANGUAGE__StaticTestConfiguration_descr_;
extern const TTCN_Typedescriptor_t LANGUAGE__DynamicTestConfiguration_descr_;
extern const XERdescriptor_t LANGUAGE__LogicalTestConfiguration_TestName_xer_;
extern const TTCN_JSONdescriptor_t LANGUAGE__LogicalTestConfiguration_TestName_json_;
extern const TTCN_Typedescriptor_t LANGUAGE__LogicalTestConfiguration_TestName_descr_;
extern const TTCN_Typedescriptor_t LANGUAGE__LogicalTestConfiguration_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
