// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "TASK.hh"

namespace TASK {

/* Prototypes of static functions */

static void pre_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x31, 0x83, 0x29, 0x6e, 0x25, 0xa3, 0x70, 0x5a, 0xc2, 0x31, 0x2f, 0x83, 0x5d, 0x28, 0x32, 0x9c };

/* Global variable definitions */

// No XER for ET__TASK__ControlOutcomingMessage
const TTCN_Typedescriptor_t ET__TASK__ControlOutcomingMessage_descr_ = { "@TASK.ET_TASK_ControlOutcomingMessage", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ET__TASK__ControlIncomingMessage
const TTCN_Typedescriptor_t ET__TASK__ControlIncomingMessage_descr_ = { "@TASK.ET_TASK_ControlIncomingMessage", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& CT__TASK__Task_descr_ = COMPONENT_descr_;
PT__TASK__TaskPort CT__TASK__Task_component_p__taskPort("p_taskPort");
TTCN_Module module_object("TASK", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, init_comp_type, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

ET__TASK__ControlOutcomingMessage::ET__TASK__ControlOutcomingMessage()
{
enum_value = UNBOUND_VALUE;
}

ET__TASK__ControlOutcomingMessage::ET__TASK__ControlOutcomingMessage(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @TASK.ET_TASK_ControlOutcomingMessage with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

ET__TASK__ControlOutcomingMessage::ET__TASK__ControlOutcomingMessage(enum_type other_value)
{
enum_value = other_value;
}

ET__TASK__ControlOutcomingMessage::ET__TASK__ControlOutcomingMessage(const ET__TASK__ControlOutcomingMessage& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
enum_value = other_value.enum_value;
}

ET__TASK__ControlOutcomingMessage& ET__TASK__ControlOutcomingMessage::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

ET__TASK__ControlOutcomingMessage& ET__TASK__ControlOutcomingMessage::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

ET__TASK__ControlOutcomingMessage& ET__TASK__ControlOutcomingMessage::operator=(const ET__TASK__ControlOutcomingMessage& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
enum_value = other_value.enum_value;
return *this;
}

boolean ET__TASK__ControlOutcomingMessage::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
return enum_value == other_value;
}

boolean ET__TASK__ControlOutcomingMessage::operator==(const ET__TASK__ControlOutcomingMessage& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
return enum_value == other_value.enum_value;
}

boolean ET__TASK__ControlOutcomingMessage::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
return enum_value < other_value;
}

boolean ET__TASK__ControlOutcomingMessage::operator<(const ET__TASK__ControlOutcomingMessage& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
return enum_value < other_value.enum_value;
}

boolean ET__TASK__ControlOutcomingMessage::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
return enum_value > other_value;
}

boolean ET__TASK__ControlOutcomingMessage::operator>(const ET__TASK__ControlOutcomingMessage& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
return enum_value > other_value.enum_value;
}

const char *ET__TASK__ControlOutcomingMessage::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case EV__TASK__INITIALISED: return "EV_TASK_INITIALISED";
case EV__TASK__FINISH: return "EV_TASK_FINISH";
case EV__TASK__ERROR: return "EV_TASK_ERROR";
default: return "<unknown>";
}
}

ET__TASK__ControlOutcomingMessage::enum_type ET__TASK__ControlOutcomingMessage::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "EV_TASK_INITIALISED")) return EV__TASK__INITIALISED;
else if (!strcmp(str_par, "EV_TASK_FINISH")) return EV__TASK__FINISH;
else if (!strcmp(str_par, "EV_TASK_ERROR")) return EV__TASK__ERROR;
else return UNKNOWN_VALUE;
}

boolean ET__TASK__ControlOutcomingMessage::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
return TRUE;
default:
return FALSE;
}
}

int ET__TASK__ControlOutcomingMessage::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int ET__TASK__ControlOutcomingMessage::enum2int(const ET__TASK__ControlOutcomingMessage& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void ET__TASK__ControlOutcomingMessage::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.", int_val);
enum_value = (enum_type)int_val;
}

ET__TASK__ControlOutcomingMessage::operator ET__TASK__ControlOutcomingMessage::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
return enum_value;
}

void ET__TASK__ControlOutcomingMessage::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void ET__TASK__ControlOutcomingMessage::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@TASK.ET_TASK_ControlOutcomingMessage");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @TASK.ET_TASK_ControlOutcomingMessage.");
  }
}

void ET__TASK__ControlOutcomingMessage::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
text_buf.push_int(enum_value);
}

void ET__TASK__ControlOutcomingMessage::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @TASK.ET_TASK_ControlOutcomingMessage.", enum_value);
}

void ET__TASK__ControlOutcomingMessage_template::copy_template(const ET__TASK__ControlOutcomingMessage_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ET__TASK__ControlOutcomingMessage_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
}
}

ET__TASK__ControlOutcomingMessage_template::ET__TASK__ControlOutcomingMessage_template()
{
}

ET__TASK__ControlOutcomingMessage_template::ET__TASK__ControlOutcomingMessage_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ET__TASK__ControlOutcomingMessage_template::ET__TASK__ControlOutcomingMessage_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!ET__TASK__ControlOutcomingMessage::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage with unknown numeric value %d.", other_value);
single_value = (ET__TASK__ControlOutcomingMessage::enum_type)other_value;
}

ET__TASK__ControlOutcomingMessage_template::ET__TASK__ControlOutcomingMessage_template(ET__TASK__ControlOutcomingMessage::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

ET__TASK__ControlOutcomingMessage_template::ET__TASK__ControlOutcomingMessage_template(const ET__TASK__ControlOutcomingMessage& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == ET__TASK__ControlOutcomingMessage::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
single_value = other_value.enum_value;
}

ET__TASK__ControlOutcomingMessage_template::ET__TASK__ControlOutcomingMessage_template(const OPTIONAL<ET__TASK__ControlOutcomingMessage>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (ET__TASK__ControlOutcomingMessage::enum_type)(const ET__TASK__ControlOutcomingMessage&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage from an unbound optional field.");
}
}

ET__TASK__ControlOutcomingMessage_template::ET__TASK__ControlOutcomingMessage_template(const ET__TASK__ControlOutcomingMessage_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

ET__TASK__ControlOutcomingMessage_template::~ET__TASK__ControlOutcomingMessage_template()
{
clean_up();
}

boolean ET__TASK__ControlOutcomingMessage_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean ET__TASK__ControlOutcomingMessage_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != ET__TASK__ControlOutcomingMessage::UNBOUND_VALUE;
}

void ET__TASK__ControlOutcomingMessage_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

ET__TASK__ControlOutcomingMessage_template& ET__TASK__ControlOutcomingMessage_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ET__TASK__ControlOutcomingMessage_template& ET__TASK__ControlOutcomingMessage_template::operator=(int other_value)
{
if (!ET__TASK__ControlOutcomingMessage::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (ET__TASK__ControlOutcomingMessage::enum_type)other_value;
return *this;
}

ET__TASK__ControlOutcomingMessage_template& ET__TASK__ControlOutcomingMessage_template::operator=(ET__TASK__ControlOutcomingMessage::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

ET__TASK__ControlOutcomingMessage_template& ET__TASK__ControlOutcomingMessage_template::operator=(const ET__TASK__ControlOutcomingMessage& other_value)
{
if (other_value.enum_value == ET__TASK__ControlOutcomingMessage::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @TASK.ET_TASK_ControlOutcomingMessage to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

ET__TASK__ControlOutcomingMessage_template& ET__TASK__ControlOutcomingMessage_template::operator=(const OPTIONAL<ET__TASK__ControlOutcomingMessage>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (ET__TASK__ControlOutcomingMessage::enum_type)(const ET__TASK__ControlOutcomingMessage&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
}
return *this;
}

ET__TASK__ControlOutcomingMessage_template& ET__TASK__ControlOutcomingMessage_template::operator=(const ET__TASK__ControlOutcomingMessage_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ET__TASK__ControlOutcomingMessage_template::match(ET__TASK__ControlOutcomingMessage::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
}
return FALSE;
}

boolean ET__TASK__ControlOutcomingMessage_template::match(const ET__TASK__ControlOutcomingMessage& other_value, boolean) const
{
if (other_value.enum_value == ET__TASK__ControlOutcomingMessage::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage with an unbound value.");
return match(other_value.enum_value);
}

ET__TASK__ControlOutcomingMessage::enum_type ET__TASK__ControlOutcomingMessage_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
return single_value;
}

void ET__TASK__ControlOutcomingMessage_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ET__TASK__ControlOutcomingMessage_template[list_length];
}

ET__TASK__ControlOutcomingMessage_template& ET__TASK__ControlOutcomingMessage_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
return value_list.list_value[list_index];
}

void ET__TASK__ControlOutcomingMessage_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(ET__TASK__ControlOutcomingMessage::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ET__TASK__ControlOutcomingMessage_template::log_match(const ET__TASK__ControlOutcomingMessage& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void ET__TASK__ControlOutcomingMessage_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
}
}

void ET__TASK__ControlOutcomingMessage_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (ET__TASK__ControlOutcomingMessage::enum_type)text_buf.pull_int().get_val();
if (!ET__TASK__ControlOutcomingMessage::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ET__TASK__ControlOutcomingMessage_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @TASK.ET_TASK_ControlOutcomingMessage.");
}
}

boolean ET__TASK__ControlOutcomingMessage_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ET__TASK__ControlOutcomingMessage_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void ET__TASK__ControlOutcomingMessage_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ET__TASK__ControlOutcomingMessage_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Enumerated: {
    ET__TASK__ControlOutcomingMessage::enum_type enum_val = ET__TASK__ControlOutcomingMessage::str_to_enum(m_p->get_enumerated());
    if (!ET__TASK__ControlOutcomingMessage::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @TASK.ET_TASK_ControlOutcomingMessage.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@TASK.ET_TASK_ControlOutcomingMessage");
  }
  is_ifpresent = param.get_ifpresent();
}

void ET__TASK__ControlOutcomingMessage_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TASK.ET_TASK_ControlOutcomingMessage");
}

ET__TASK__ControlIncomingMessage::ET__TASK__ControlIncomingMessage()
{
enum_value = UNBOUND_VALUE;
}

ET__TASK__ControlIncomingMessage::ET__TASK__ControlIncomingMessage(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @TASK.ET_TASK_ControlIncomingMessage with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

ET__TASK__ControlIncomingMessage::ET__TASK__ControlIncomingMessage(enum_type other_value)
{
enum_value = other_value;
}

ET__TASK__ControlIncomingMessage::ET__TASK__ControlIncomingMessage(const ET__TASK__ControlIncomingMessage& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
enum_value = other_value.enum_value;
}

ET__TASK__ControlIncomingMessage& ET__TASK__ControlIncomingMessage::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @TASK.ET_TASK_ControlIncomingMessage.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

ET__TASK__ControlIncomingMessage& ET__TASK__ControlIncomingMessage::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

ET__TASK__ControlIncomingMessage& ET__TASK__ControlIncomingMessage::operator=(const ET__TASK__ControlIncomingMessage& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
enum_value = other_value.enum_value;
return *this;
}

boolean ET__TASK__ControlIncomingMessage::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
return enum_value == other_value;
}

boolean ET__TASK__ControlIncomingMessage::operator==(const ET__TASK__ControlIncomingMessage& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
return enum_value == other_value.enum_value;
}

boolean ET__TASK__ControlIncomingMessage::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
return enum_value < other_value;
}

boolean ET__TASK__ControlIncomingMessage::operator<(const ET__TASK__ControlIncomingMessage& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
return enum_value < other_value.enum_value;
}

boolean ET__TASK__ControlIncomingMessage::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
return enum_value > other_value;
}

boolean ET__TASK__ControlIncomingMessage::operator>(const ET__TASK__ControlIncomingMessage& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
return enum_value > other_value.enum_value;
}

const char *ET__TASK__ControlIncomingMessage::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case EV__TASK__INIT: return "EV_TASK_INIT";
case EV__TASK__START: return "EV_TASK_START";
case EV__TASK__STOP: return "EV_TASK_STOP";
default: return "<unknown>";
}
}

ET__TASK__ControlIncomingMessage::enum_type ET__TASK__ControlIncomingMessage::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "EV_TASK_INIT")) return EV__TASK__INIT;
else if (!strcmp(str_par, "EV_TASK_START")) return EV__TASK__START;
else if (!strcmp(str_par, "EV_TASK_STOP")) return EV__TASK__STOP;
else return UNKNOWN_VALUE;
}

boolean ET__TASK__ControlIncomingMessage::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
return TRUE;
default:
return FALSE;
}
}

int ET__TASK__ControlIncomingMessage::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int ET__TASK__ControlIncomingMessage::enum2int(const ET__TASK__ControlIncomingMessage& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void ET__TASK__ControlIncomingMessage::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @TASK.ET_TASK_ControlIncomingMessage.", int_val);
enum_value = (enum_type)int_val;
}

ET__TASK__ControlIncomingMessage::operator ET__TASK__ControlIncomingMessage::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
return enum_value;
}

void ET__TASK__ControlIncomingMessage::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void ET__TASK__ControlIncomingMessage::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@TASK.ET_TASK_ControlIncomingMessage");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @TASK.ET_TASK_ControlIncomingMessage.");
  }
}

void ET__TASK__ControlIncomingMessage::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
text_buf.push_int(enum_value);
}

void ET__TASK__ControlIncomingMessage::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @TASK.ET_TASK_ControlIncomingMessage.", enum_value);
}

void ET__TASK__ControlIncomingMessage_template::copy_template(const ET__TASK__ControlIncomingMessage_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ET__TASK__ControlIncomingMessage_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
}
}

ET__TASK__ControlIncomingMessage_template::ET__TASK__ControlIncomingMessage_template()
{
}

ET__TASK__ControlIncomingMessage_template::ET__TASK__ControlIncomingMessage_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ET__TASK__ControlIncomingMessage_template::ET__TASK__ControlIncomingMessage_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!ET__TASK__ControlIncomingMessage::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @TASK.ET_TASK_ControlIncomingMessage with unknown numeric value %d.", other_value);
single_value = (ET__TASK__ControlIncomingMessage::enum_type)other_value;
}

ET__TASK__ControlIncomingMessage_template::ET__TASK__ControlIncomingMessage_template(ET__TASK__ControlIncomingMessage::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

ET__TASK__ControlIncomingMessage_template::ET__TASK__ControlIncomingMessage_template(const ET__TASK__ControlIncomingMessage& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == ET__TASK__ControlIncomingMessage::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
single_value = other_value.enum_value;
}

ET__TASK__ControlIncomingMessage_template::ET__TASK__ControlIncomingMessage_template(const OPTIONAL<ET__TASK__ControlIncomingMessage>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (ET__TASK__ControlIncomingMessage::enum_type)(const ET__TASK__ControlIncomingMessage&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @TASK.ET_TASK_ControlIncomingMessage from an unbound optional field.");
}
}

ET__TASK__ControlIncomingMessage_template::ET__TASK__ControlIncomingMessage_template(const ET__TASK__ControlIncomingMessage_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

ET__TASK__ControlIncomingMessage_template::~ET__TASK__ControlIncomingMessage_template()
{
clean_up();
}

boolean ET__TASK__ControlIncomingMessage_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean ET__TASK__ControlIncomingMessage_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != ET__TASK__ControlIncomingMessage::UNBOUND_VALUE;
}

void ET__TASK__ControlIncomingMessage_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

ET__TASK__ControlIncomingMessage_template& ET__TASK__ControlIncomingMessage_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ET__TASK__ControlIncomingMessage_template& ET__TASK__ControlIncomingMessage_template::operator=(int other_value)
{
if (!ET__TASK__ControlIncomingMessage::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (ET__TASK__ControlIncomingMessage::enum_type)other_value;
return *this;
}

ET__TASK__ControlIncomingMessage_template& ET__TASK__ControlIncomingMessage_template::operator=(ET__TASK__ControlIncomingMessage::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

ET__TASK__ControlIncomingMessage_template& ET__TASK__ControlIncomingMessage_template::operator=(const ET__TASK__ControlIncomingMessage& other_value)
{
if (other_value.enum_value == ET__TASK__ControlIncomingMessage::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @TASK.ET_TASK_ControlIncomingMessage to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

ET__TASK__ControlIncomingMessage_template& ET__TASK__ControlIncomingMessage_template::operator=(const OPTIONAL<ET__TASK__ControlIncomingMessage>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (ET__TASK__ControlIncomingMessage::enum_type)(const ET__TASK__ControlIncomingMessage&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
}
return *this;
}

ET__TASK__ControlIncomingMessage_template& ET__TASK__ControlIncomingMessage_template::operator=(const ET__TASK__ControlIncomingMessage_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ET__TASK__ControlIncomingMessage_template::match(ET__TASK__ControlIncomingMessage::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
}
return FALSE;
}

boolean ET__TASK__ControlIncomingMessage_template::match(const ET__TASK__ControlIncomingMessage& other_value, boolean) const
{
if (other_value.enum_value == ET__TASK__ControlIncomingMessage::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @TASK.ET_TASK_ControlIncomingMessage with an unbound value.");
return match(other_value.enum_value);
}

ET__TASK__ControlIncomingMessage::enum_type ET__TASK__ControlIncomingMessage_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
return single_value;
}

void ET__TASK__ControlIncomingMessage_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ET__TASK__ControlIncomingMessage_template[list_length];
}

ET__TASK__ControlIncomingMessage_template& ET__TASK__ControlIncomingMessage_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
return value_list.list_value[list_index];
}

void ET__TASK__ControlIncomingMessage_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(ET__TASK__ControlIncomingMessage::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ET__TASK__ControlIncomingMessage_template::log_match(const ET__TASK__ControlIncomingMessage& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void ET__TASK__ControlIncomingMessage_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
}
}

void ET__TASK__ControlIncomingMessage_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (ET__TASK__ControlIncomingMessage::enum_type)text_buf.pull_int().get_val();
if (!ET__TASK__ControlIncomingMessage::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ET__TASK__ControlIncomingMessage_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @TASK.ET_TASK_ControlIncomingMessage.");
}
}

boolean ET__TASK__ControlIncomingMessage_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ET__TASK__ControlIncomingMessage_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void ET__TASK__ControlIncomingMessage_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ET__TASK__ControlIncomingMessage_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Enumerated: {
    ET__TASK__ControlIncomingMessage::enum_type enum_val = ET__TASK__ControlIncomingMessage::str_to_enum(m_p->get_enumerated());
    if (!ET__TASK__ControlIncomingMessage::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @TASK.ET_TASK_ControlIncomingMessage.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@TASK.ET_TASK_ControlIncomingMessage");
  }
  is_ifpresent = param.get_ifpresent();
}

void ET__TASK__ControlIncomingMessage_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TASK.ET_TASK_ControlIncomingMessage");
}

void PT__TASK__TaskPort::remove_msg_queue_head()
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
switch (my_head->item_selection) {
case MESSAGE_0:
delete (my_head)->message_0;
break;
default:
TTCN_error("Internal error: Invalid message selector in the queue of port %s.", port_name);
}
msg_queue_item_base *next_item = msg_queue_head->next_item;
delete (msg_queue_item*)msg_queue_head;
msg_queue_head = next_item;
if (next_item == NULL) msg_queue_tail = NULL;
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::extract__msg, port_name, 0, ++msg_head_count, CHARSTRING(0,NULL), CHARSTRING(0,NULL));}

void PT__TASK__TaskPort::clear_queue()
{
while (msg_queue_head != NULL) remove_msg_queue_head();
}

PT__TASK__TaskPort::PT__TASK__TaskPort(const char *par_port_name)
 : PORT(par_port_name)
{
msg_queue_head = NULL;
msg_queue_tail = NULL;
}

PT__TASK__TaskPort::~PT__TASK__TaskPort()
{
clear_queue();
}

void PT__TASK__TaskPort::send(const ET__TASK__ControlOutcomingMessage& send_par, const COMPONENT& destination_component)
{
if (!is_started) TTCN_error("Sending a message on port %s, which is not started.", port_name);
if (!destination_component.is_bound()) TTCN_error("Unbound component reference in the to clause of send operation.");
const TTCN_Logger::Severity log_sev = destination_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMSEND:TTCN_Logger::PORTEVENT_MCSEND;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_send(port_name, destination_component,
(TTCN_Logger::begin_event(log_sev, TRUE), TTCN_Logger::log_event_str(" @TASK.ET_TASK_ControlOutcomingMessage : "),
send_par.log(), TTCN_Logger::end_event_log2str()));
}
if (destination_component == SYSTEM_COMPREF) TTCN_error("Message cannot be sent to system on internal port %s.", port_name);
else {
Text_Buf text_buf;
prepare_message(text_buf, "@TASK.ET_TASK_ControlOutcomingMessage");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

void PT__TASK__TaskPort::send(const ET__TASK__ControlOutcomingMessage& send_par)
{
send(send_par, COMPONENT(get_default_destination()));
}

void PT__TASK__TaskPort::send(const ET__TASK__ControlOutcomingMessage_template& send_par, const COMPONENT& destination_component)
{
const ET__TASK__ControlOutcomingMessage& send_par_value = ET__TASK__ControlOutcomingMessage(send_par.valueof());
send(send_par_value, destination_component);
}

void PT__TASK__TaskPort::send(const ET__TASK__ControlOutcomingMessage_template& send_par)
{
const ET__TASK__ControlOutcomingMessage& send_par_value = ET__TASK__ControlOutcomingMessage(send_par.valueof());
send(send_par_value, COMPONENT(get_default_destination()));
}

alt_status PT__TASK__TaskPort::receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlIncomingMessage: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status PT__TASK__TaskPort::check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlIncomingMessage: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
return ALT_YES;
}
}

alt_status PT__TASK__TaskPort::trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlIncomingMessage: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status PT__TASK__TaskPort::receive(const ET__TASK__ControlIncomingMessage_template& value_template, ET__TASK__ControlIncomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @TASK.ET_TASK_ControlIncomingMessage.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlIncomingMessage : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status PT__TASK__TaskPort::check_receive(const ET__TASK__ControlIncomingMessage_template& value_template, ET__TASK__ControlIncomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Check-receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @TASK.ET_TASK_ControlIncomingMessage.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlIncomingMessage : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
return ALT_YES;
}
}

alt_status PT__TASK__TaskPort::trigger(const ET__TASK__ControlIncomingMessage_template& value_template, ET__TASK__ControlIncomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Trigger operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s will drop a message: Type of the first message in the queue is not @TASK.ET_TASK_ControlIncomingMessage.", port_name);
remove_msg_queue_head();
return ALT_REPEAT;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlIncomingMessage : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

void PT__TASK__TaskPort::incoming_message(const ET__TASK__ControlIncomingMessage& incoming_par, component sender_component)
{
if (!is_started) TTCN_error("Port %s is not started but a message has arrived on it.", port_name);
msg_tail_count++;
if (TTCN_Logger::log_this_event(TTCN_Logger::PORTEVENT_MQUEUE)) {
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::enqueue__msg, port_name, sender_component, msg_tail_count,
CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(TTCN_Logger::PORTEVENT_MQUEUE, TRUE), TTCN_Logger::log_event_str(" @TASK.ET_TASK_ControlIncomingMessage : "), incoming_par.log(), TTCN_Logger::end_event_log2str()));
}
msg_queue_item *new_item = new msg_queue_item;
new_item->item_selection = MESSAGE_0;
new_item->message_0 = new ET__TASK__ControlIncomingMessage(incoming_par);
new_item->sender_component = sender_component;
append_to_msg_queue(new_item);
}

boolean PT__TASK__TaskPort::process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING&)
{
if (!strcmp(message_type, "@TASK.ET_TASK_ControlIncomingMessage")) {
ET__TASK__ControlIncomingMessage incoming_par;
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return TRUE;
} else return FALSE;
}

void PT__TASK__TaskExecutorPort::remove_msg_queue_head()
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
switch (my_head->item_selection) {
case MESSAGE_0:
delete (my_head)->message_0;
break;
default:
TTCN_error("Internal error: Invalid message selector in the queue of port %s.", port_name);
}
msg_queue_item_base *next_item = msg_queue_head->next_item;
delete (msg_queue_item*)msg_queue_head;
msg_queue_head = next_item;
if (next_item == NULL) msg_queue_tail = NULL;
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::extract__msg, port_name, 0, ++msg_head_count, CHARSTRING(0,NULL), CHARSTRING(0,NULL));}

void PT__TASK__TaskExecutorPort::clear_queue()
{
while (msg_queue_head != NULL) remove_msg_queue_head();
}

PT__TASK__TaskExecutorPort::PT__TASK__TaskExecutorPort(const char *par_port_name)
 : PORT(par_port_name)
{
msg_queue_head = NULL;
msg_queue_tail = NULL;
}

PT__TASK__TaskExecutorPort::~PT__TASK__TaskExecutorPort()
{
clear_queue();
}

void PT__TASK__TaskExecutorPort::send(const ET__TASK__ControlIncomingMessage& send_par, const COMPONENT& destination_component)
{
if (!is_started) TTCN_error("Sending a message on port %s, which is not started.", port_name);
if (!destination_component.is_bound()) TTCN_error("Unbound component reference in the to clause of send operation.");
const TTCN_Logger::Severity log_sev = destination_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMSEND:TTCN_Logger::PORTEVENT_MCSEND;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_send(port_name, destination_component,
(TTCN_Logger::begin_event(log_sev, TRUE), TTCN_Logger::log_event_str(" @TASK.ET_TASK_ControlIncomingMessage : "),
send_par.log(), TTCN_Logger::end_event_log2str()));
}
if (destination_component == SYSTEM_COMPREF) TTCN_error("Message cannot be sent to system on internal port %s.", port_name);
else {
Text_Buf text_buf;
prepare_message(text_buf, "@TASK.ET_TASK_ControlIncomingMessage");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

void PT__TASK__TaskExecutorPort::send(const ET__TASK__ControlIncomingMessage& send_par)
{
send(send_par, COMPONENT(get_default_destination()));
}

void PT__TASK__TaskExecutorPort::send(const ET__TASK__ControlIncomingMessage_template& send_par, const COMPONENT& destination_component)
{
const ET__TASK__ControlIncomingMessage& send_par_value = ET__TASK__ControlIncomingMessage(send_par.valueof());
send(send_par_value, destination_component);
}

void PT__TASK__TaskExecutorPort::send(const ET__TASK__ControlIncomingMessage_template& send_par)
{
const ET__TASK__ControlIncomingMessage& send_par_value = ET__TASK__ControlIncomingMessage(send_par.valueof());
send(send_par_value, COMPONENT(get_default_destination()));
}

alt_status PT__TASK__TaskExecutorPort::receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlOutcomingMessage: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status PT__TASK__TaskExecutorPort::check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlOutcomingMessage: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
return ALT_YES;
}
}

alt_status PT__TASK__TaskExecutorPort::trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlOutcomingMessage: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status PT__TASK__TaskExecutorPort::receive(const ET__TASK__ControlOutcomingMessage_template& value_template, ET__TASK__ControlOutcomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @TASK.ET_TASK_ControlOutcomingMessage.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlOutcomingMessage : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status PT__TASK__TaskExecutorPort::check_receive(const ET__TASK__ControlOutcomingMessage_template& value_template, ET__TASK__ControlOutcomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Check-receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @TASK.ET_TASK_ControlOutcomingMessage.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlOutcomingMessage : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
return ALT_YES;
}
}

alt_status PT__TASK__TaskExecutorPort::trigger(const ET__TASK__ControlOutcomingMessage_template& value_template, ET__TASK__ControlOutcomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Trigger operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s will drop a message: Type of the first message in the queue is not @TASK.ET_TASK_ControlOutcomingMessage.", port_name);
remove_msg_queue_head();
return ALT_REPEAT;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @TASK.ET_TASK_ControlOutcomingMessage : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

void PT__TASK__TaskExecutorPort::incoming_message(const ET__TASK__ControlOutcomingMessage& incoming_par, component sender_component)
{
if (!is_started) TTCN_error("Port %s is not started but a message has arrived on it.", port_name);
msg_tail_count++;
if (TTCN_Logger::log_this_event(TTCN_Logger::PORTEVENT_MQUEUE)) {
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::enqueue__msg, port_name, sender_component, msg_tail_count,
CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(TTCN_Logger::PORTEVENT_MQUEUE, TRUE), TTCN_Logger::log_event_str(" @TASK.ET_TASK_ControlOutcomingMessage : "), incoming_par.log(), TTCN_Logger::end_event_log2str()));
}
msg_queue_item *new_item = new msg_queue_item;
new_item->item_selection = MESSAGE_0;
new_item->message_0 = new ET__TASK__ControlOutcomingMessage(incoming_par);
new_item->sender_component = sender_component;
append_to_msg_queue(new_item);
}

boolean PT__TASK__TaskExecutorPort::process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING&)
{
if (!strcmp(message_type, "@TASK.ET_TASK_ControlOutcomingMessage")) {
ET__TASK__ControlOutcomingMessage incoming_par;
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return TRUE;
} else return FALSE;
}


/* Bodies of functions, altsteps and testcases */

void f__TASK__Task()
{
TTCN_Location current_location("TASK.ttcn", 33, TTCN_Location::LOCATION_FUNCTION, "f_TASK_Task");
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("TASK.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "TASK");
module_object.add_function("f_TASK_Task", (genericfunc_t)&f__TASK__Task, NULL);
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "CT_TASK_Task")) {
CT__TASK__Task_component_p__taskPort.activate_port();
return TRUE;
} else return FALSE;
}


} /* end of namespace */
