// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LANGUAGE_DYNAMIC.hh"

namespace LANGUAGE__DYNAMIC {

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x86, 0xf9, 0xa0, 0xe4, 0x2f, 0xfc, 0xef, 0x3c, 0x40, 0xe1, 0xb4, 0x69, 0xbc, 0x2f, 0x1b, 0x6c };

/* Global variable definitions */

// No XER for LANGUAGE__DYNAMIC__Action
const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__Action_descr_ = { "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       LANGUAGE__DYNAMIC__InterfaceAction_InterfaceName_xer_ = { {"InterfaceName>\n", "InterfaceName>\n"}, {15, 15}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_InterfaceName_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_InterfaceName_descr_ = { "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.InterfaceName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &LANGUAGE__DYNAMIC__InterfaceAction_InterfaceName_xer_, &LANGUAGE__DYNAMIC__InterfaceAction_InterfaceName_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       LANGUAGE__DYNAMIC__InterfaceAction_Command_xer_ = { {"Command>\n", "Command>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Command_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Command_descr_ = { "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.Command", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &LANGUAGE__DYNAMIC__InterfaceAction_Command_xer_, &LANGUAGE__DYNAMIC__InterfaceAction_Command_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for LANGUAGE__DYNAMIC__InterfaceAction_Parameters
const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Parameters_descr_ = { "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.Parameters", NULL, NULL, NULL, NULL, NULL, NULL, &CHARSTRING_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       LANGUAGE__DYNAMIC__InterfaceAction_Parameters_0_xer_ = { {"CHARSTRING>\n", "CHARSTRING>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Parameters_0_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Parameters_0_descr_ = { "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.Parameters.<oftype>", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &LANGUAGE__DYNAMIC__InterfaceAction_Parameters_0_xer_, &LANGUAGE__DYNAMIC__InterfaceAction_Parameters_0_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for LANGUAGE__DYNAMIC__InterfaceAction
const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_descr_ = { "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       LANGUAGE__DYNAMIC__InterfaceAction_Delay_xer_ = { {"Delay>\n", "Delay>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED |XER_OPTIONAL, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Delay_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_OERdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Delay_oer_ = { -1, FALSE, -1, FALSE };
const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Delay_descr_ = { "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.Delay", &FLOAT_ber_, &FLOAT_raw_, NULL, &LANGUAGE__DYNAMIC__InterfaceAction_Delay_xer_, &LANGUAGE__DYNAMIC__InterfaceAction_Delay_json_, &LANGUAGE__DYNAMIC__InterfaceAction_Delay_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       LANGUAGE__DYNAMIC__InterfaceAction_Timeout_xer_ = { {"Timeout>\n", "Timeout>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED |XER_OPTIONAL, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Timeout_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_OERdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Timeout_oer_ = { -1, FALSE, -1, FALSE };
const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Timeout_descr_ = { "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.Timeout", &FLOAT_ber_, &FLOAT_raw_, NULL, &LANGUAGE__DYNAMIC__InterfaceAction_Timeout_xer_, &LANGUAGE__DYNAMIC__InterfaceAction_Timeout_json_, &LANGUAGE__DYNAMIC__InterfaceAction_Timeout_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for LANGUAGE__DYNAMIC__ActionSequence
const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__ActionSequence_descr_ = { "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence", NULL, NULL, NULL, NULL, NULL, NULL, &LANGUAGE__DYNAMIC__Action_descr_, TTCN_Typedescriptor_t::DONTCARE };
TTCN_Module module_object("LANGUAGE_DYNAMIC", __DATE__, __TIME__, module_checksum, NULL, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

void LANGUAGE__DYNAMIC__Action::copy_value(const LANGUAGE__DYNAMIC__Action& other_value)
{
switch (other_value.union_selection) {
case ALT_InterfaceAction:
field_InterfaceAction = new LANGUAGE__DYNAMIC__InterfaceAction(*other_value.field_InterfaceAction);
break;
default:
TTCN_error("Assignment of an unbound union value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
union_selection = other_value.union_selection;
}

LANGUAGE__DYNAMIC__Action::LANGUAGE__DYNAMIC__Action()
{
union_selection = UNBOUND_VALUE;
}

LANGUAGE__DYNAMIC__Action::LANGUAGE__DYNAMIC__Action(const LANGUAGE__DYNAMIC__Action& other_value)
: Base_Type(){
copy_value(other_value);
}

LANGUAGE__DYNAMIC__Action::~LANGUAGE__DYNAMIC__Action()
{
clean_up();
}

LANGUAGE__DYNAMIC__Action& LANGUAGE__DYNAMIC__Action::operator=(const LANGUAGE__DYNAMIC__Action& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean LANGUAGE__DYNAMIC__Action::operator==(const LANGUAGE__DYNAMIC__Action& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_InterfaceAction:
return *field_InterfaceAction == *other_value.field_InterfaceAction;
default:
return FALSE;
}
}

LANGUAGE__DYNAMIC__InterfaceAction& LANGUAGE__DYNAMIC__Action::InterfaceAction()
{
if (union_selection != ALT_InterfaceAction) {
clean_up();
field_InterfaceAction = new LANGUAGE__DYNAMIC__InterfaceAction;
union_selection = ALT_InterfaceAction;
}
return *field_InterfaceAction;
}

const LANGUAGE__DYNAMIC__InterfaceAction& LANGUAGE__DYNAMIC__Action::InterfaceAction() const
{
if (union_selection != ALT_InterfaceAction) TTCN_error("Using non-selected field InterfaceAction in a value of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
return *field_InterfaceAction;
}

boolean LANGUAGE__DYNAMIC__Action::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
return union_selection == checked_selection;
}

boolean LANGUAGE__DYNAMIC__Action::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean LANGUAGE__DYNAMIC__Action::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_InterfaceAction: return field_InterfaceAction->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void LANGUAGE__DYNAMIC__Action::clean_up()
{
switch (union_selection) {
case ALT_InterfaceAction:
  delete field_InterfaceAction;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void LANGUAGE__DYNAMIC__Action::log() const
{
switch (union_selection) {
case ALT_InterfaceAction:
TTCN_Logger::log_event_str("{ InterfaceAction := ");
field_InterfaceAction->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void LANGUAGE__DYNAMIC__Action::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr m_p = &param;
  if (m_p->get_type()==Module_Param::MP_Value_List && m_p->get_size()==0) return;
  if (m_p->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "InterfaceAction")) {
    InterfaceAction().set_param(*mp_last);
    if (!InterfaceAction().is_bound()) clean_up();
    return;
  }
  mp_last->error("Field %s does not exist in type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.", mp_last->get_id()->get_name());
}

void LANGUAGE__DYNAMIC__Action::set_implicit_omit()
{
switch (union_selection) {
case ALT_InterfaceAction:
field_InterfaceAction->set_implicit_omit(); break;
default: break;
}
}

void LANGUAGE__DYNAMIC__Action::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_InterfaceAction:
field_InterfaceAction->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
}

void LANGUAGE__DYNAMIC__Action::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_InterfaceAction:
InterfaceAction().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
}

void LANGUAGE__DYNAMIC__Action_template::copy_value(const LANGUAGE__DYNAMIC__Action& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
single_value.field_InterfaceAction = new LANGUAGE__DYNAMIC__InterfaceAction_template(other_value.InterfaceAction());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
set_selection(SPECIFIC_VALUE);
}

void LANGUAGE__DYNAMIC__Action_template::copy_template(const LANGUAGE__DYNAMIC__Action_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
single_value.field_InterfaceAction = new LANGUAGE__DYNAMIC__InterfaceAction_template(*other_value.single_value.field_InterfaceAction);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new LANGUAGE__DYNAMIC__Action_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
set_selection(other_value);
}

LANGUAGE__DYNAMIC__Action_template::LANGUAGE__DYNAMIC__Action_template()
{
}

LANGUAGE__DYNAMIC__Action_template::LANGUAGE__DYNAMIC__Action_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

LANGUAGE__DYNAMIC__Action_template::LANGUAGE__DYNAMIC__Action_template(const LANGUAGE__DYNAMIC__Action& other_value)
{
copy_value(other_value);
}

LANGUAGE__DYNAMIC__Action_template::LANGUAGE__DYNAMIC__Action_template(const OPTIONAL<LANGUAGE__DYNAMIC__Action>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__DYNAMIC__Action&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action from an unbound optional field.");
}
}

LANGUAGE__DYNAMIC__Action_template::LANGUAGE__DYNAMIC__Action_template(const LANGUAGE__DYNAMIC__Action_template& other_value)
: Base_Template(){
copy_template(other_value);
}

LANGUAGE__DYNAMIC__Action_template::~LANGUAGE__DYNAMIC__Action_template()
{
clean_up();
}

void LANGUAGE__DYNAMIC__Action_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
delete single_value.field_InterfaceAction;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__Action_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__Action_template::operator=(const LANGUAGE__DYNAMIC__Action& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__Action_template::operator=(const OPTIONAL<LANGUAGE__DYNAMIC__Action>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__DYNAMIC__Action&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
return *this;
}

LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__Action_template::operator=(const LANGUAGE__DYNAMIC__Action_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean LANGUAGE__DYNAMIC__Action_template::match(const LANGUAGE__DYNAMIC__Action& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
LANGUAGE__DYNAMIC__Action::union_selection_type value_selection = other_value.get_selection();
if (value_selection == LANGUAGE__DYNAMIC__Action::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
return single_value.field_InterfaceAction->match(other_value.InterfaceAction(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
return FALSE;
}

boolean LANGUAGE__DYNAMIC__Action_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
switch (single_value.union_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
return single_value.field_InterfaceAction->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
}

LANGUAGE__DYNAMIC__Action LANGUAGE__DYNAMIC__Action_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
LANGUAGE__DYNAMIC__Action ret_val;
switch (single_value.union_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
ret_val.InterfaceAction() = single_value.field_InterfaceAction->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
return ret_val;
}

LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__Action_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
return value_list.list_value[list_index];
}
void LANGUAGE__DYNAMIC__Action_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new LANGUAGE__DYNAMIC__Action_template[list_length];
}

LANGUAGE__DYNAMIC__InterfaceAction_template& LANGUAGE__DYNAMIC__Action_template::InterfaceAction()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_InterfaceAction = new LANGUAGE__DYNAMIC__InterfaceAction_template(ANY_VALUE);
else single_value.field_InterfaceAction = new LANGUAGE__DYNAMIC__InterfaceAction_template;
single_value.union_selection = LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_InterfaceAction;
}

const LANGUAGE__DYNAMIC__InterfaceAction_template& LANGUAGE__DYNAMIC__Action_template::InterfaceAction() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field InterfaceAction in a non-specific template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
if (single_value.union_selection != LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction) TTCN_error("Accessing non-selected field InterfaceAction in a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
return *single_value.field_InterfaceAction;
}

boolean LANGUAGE__DYNAMIC__Action_template::ischosen(LANGUAGE__DYNAMIC__Action::union_selection_type checked_selection) const
{
if (checked_selection == LANGUAGE__DYNAMIC__Action::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == LANGUAGE__DYNAMIC__Action::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
for (unsigned int list_count = 1; ret_val == TRUE && list_count < value_list.n_values; list_count++) {
ret_val = value_list.list_value[list_count].ischosen(checked_selection);
}
return ret_val;
}
default:
return FALSE;
}
return FALSE;
}

void LANGUAGE__DYNAMIC__Action_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
TTCN_Logger::log_event_str("{ InterfaceAction := ");
single_value.field_InterfaceAction->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void LANGUAGE__DYNAMIC__Action_template::log_match(const LANGUAGE__DYNAMIC__Action& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".InterfaceAction");
single_value.field_InterfaceAction->log_match(match_value.InterfaceAction(), legacy);
} else {
TTCN_Logger::log_event_str("{ InterfaceAction := ");
single_value.field_InterfaceAction->log_match(match_value.InterfaceAction(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void LANGUAGE__DYNAMIC__Action_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
single_value.field_InterfaceAction->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
}

void LANGUAGE__DYNAMIC__Action_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = LANGUAGE__DYNAMIC__Action::UNBOUND_VALUE;
LANGUAGE__DYNAMIC__Action::union_selection_type new_selection = (LANGUAGE__DYNAMIC__Action::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
single_value.field_InterfaceAction = new LANGUAGE__DYNAMIC__InterfaceAction_template;
single_value.field_InterfaceAction->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new LANGUAGE__DYNAMIC__Action_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
}

boolean LANGUAGE__DYNAMIC__Action_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean LANGUAGE__DYNAMIC__Action_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void LANGUAGE__DYNAMIC__Action_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action'");
    }
    if (strcmp("InterfaceAction", param_field) == 0) {
      InterfaceAction().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    LANGUAGE__DYNAMIC__Action_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (m_p->get_size()==0) break;
    param.type_error("union template", "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "InterfaceAction")) {
      InterfaceAction().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action");
  }
  is_ifpresent = param.get_ifpresent();
}

void LANGUAGE__DYNAMIC__Action_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case LANGUAGE__DYNAMIC__Action::ALT_InterfaceAction:
single_value.field_InterfaceAction->check_restriction(t_res, t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_Action");
}

LANGUAGE__DYNAMIC__InterfaceAction::LANGUAGE__DYNAMIC__InterfaceAction()
{
}

LANGUAGE__DYNAMIC__InterfaceAction::LANGUAGE__DYNAMIC__InterfaceAction(const CHARSTRING& par_InterfaceName,
    const CHARSTRING& par_Command,
    const LANGUAGE__DYNAMIC__InterfaceAction_Parameters& par_Parameters,
    const OPTIONAL<FLOAT>& par_Delay,
    const OPTIONAL<FLOAT>& par_Timeout)
  :   field_InterfaceName(par_InterfaceName),
  field_Command(par_Command),
  field_Parameters(par_Parameters),
  field_Delay(par_Delay),
  field_Timeout(par_Timeout)
{
}

LANGUAGE__DYNAMIC__InterfaceAction::LANGUAGE__DYNAMIC__InterfaceAction(const LANGUAGE__DYNAMIC__InterfaceAction& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
if (other_value.InterfaceName().is_bound()) field_InterfaceName = other_value.InterfaceName();
else field_InterfaceName.clean_up();
if (other_value.Command().is_bound()) field_Command = other_value.Command();
else field_Command.clean_up();
if (other_value.Parameters().is_bound()) field_Parameters = other_value.Parameters();
else field_Parameters.clean_up();
if (other_value.Delay().is_bound()) field_Delay = other_value.Delay();
else field_Delay.clean_up();
if (other_value.Timeout().is_bound()) field_Timeout = other_value.Timeout();
else field_Timeout.clean_up();
}

void LANGUAGE__DYNAMIC__InterfaceAction::clean_up()
{
field_InterfaceName.clean_up();
field_Command.clean_up();
field_Parameters.clean_up();
field_Delay.clean_up();
field_Timeout.clean_up();
}

LANGUAGE__DYNAMIC__InterfaceAction& LANGUAGE__DYNAMIC__InterfaceAction::operator=(const LANGUAGE__DYNAMIC__InterfaceAction& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
  if (other_value.InterfaceName().is_bound()) field_InterfaceName = other_value.InterfaceName();
  else field_InterfaceName.clean_up();
  if (other_value.Command().is_bound()) field_Command = other_value.Command();
  else field_Command.clean_up();
  if (other_value.Parameters().is_bound()) field_Parameters = other_value.Parameters();
  else field_Parameters.clean_up();
  if (other_value.Delay().is_bound()) field_Delay = other_value.Delay();
  else field_Delay.clean_up();
  if (other_value.Timeout().is_bound()) field_Timeout = other_value.Timeout();
  else field_Timeout.clean_up();
}
return *this;
}

boolean LANGUAGE__DYNAMIC__InterfaceAction::operator==(const LANGUAGE__DYNAMIC__InterfaceAction& other_value) const
{
return field_InterfaceName==other_value.field_InterfaceName
  && field_Command==other_value.field_Command
  && field_Parameters==other_value.field_Parameters
  && field_Delay==other_value.field_Delay
  && field_Timeout==other_value.field_Timeout;
}

boolean LANGUAGE__DYNAMIC__InterfaceAction::is_bound() const
{
if(field_InterfaceName.is_bound()) return TRUE;
if(field_Command.is_bound()) return TRUE;
if(field_Parameters.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_Delay.get_selection() || field_Delay.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_Timeout.get_selection() || field_Timeout.is_bound()) return TRUE;
return FALSE;
}
boolean LANGUAGE__DYNAMIC__InterfaceAction::is_value() const
{
if(!field_InterfaceName.is_value()) return FALSE;
if(!field_Command.is_value()) return FALSE;
if(!field_Parameters.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_Delay.get_selection() && !field_Delay.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_Timeout.get_selection() && !field_Timeout.is_value()) return FALSE;
return TRUE;
}
int LANGUAGE__DYNAMIC__InterfaceAction::size_of() const
{
  int ret_val = 3;
  if (field_Delay.ispresent()) ret_val++;
  if (field_Timeout.ispresent()) ret_val++;
  return ret_val;
}

void LANGUAGE__DYNAMIC__InterfaceAction::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ InterfaceName := ");
field_InterfaceName.log();
TTCN_Logger::log_event_str(", Command := ");
field_Command.log();
TTCN_Logger::log_event_str(", Parameters := ");
field_Parameters.log();
TTCN_Logger::log_event_str(", Delay := ");
field_Delay.log();
TTCN_Logger::log_event_str(", Timeout := ");
field_Timeout.log();
TTCN_Logger::log_event_str(" }");
}

void LANGUAGE__DYNAMIC__InterfaceAction::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (5<param.get_size()) {
      param.error("record value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction has 5 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) InterfaceName().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) Command().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) Parameters().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) Delay().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) Timeout().set_param(*param.get_elem(4));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "InterfaceName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          InterfaceName().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Command")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Command().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Parameters")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Parameters().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Delay")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Delay().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Timeout")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Timeout().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction");
  }
}

void LANGUAGE__DYNAMIC__InterfaceAction::set_implicit_omit()
{
if (InterfaceName().is_bound()) InterfaceName().set_implicit_omit();
if (Command().is_bound()) Command().set_implicit_omit();
if (Parameters().is_bound()) Parameters().set_implicit_omit();
if (!Delay().is_bound()) Delay() = OMIT_VALUE;
else Delay().set_implicit_omit();
if (!Timeout().is_bound()) Timeout() = OMIT_VALUE;
else Timeout().set_implicit_omit();
}

void LANGUAGE__DYNAMIC__InterfaceAction::encode_text(Text_Buf& text_buf) const
{
field_InterfaceName.encode_text(text_buf);
field_Command.encode_text(text_buf);
field_Parameters.encode_text(text_buf);
field_Delay.encode_text(text_buf);
field_Timeout.encode_text(text_buf);
}

void LANGUAGE__DYNAMIC__InterfaceAction::decode_text(Text_Buf& text_buf)
{
field_InterfaceName.decode_text(text_buf);
field_Command.decode_text(text_buf);
field_Parameters.decode_text(text_buf);
field_Delay.decode_text(text_buf);
field_Timeout.decode_text(text_buf);
}

struct LANGUAGE__DYNAMIC__InterfaceAction_template::single_value_struct {
CHARSTRING_template field_InterfaceName;
CHARSTRING_template field_Command;
LANGUAGE__DYNAMIC__InterfaceAction_Parameters_template field_Parameters;
FLOAT_template field_Delay;
FLOAT_template field_Timeout;
};

void LANGUAGE__DYNAMIC__InterfaceAction_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_InterfaceName = ANY_VALUE;
single_value->field_Command = ANY_VALUE;
single_value->field_Parameters = ANY_VALUE;
single_value->field_Delay = ANY_OR_OMIT;
single_value->field_Timeout = ANY_OR_OMIT;
}
}
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::copy_value(const LANGUAGE__DYNAMIC__InterfaceAction& other_value)
{
single_value = new single_value_struct;
if (other_value.InterfaceName().is_bound()) {
  single_value->field_InterfaceName = other_value.InterfaceName();
} else {
  single_value->field_InterfaceName.clean_up();
}
if (other_value.Command().is_bound()) {
  single_value->field_Command = other_value.Command();
} else {
  single_value->field_Command.clean_up();
}
if (other_value.Parameters().is_bound()) {
  single_value->field_Parameters = other_value.Parameters();
} else {
  single_value->field_Parameters.clean_up();
}
if (other_value.Delay().is_bound()) {
  if (other_value.Delay().ispresent()) single_value->field_Delay = other_value.Delay()();
  else single_value->field_Delay = OMIT_VALUE;
} else {
  single_value->field_Delay.clean_up();
}
if (other_value.Timeout().is_bound()) {
  if (other_value.Timeout().ispresent()) single_value->field_Timeout = other_value.Timeout()();
  else single_value->field_Timeout = OMIT_VALUE;
} else {
  single_value->field_Timeout.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::copy_template(const LANGUAGE__DYNAMIC__InterfaceAction_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.InterfaceName().get_selection()) {
single_value->field_InterfaceName = other_value.InterfaceName();
} else {
single_value->field_InterfaceName.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.Command().get_selection()) {
single_value->field_Command = other_value.Command();
} else {
single_value->field_Command.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.Parameters().get_selection()) {
single_value->field_Parameters = other_value.Parameters();
} else {
single_value->field_Parameters.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.Delay().get_selection()) {
single_value->field_Delay = other_value.Delay();
} else {
single_value->field_Delay.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.Timeout().get_selection()) {
single_value->field_Timeout = other_value.Timeout();
} else {
single_value->field_Timeout.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new LANGUAGE__DYNAMIC__InterfaceAction_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
break;
}
set_selection(other_value);
}

LANGUAGE__DYNAMIC__InterfaceAction_template::LANGUAGE__DYNAMIC__InterfaceAction_template()
{
}

LANGUAGE__DYNAMIC__InterfaceAction_template::LANGUAGE__DYNAMIC__InterfaceAction_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

LANGUAGE__DYNAMIC__InterfaceAction_template::LANGUAGE__DYNAMIC__InterfaceAction_template(const LANGUAGE__DYNAMIC__InterfaceAction& other_value)
{
copy_value(other_value);
}

LANGUAGE__DYNAMIC__InterfaceAction_template::LANGUAGE__DYNAMIC__InterfaceAction_template(const OPTIONAL<LANGUAGE__DYNAMIC__InterfaceAction>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__DYNAMIC__InterfaceAction&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction from an unbound optional field.");
}
}

LANGUAGE__DYNAMIC__InterfaceAction_template::LANGUAGE__DYNAMIC__InterfaceAction_template(const LANGUAGE__DYNAMIC__InterfaceAction_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

LANGUAGE__DYNAMIC__InterfaceAction_template::~LANGUAGE__DYNAMIC__InterfaceAction_template()
{
clean_up();
}

LANGUAGE__DYNAMIC__InterfaceAction_template& LANGUAGE__DYNAMIC__InterfaceAction_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

LANGUAGE__DYNAMIC__InterfaceAction_template& LANGUAGE__DYNAMIC__InterfaceAction_template::operator=(const LANGUAGE__DYNAMIC__InterfaceAction& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

LANGUAGE__DYNAMIC__InterfaceAction_template& LANGUAGE__DYNAMIC__InterfaceAction_template::operator=(const OPTIONAL<LANGUAGE__DYNAMIC__InterfaceAction>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__DYNAMIC__InterfaceAction&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
}
return *this;
}

LANGUAGE__DYNAMIC__InterfaceAction_template& LANGUAGE__DYNAMIC__InterfaceAction_template::operator=(const LANGUAGE__DYNAMIC__InterfaceAction_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean LANGUAGE__DYNAMIC__InterfaceAction_template::match(const LANGUAGE__DYNAMIC__InterfaceAction& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.InterfaceName().is_bound()) return FALSE;
if(!single_value->field_InterfaceName.match(other_value.InterfaceName(), legacy))return FALSE;
if(!other_value.Command().is_bound()) return FALSE;
if(!single_value->field_Command.match(other_value.Command(), legacy))return FALSE;
if(!other_value.Parameters().is_bound()) return FALSE;
if(!single_value->field_Parameters.match(other_value.Parameters(), legacy))return FALSE;
if(!other_value.Delay().is_bound()) return FALSE;
if((other_value.Delay().ispresent() ? !single_value->field_Delay.match((const FLOAT&)other_value.Delay(), legacy) : !single_value->field_Delay.match_omit(legacy)))return FALSE;
if(!other_value.Timeout().is_bound()) return FALSE;
if((other_value.Timeout().ispresent() ? !single_value->field_Timeout.match((const FLOAT&)other_value.Timeout(), legacy) : !single_value->field_Timeout.match_omit(legacy)))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
}
return FALSE;
}

boolean LANGUAGE__DYNAMIC__InterfaceAction_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_InterfaceName.is_bound()) return TRUE;
if (single_value->field_Command.is_bound()) return TRUE;
if (single_value->field_Parameters.is_bound()) return TRUE;
if (single_value->field_Delay.is_omit() || single_value->field_Delay.is_bound()) return TRUE;
if (single_value->field_Timeout.is_omit() || single_value->field_Timeout.is_bound()) return TRUE;
return FALSE;
}

boolean LANGUAGE__DYNAMIC__InterfaceAction_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_InterfaceName.is_value()) return FALSE;
if (!single_value->field_Command.is_value()) return FALSE;
if (!single_value->field_Parameters.is_value()) return FALSE;
if (!single_value->field_Delay.is_omit() && !single_value->field_Delay.is_value()) return FALSE;
if (!single_value->field_Timeout.is_omit() && !single_value->field_Timeout.is_value()) return FALSE;
return TRUE;
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

LANGUAGE__DYNAMIC__InterfaceAction LANGUAGE__DYNAMIC__InterfaceAction_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
LANGUAGE__DYNAMIC__InterfaceAction ret_val;
if (single_value->field_InterfaceName.is_bound()) {
ret_val.InterfaceName() = single_value->field_InterfaceName.valueof();
}
if (single_value->field_Command.is_bound()) {
ret_val.Command() = single_value->field_Command.valueof();
}
if (single_value->field_Parameters.is_bound()) {
ret_val.Parameters() = single_value->field_Parameters.valueof();
}
if (single_value->field_Delay.is_omit()) ret_val.Delay() = OMIT_VALUE;
else if (single_value->field_Delay.is_bound()) {
ret_val.Delay() = single_value->field_Delay.valueof();
}
if (single_value->field_Timeout.is_omit()) ret_val.Timeout() = OMIT_VALUE;
else if (single_value->field_Timeout.is_bound()) {
ret_val.Timeout() = single_value->field_Timeout.valueof();
}
return ret_val;
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new LANGUAGE__DYNAMIC__InterfaceAction_template[list_length];
}

LANGUAGE__DYNAMIC__InterfaceAction_template& LANGUAGE__DYNAMIC__InterfaceAction_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
return value_list.list_value[list_index];
}

CHARSTRING_template& LANGUAGE__DYNAMIC__InterfaceAction_template::InterfaceName()
{
set_specific();
return single_value->field_InterfaceName;
}

const CHARSTRING_template& LANGUAGE__DYNAMIC__InterfaceAction_template::InterfaceName() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field InterfaceName of a non-specific template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
return single_value->field_InterfaceName;
}

CHARSTRING_template& LANGUAGE__DYNAMIC__InterfaceAction_template::Command()
{
set_specific();
return single_value->field_Command;
}

const CHARSTRING_template& LANGUAGE__DYNAMIC__InterfaceAction_template::Command() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field Command of a non-specific template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
return single_value->field_Command;
}

LANGUAGE__DYNAMIC__InterfaceAction_Parameters_template& LANGUAGE__DYNAMIC__InterfaceAction_template::Parameters()
{
set_specific();
return single_value->field_Parameters;
}

const LANGUAGE__DYNAMIC__InterfaceAction_Parameters_template& LANGUAGE__DYNAMIC__InterfaceAction_template::Parameters() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field Parameters of a non-specific template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
return single_value->field_Parameters;
}

FLOAT_template& LANGUAGE__DYNAMIC__InterfaceAction_template::Delay()
{
set_specific();
return single_value->field_Delay;
}

const FLOAT_template& LANGUAGE__DYNAMIC__InterfaceAction_template::Delay() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field Delay of a non-specific template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
return single_value->field_Delay;
}

FLOAT_template& LANGUAGE__DYNAMIC__InterfaceAction_template::Timeout()
{
set_specific();
return single_value->field_Timeout;
}

const FLOAT_template& LANGUAGE__DYNAMIC__InterfaceAction_template::Timeout() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field Timeout of a non-specific template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
return single_value->field_Timeout;
}

int LANGUAGE__DYNAMIC__InterfaceAction_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 3;
      if (single_value->field_Delay.is_present()) ret_val++;
      if (single_value->field_Timeout.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
  }
  return 0;
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ InterfaceName := ");
single_value->field_InterfaceName.log();
TTCN_Logger::log_event_str(", Command := ");
single_value->field_Command.log();
TTCN_Logger::log_event_str(", Parameters := ");
single_value->field_Parameters.log();
TTCN_Logger::log_event_str(", Delay := ");
single_value->field_Delay.log();
TTCN_Logger::log_event_str(", Timeout := ");
single_value->field_Timeout.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::log_match(const LANGUAGE__DYNAMIC__InterfaceAction& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_InterfaceName.match(match_value.InterfaceName(), legacy)){
TTCN_Logger::log_logmatch_info(".InterfaceName");
single_value->field_InterfaceName.log_match(match_value.InterfaceName(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_Command.match(match_value.Command(), legacy)){
TTCN_Logger::log_logmatch_info(".Command");
single_value->field_Command.log_match(match_value.Command(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_Parameters.match(match_value.Parameters(), legacy)){
TTCN_Logger::log_logmatch_info(".Parameters");
single_value->field_Parameters.log_match(match_value.Parameters(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.Delay().ispresent()){
if(!single_value->field_Delay.match(match_value.Delay(), legacy)){
TTCN_Logger::log_logmatch_info(".Delay");
single_value->field_Delay.log_match(match_value.Delay(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_Delay.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".Delay := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_Delay.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.Timeout().ispresent()){
if(!single_value->field_Timeout.match(match_value.Timeout(), legacy)){
TTCN_Logger::log_logmatch_info(".Timeout");
single_value->field_Timeout.log_match(match_value.Timeout(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_Timeout.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".Timeout := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_Timeout.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ InterfaceName := ");
single_value->field_InterfaceName.log_match(match_value.InterfaceName(), legacy);
TTCN_Logger::log_event_str(", Command := ");
single_value->field_Command.log_match(match_value.Command(), legacy);
TTCN_Logger::log_event_str(", Parameters := ");
single_value->field_Parameters.log_match(match_value.Parameters(), legacy);
TTCN_Logger::log_event_str(", Delay := ");
if (match_value.Delay().ispresent()) single_value->field_Delay.log_match(match_value.Delay(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_Delay.log();
if (single_value->field_Delay.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", Timeout := ");
if (match_value.Timeout().ispresent()) single_value->field_Timeout.log_match(match_value.Timeout(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_Timeout.log();
if (single_value->field_Timeout.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_InterfaceName.encode_text(text_buf);
single_value->field_Command.encode_text(text_buf);
single_value->field_Parameters.encode_text(text_buf);
single_value->field_Delay.encode_text(text_buf);
single_value->field_Timeout.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
}
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_InterfaceName.decode_text(text_buf);
single_value->field_Command.decode_text(text_buf);
single_value->field_Parameters.decode_text(text_buf);
single_value->field_Delay.decode_text(text_buf);
single_value->field_Timeout.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new LANGUAGE__DYNAMIC__InterfaceAction_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction.");
}
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    LANGUAGE__DYNAMIC__InterfaceAction_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (5<param.get_size()) {
      param.error("record template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction has 5 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) InterfaceName().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) Command().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) Parameters().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) Delay().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) Timeout().set_param(*param.get_elem(4));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "InterfaceName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          InterfaceName().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Command")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Command().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Parameters")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Parameters().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Delay")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Delay().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "Timeout")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          Timeout().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction");
  }
  is_ifpresent = param.get_ifpresent();
}

void LANGUAGE__DYNAMIC__InterfaceAction_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_InterfaceName.check_restriction(t_res, t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction");
single_value->field_Command.check_restriction(t_res, t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction");
single_value->field_Parameters.check_restriction(t_res, t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction");
single_value->field_Delay.check_restriction(t_res, t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction");
single_value->field_Timeout.check_restriction(t_res, t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_InterfaceAction");
}

boolean LANGUAGE__DYNAMIC__InterfaceAction_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean LANGUAGE__DYNAMIC__InterfaceAction_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


const LANGUAGE__DYNAMIC__Action LANGUAGE__DYNAMIC__ActionSequence::UNBOUND_ELEM;
boolean LANGUAGE__DYNAMIC__ActionSequence::compare_function(const Base_Type *left_ptr, int left_index, const Base_Type *right_ptr, int right_index)
{
if (((const LANGUAGE__DYNAMIC__ActionSequence*)left_ptr)->val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (((const LANGUAGE__DYNAMIC__ActionSequence*)right_ptr)->val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (((const LANGUAGE__DYNAMIC__ActionSequence*)left_ptr)->val_ptr->value_elements[left_index] != NULL){
if (((const LANGUAGE__DYNAMIC__ActionSequence*)right_ptr)->val_ptr->value_elements[right_index] != NULL){
return *((const LANGUAGE__DYNAMIC__ActionSequence*)left_ptr)->val_ptr->value_elements[left_index] == *((const LANGUAGE__DYNAMIC__ActionSequence*)right_ptr)->val_ptr->value_elements[right_index];
} else return FALSE;
} else {
return ((const LANGUAGE__DYNAMIC__ActionSequence*)right_ptr)->val_ptr->value_elements[right_index] == NULL;
}
}

LANGUAGE__DYNAMIC__ActionSequence::LANGUAGE__DYNAMIC__ActionSequence()
{
val_ptr = NULL;
}

LANGUAGE__DYNAMIC__ActionSequence::LANGUAGE__DYNAMIC__ActionSequence(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

LANGUAGE__DYNAMIC__ActionSequence::LANGUAGE__DYNAMIC__ActionSequence(const LANGUAGE__DYNAMIC__ActionSequence& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

LANGUAGE__DYNAMIC__ActionSequence::~LANGUAGE__DYNAMIC__ActionSequence()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void LANGUAGE__DYNAMIC__ActionSequence::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

LANGUAGE__DYNAMIC__ActionSequence& LANGUAGE__DYNAMIC__ActionSequence::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

LANGUAGE__DYNAMIC__ActionSequence& LANGUAGE__DYNAMIC__ActionSequence::operator=(const LANGUAGE__DYNAMIC__ActionSequence& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean LANGUAGE__DYNAMIC__ActionSequence::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
return val_ptr->n_elements == 0 ;
}

boolean LANGUAGE__DYNAMIC__ActionSequence::operator==(const LANGUAGE__DYNAMIC__ActionSequence& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (val_ptr == other_value.val_ptr) return TRUE;
return compare_set_of(this, val_ptr->n_elements, &other_value, (other_value.val_ptr)->n_elements, compare_function);
}

LANGUAGE__DYNAMIC__Action& LANGUAGE__DYNAMIC__ActionSequence::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (LANGUAGE__DYNAMIC__Action**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new LANGUAGE__DYNAMIC__Action;
}
return *val_ptr->value_elements[index_value];
}

LANGUAGE__DYNAMIC__Action& LANGUAGE__DYNAMIC__ActionSequence::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
return (*this)[(int)index_value];
}

const LANGUAGE__DYNAMIC__Action& LANGUAGE__DYNAMIC__ActionSequence::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (index_value < 0) TTCN_error("Accessing an element of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const LANGUAGE__DYNAMIC__Action& LANGUAGE__DYNAMIC__ActionSequence::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
return (*this)[(int)index_value];
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
LANGUAGE__DYNAMIC__ActionSequence ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new LANGUAGE__DYNAMIC__Action(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence::operator+(const LANGUAGE__DYNAMIC__ActionSequence& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
LANGUAGE__DYNAMIC__ActionSequence ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new LANGUAGE__DYNAMIC__Action(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new LANGUAGE__DYNAMIC__Action(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence","element");
LANGUAGE__DYNAMIC__ActionSequence ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new LANGUAGE__DYNAMIC__Action(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence::replace(int index, int len, const LANGUAGE__DYNAMIC__ActionSequence& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
check_replace_arguments(val_ptr->n_elements, index, len, "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence","element");
LANGUAGE__DYNAMIC__ActionSequence ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new LANGUAGE__DYNAMIC__Action(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new LANGUAGE__DYNAMIC__Action(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new LANGUAGE__DYNAMIC__Action(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence::replace(int index, int len, const LANGUAGE__DYNAMIC__ActionSequence_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void LANGUAGE__DYNAMIC__ActionSequence::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (LANGUAGE__DYNAMIC__Action**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (LANGUAGE__DYNAMIC__Action**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (LANGUAGE__DYNAMIC__Action**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean LANGUAGE__DYNAMIC__ActionSequence::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int LANGUAGE__DYNAMIC__ActionSequence::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
return val_ptr->n_elements;
}

int LANGUAGE__DYNAMIC__ActionSequence::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void LANGUAGE__DYNAMIC__ActionSequence::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void LANGUAGE__DYNAMIC__ActionSequence::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "set of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("set of value", "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("set of value", "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void LANGUAGE__DYNAMIC__ActionSequence::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void LANGUAGE__DYNAMIC__ActionSequence::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void LANGUAGE__DYNAMIC__ActionSequence::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
val_ptr->value_elements = (LANGUAGE__DYNAMIC__Action**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void LANGUAGE__DYNAMIC__ActionSequence_template::copy_value(const LANGUAGE__DYNAMIC__ActionSequence& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (LANGUAGE__DYNAMIC__Action_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void LANGUAGE__DYNAMIC__ActionSequence_template::copy_template(const LANGUAGE__DYNAMIC__ActionSequence_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (LANGUAGE__DYNAMIC__Action_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new LANGUAGE__DYNAMIC__ActionSequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
case SUPERSET_MATCH:
case SUBSET_MATCH:
value_set.n_items = other_value.value_set.n_items;
value_set.set_items = new LANGUAGE__DYNAMIC__Action_template[value_set.n_items];
for (unsigned int set_count = 0; set_count < value_set.n_items; set_count++)
value_set.set_items[set_count] = other_value.value_set.set_items[set_count];
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
break;
}
set_selection(other_value);
}

boolean LANGUAGE__DYNAMIC__ActionSequence_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const LANGUAGE__DYNAMIC__ActionSequence_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const LANGUAGE__DYNAMIC__ActionSequence*)value_ptr)[value_index], legacy);
else return ((const LANGUAGE__DYNAMIC__ActionSequence_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

boolean LANGUAGE__DYNAMIC__ActionSequence_template::match_function_set(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const LANGUAGE__DYNAMIC__ActionSequence_template*)template_ptr)->value_set.set_items[template_index].match((*(const LANGUAGE__DYNAMIC__ActionSequence*)value_ptr)[value_index], legacy);
else return ((const LANGUAGE__DYNAMIC__ActionSequence_template*)template_ptr)->value_set.set_items[template_index].is_any_or_omit();
}

void LANGUAGE__DYNAMIC__ActionSequence_template::log_function(const Base_Type *value_ptr, const Restricted_Length_Template *template_ptr, int index_value, int index_template, boolean legacy)
{
if (value_ptr != NULL && template_ptr != NULL)((const LANGUAGE__DYNAMIC__ActionSequence_template*)template_ptr)->single_value.value_elements[index_template]->log_match((*(const LANGUAGE__DYNAMIC__ActionSequence*)value_ptr)[index_value], legacy);
else if (value_ptr != NULL) (*(const LANGUAGE__DYNAMIC__ActionSequence*)value_ptr)[index_value].log();
else if (template_ptr != NULL) ((const LANGUAGE__DYNAMIC__ActionSequence_template*)template_ptr)->single_value.value_elements[index_template]->log();
}

LANGUAGE__DYNAMIC__ActionSequence_template::LANGUAGE__DYNAMIC__ActionSequence_template()
{
}

LANGUAGE__DYNAMIC__ActionSequence_template::LANGUAGE__DYNAMIC__ActionSequence_template(template_sel other_value)
 : Restricted_Length_Template(other_value)
{
check_single_selection(other_value);
}

LANGUAGE__DYNAMIC__ActionSequence_template::LANGUAGE__DYNAMIC__ActionSequence_template(null_type)
 : Restricted_Length_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

LANGUAGE__DYNAMIC__ActionSequence_template::LANGUAGE__DYNAMIC__ActionSequence_template(const LANGUAGE__DYNAMIC__ActionSequence& other_value)
{
copy_value(other_value);
}

LANGUAGE__DYNAMIC__ActionSequence_template::LANGUAGE__DYNAMIC__ActionSequence_template(const OPTIONAL<LANGUAGE__DYNAMIC__ActionSequence>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__DYNAMIC__ActionSequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence from an unbound optional field.");
}
}

LANGUAGE__DYNAMIC__ActionSequence_template::LANGUAGE__DYNAMIC__ActionSequence_template(const LANGUAGE__DYNAMIC__ActionSequence_template& other_value)
 : Restricted_Length_Template()
{
copy_template(other_value);
}

LANGUAGE__DYNAMIC__ActionSequence_template::~LANGUAGE__DYNAMIC__ActionSequence_template()
{
clean_up();
}

void LANGUAGE__DYNAMIC__ActionSequence_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
break;
case SUPERSET_MATCH:
case SUBSET_MATCH:
delete [] value_set.set_items;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

LANGUAGE__DYNAMIC__ActionSequence_template& LANGUAGE__DYNAMIC__ActionSequence_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

LANGUAGE__DYNAMIC__ActionSequence_template& LANGUAGE__DYNAMIC__ActionSequence_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

LANGUAGE__DYNAMIC__ActionSequence_template& LANGUAGE__DYNAMIC__ActionSequence_template::operator=(const LANGUAGE__DYNAMIC__ActionSequence& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

LANGUAGE__DYNAMIC__ActionSequence_template& LANGUAGE__DYNAMIC__ActionSequence_template::operator=(const OPTIONAL<LANGUAGE__DYNAMIC__ActionSequence>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__DYNAMIC__ActionSequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
}
return *this;
}

LANGUAGE__DYNAMIC__ActionSequence_template& LANGUAGE__DYNAMIC__ActionSequence_template::operator=(const LANGUAGE__DYNAMIC__ActionSequence_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__ActionSequence_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
    break;
}
return *single_value.value_elements[index_value];
}

LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__ActionSequence_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
return (*this)[(int)index_value];
}

const LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__ActionSequence_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__ActionSequence_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
return (*this)[(int)index_value];
}

void LANGUAGE__DYNAMIC__ActionSequence_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (LANGUAGE__DYNAMIC__Action_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (LANGUAGE__DYNAMIC__Action_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int LANGUAGE__DYNAMIC__ActionSequence_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int LANGUAGE__DYNAMIC__ActionSequence_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case SUPERSET_MATCH:
case SUBSET_MATCH: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = value_set.n_items;
  if (!is_size) { while (elem_count>0 && !value_set.set_items[elem_count-1].is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (value_set.set_items[i].get_selection())
    {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
  if (template_selection==SUPERSET_MATCH) {
    has_any_or_none = TRUE;
   } else {
    int max_size = min_size;
    min_size = 0;
    if (!has_any_or_none) { // [0,max_size]
      switch (length_restriction_type) {
      case NO_LENGTH_RESTRICTION:
        if (max_size==0) return 0;
        TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence with no exact size.", op_name);
      case SINGLE_LENGTH_RESTRICTION:
        if (length_restriction.single_length<=max_size)
          return length_restriction.single_length;
        TTCN_error("Performing %sof() operation on an invalid template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence. The maximum size (%d) contradicts the length restriction (%d).", op_name, max_size, length_restriction.single_length);
      case RANGE_LENGTH_RESTRICTION:
        if (max_size==length_restriction.range_length.min_length) {
          return max_size;
        } else if (max_size>length_restriction.range_length.min_length){
          TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence with no exact size.", op_name);
        } else
          TTCN_error("Performing %sof() operation on an invalid template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence. Maximum size (%d) contradicts the length restriction (%d..%d).", op_name, max_size, length_restriction.range_length.min_length, length_restriction.range_length.max_length);
      default:
        TTCN_error("Internal error: Template has invalid length restriction type.");
      }
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence");
}

boolean LANGUAGE__DYNAMIC__ActionSequence_template::match(const LANGUAGE__DYNAMIC__ActionSequence& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_set_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
case SUPERSET_MATCH:
case SUBSET_MATCH:
return match_set_of(&other_value, value_length, this, value_set.n_items, match_function_set, legacy);
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
}
return FALSE;
}

boolean LANGUAGE__DYNAMIC__ActionSequence_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
LANGUAGE__DYNAMIC__ActionSequence ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence_template::replace(int index, int len, const LANGUAGE__DYNAMIC__ActionSequence_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

LANGUAGE__DYNAMIC__ActionSequence LANGUAGE__DYNAMIC__ActionSequence_template::replace(int index, int len, const LANGUAGE__DYNAMIC__ActionSequence& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void LANGUAGE__DYNAMIC__ActionSequence_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new LANGUAGE__DYNAMIC__ActionSequence_template[list_length];
break;
case SUPERSET_MATCH:
case SUBSET_MATCH:
value_set.n_items = list_length;
value_set.set_items = new LANGUAGE__DYNAMIC__Action_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
}
set_selection(template_type);
}

LANGUAGE__DYNAMIC__ActionSequence_template& LANGUAGE__DYNAMIC__ActionSequence_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
return value_list.list_value[list_index];
}

LANGUAGE__DYNAMIC__Action_template& LANGUAGE__DYNAMIC__ActionSequence_template::set_item(unsigned int set_index)
{
if (template_selection != SUPERSET_MATCH && template_selection != SUBSET_MATCH) TTCN_error("Internal error: Accessing a set element of a non-set template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
if (set_index >= value_set.n_items) TTCN_error("Internal error: Index overflow in a set template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
return value_set.set_items[set_index];
}

void LANGUAGE__DYNAMIC__ActionSequence_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log();
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
case SUPERSET_MATCH:
case SUBSET_MATCH:
TTCN_Logger::log_event("%s(", template_selection == SUPERSET_MATCH ? "superset" : "subset");
for (unsigned int set_count = 0; set_count < value_set.n_items; set_count++) {
if (set_count > 0) TTCN_Logger::log_event_str(", ");
value_set.set_items[set_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void LANGUAGE__DYNAMIC__ActionSequence_template::log_match(const LANGUAGE__DYNAMIC__ActionSequence& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (template_selection == SPECIFIC_VALUE)
  log_match_heuristics(&match_value, match_value.size_of(), this, single_value.n_elements, match_function_specific, log_function, legacy);
else{
if(previous_size != 0){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::set_logmatch_buffer_len(previous_size);
TTCN_Logger::log_event_str(":=");
}
}
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
return;
}
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else {
TTCN_Logger::log_event_str(" unmatched");
if (template_selection == SPECIFIC_VALUE) log_match_heuristics(&match_value, match_value.size_of(), this, single_value.n_elements, match_function_specific, log_function, legacy);
}
}

void LANGUAGE__DYNAMIC__ActionSequence_template::encode_text(Text_Buf& text_buf) const
{
encode_text_restricted(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
case SUPERSET_MATCH:
case SUBSET_MATCH:
text_buf.push_int(value_set.n_items);
for (unsigned int set_count = 0; set_count < value_set.n_items; set_count++)
value_set.set_items[set_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
}
}

void LANGUAGE__DYNAMIC__ActionSequence_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_restricted(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
single_value.value_elements = (LANGUAGE__DYNAMIC__Action_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new LANGUAGE__DYNAMIC__Action_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new LANGUAGE__DYNAMIC__ActionSequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
case SUPERSET_MATCH:
case SUBSET_MATCH:
value_set.n_items = text_buf.pull_int().get_val();
value_set.set_items = new LANGUAGE__DYNAMIC__Action_template[value_set.n_items];
for (unsigned int set_count = 0; set_count < value_set.n_items; set_count++)
value_set.set_items[set_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
}
}

boolean LANGUAGE__DYNAMIC__ActionSequence_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean LANGUAGE__DYNAMIC__ActionSequence_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void LANGUAGE__DYNAMIC__ActionSequence_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "set of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    LANGUAGE__DYNAMIC__ActionSequence_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    set_size(param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      if (param.get_elem(p_i)->get_type()!=Module_Param::MP_NotUsed) {
        (*this)[p_i].set_param(*param.get_elem(p_i));
      }
    }
    break;
  case Module_Param::MP_Superset_Template:
  case Module_Param::MP_Subset_Template:
    set_type(param.get_type()==Module_Param::MP_Superset_Template ? SUPERSET_MATCH : SUBSET_MATCH, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      set_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  default:
    param.type_error("set of template", "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void LANGUAGE__DYNAMIC__ActionSequence_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence");
}

boolean LANGUAGE__DYNAMIC__ActionSequence_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return FALSE;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}

/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const LANGUAGE__DYNAMIC__ActionSequence& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @LANGUAGE_DYNAMIC.LANGUAGE_DYNAMIC_ActionSequence.");
return other_value.val_ptr->n_elements == 0;
}


} /* end of namespace */
