// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "GPIOPinPort.hh"

namespace GPIOPinPort {

/* Prototypes of static functions */

static void pre_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x19, 0x6d, 0x96, 0x89, 0x5b, 0x16, 0x5e, 0x05, 0x64, 0x23, 0xf6, 0xd9, 0x11, 0x97, 0x17, 0x08 };

/* Global variable definitions */

// No XER for GPIO__PIN__DIRECTION
const TTCN_Typedescriptor_t GPIO__PIN__DIRECTION_descr_ = { "@GPIOPinPort.GPIO_PIN_DIRECTION", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for GPIO__PIN__VALUE
const TTCN_Typedescriptor_t GPIO__PIN__VALUE_descr_ = { "@GPIOPinPort.GPIO_PIN_VALUE", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GPIO__PIN__STATUS_is__exported_xer_ = { {"is_exported>\n", "is_exported>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t GPIO__PIN__STATUS_is__exported_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_OERdescriptor_t GPIO__PIN__STATUS_is__exported_oer_ = { -1, FALSE, -1, FALSE };
const TTCN_Typedescriptor_t GPIO__PIN__STATUS_is__exported_descr_ = { "@GPIOPinPort.GPIO_PIN_STATUS.is_exported", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &GPIO__PIN__STATUS_is__exported_xer_, &GPIO__PIN__STATUS_is__exported_json_, &GPIO__PIN__STATUS_is__exported_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for GPIO__PIN__STATUS
const TTCN_Typedescriptor_t GPIO__PIN__STATUS_descr_ = { "@GPIOPinPort.GPIO_PIN_STATUS", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& GPIO__Base_descr_ = COMPONENT_descr_;
PORT_ARRAY<GPIO__Pin__Port, 26, 2> GPIO__Base_component_gpio;
TTCN_Module module_object("GPIOPinPort", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, init_comp_type, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

GPIO__PIN__DIRECTION::GPIO__PIN__DIRECTION()
{
enum_value = UNBOUND_VALUE;
}

GPIO__PIN__DIRECTION::GPIO__PIN__DIRECTION(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

GPIO__PIN__DIRECTION::GPIO__PIN__DIRECTION(enum_type other_value)
{
enum_value = other_value;
}

GPIO__PIN__DIRECTION::GPIO__PIN__DIRECTION(const GPIO__PIN__DIRECTION& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
enum_value = other_value.enum_value;
}

GPIO__PIN__DIRECTION& GPIO__PIN__DIRECTION::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

GPIO__PIN__DIRECTION& GPIO__PIN__DIRECTION::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

GPIO__PIN__DIRECTION& GPIO__PIN__DIRECTION::operator=(const GPIO__PIN__DIRECTION& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
enum_value = other_value.enum_value;
return *this;
}

boolean GPIO__PIN__DIRECTION::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
return enum_value == other_value;
}

boolean GPIO__PIN__DIRECTION::operator==(const GPIO__PIN__DIRECTION& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
return enum_value == other_value.enum_value;
}

boolean GPIO__PIN__DIRECTION::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
return enum_value < other_value;
}

boolean GPIO__PIN__DIRECTION::operator<(const GPIO__PIN__DIRECTION& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
return enum_value < other_value.enum_value;
}

boolean GPIO__PIN__DIRECTION::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
return enum_value > other_value;
}

boolean GPIO__PIN__DIRECTION::operator>(const GPIO__PIN__DIRECTION& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
return enum_value > other_value.enum_value;
}

const char *GPIO__PIN__DIRECTION::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case IN: return "IN";
case OUT: return "OUT";
default: return "<unknown>";
}
}

GPIO__PIN__DIRECTION::enum_type GPIO__PIN__DIRECTION::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "IN")) return IN;
else if (!strcmp(str_par, "OUT")) return OUT;
else return UNKNOWN_VALUE;
}

boolean GPIO__PIN__DIRECTION::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
return TRUE;
default:
return FALSE;
}
}

int GPIO__PIN__DIRECTION::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int GPIO__PIN__DIRECTION::enum2int(const GPIO__PIN__DIRECTION& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void GPIO__PIN__DIRECTION::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.", int_val);
enum_value = (enum_type)int_val;
}

GPIO__PIN__DIRECTION::operator GPIO__PIN__DIRECTION::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
return enum_value;
}

void GPIO__PIN__DIRECTION::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void GPIO__PIN__DIRECTION::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@GPIOPinPort.GPIO_PIN_DIRECTION");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @GPIOPinPort.GPIO_PIN_DIRECTION.");
  }
}

void GPIO__PIN__DIRECTION::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
text_buf.push_int(enum_value);
}

void GPIO__PIN__DIRECTION::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.", enum_value);
}

void GPIO__PIN__DIRECTION_template::copy_template(const GPIO__PIN__DIRECTION_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new GPIO__PIN__DIRECTION_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
}
}

GPIO__PIN__DIRECTION_template::GPIO__PIN__DIRECTION_template()
{
}

GPIO__PIN__DIRECTION_template::GPIO__PIN__DIRECTION_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

GPIO__PIN__DIRECTION_template::GPIO__PIN__DIRECTION_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!GPIO__PIN__DIRECTION::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION with unknown numeric value %d.", other_value);
single_value = (GPIO__PIN__DIRECTION::enum_type)other_value;
}

GPIO__PIN__DIRECTION_template::GPIO__PIN__DIRECTION_template(GPIO__PIN__DIRECTION::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

GPIO__PIN__DIRECTION_template::GPIO__PIN__DIRECTION_template(const GPIO__PIN__DIRECTION& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == GPIO__PIN__DIRECTION::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
single_value = other_value.enum_value;
}

GPIO__PIN__DIRECTION_template::GPIO__PIN__DIRECTION_template(const OPTIONAL<GPIO__PIN__DIRECTION>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (GPIO__PIN__DIRECTION::enum_type)(const GPIO__PIN__DIRECTION&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION from an unbound optional field.");
}
}

GPIO__PIN__DIRECTION_template::GPIO__PIN__DIRECTION_template(const GPIO__PIN__DIRECTION_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

GPIO__PIN__DIRECTION_template::~GPIO__PIN__DIRECTION_template()
{
clean_up();
}

boolean GPIO__PIN__DIRECTION_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean GPIO__PIN__DIRECTION_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != GPIO__PIN__DIRECTION::UNBOUND_VALUE;
}

void GPIO__PIN__DIRECTION_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

GPIO__PIN__DIRECTION_template& GPIO__PIN__DIRECTION_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

GPIO__PIN__DIRECTION_template& GPIO__PIN__DIRECTION_template::operator=(int other_value)
{
if (!GPIO__PIN__DIRECTION::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (GPIO__PIN__DIRECTION::enum_type)other_value;
return *this;
}

GPIO__PIN__DIRECTION_template& GPIO__PIN__DIRECTION_template::operator=(GPIO__PIN__DIRECTION::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

GPIO__PIN__DIRECTION_template& GPIO__PIN__DIRECTION_template::operator=(const GPIO__PIN__DIRECTION& other_value)
{
if (other_value.enum_value == GPIO__PIN__DIRECTION::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

GPIO__PIN__DIRECTION_template& GPIO__PIN__DIRECTION_template::operator=(const OPTIONAL<GPIO__PIN__DIRECTION>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (GPIO__PIN__DIRECTION::enum_type)(const GPIO__PIN__DIRECTION&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
}
return *this;
}

GPIO__PIN__DIRECTION_template& GPIO__PIN__DIRECTION_template::operator=(const GPIO__PIN__DIRECTION_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean GPIO__PIN__DIRECTION_template::match(GPIO__PIN__DIRECTION::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
}
return FALSE;
}

boolean GPIO__PIN__DIRECTION_template::match(const GPIO__PIN__DIRECTION& other_value, boolean) const
{
if (other_value.enum_value == GPIO__PIN__DIRECTION::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION with an unbound value.");
return match(other_value.enum_value);
}

GPIO__PIN__DIRECTION::enum_type GPIO__PIN__DIRECTION_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
return single_value;
}

void GPIO__PIN__DIRECTION_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new GPIO__PIN__DIRECTION_template[list_length];
}

GPIO__PIN__DIRECTION_template& GPIO__PIN__DIRECTION_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
return value_list.list_value[list_index];
}

void GPIO__PIN__DIRECTION_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(GPIO__PIN__DIRECTION::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void GPIO__PIN__DIRECTION_template::log_match(const GPIO__PIN__DIRECTION& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void GPIO__PIN__DIRECTION_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
}
}

void GPIO__PIN__DIRECTION_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (GPIO__PIN__DIRECTION::enum_type)text_buf.pull_int().get_val();
if (!GPIO__PIN__DIRECTION::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new GPIO__PIN__DIRECTION_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @GPIOPinPort.GPIO_PIN_DIRECTION.");
}
}

boolean GPIO__PIN__DIRECTION_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean GPIO__PIN__DIRECTION_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void GPIO__PIN__DIRECTION_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    GPIO__PIN__DIRECTION_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Enumerated: {
    GPIO__PIN__DIRECTION::enum_type enum_val = GPIO__PIN__DIRECTION::str_to_enum(m_p->get_enumerated());
    if (!GPIO__PIN__DIRECTION::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @GPIOPinPort.GPIO_PIN_DIRECTION.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@GPIOPinPort.GPIO_PIN_DIRECTION");
  }
  is_ifpresent = param.get_ifpresent();
}

void GPIO__PIN__DIRECTION_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@GPIOPinPort.GPIO_PIN_DIRECTION");
}

GPIO__PIN__VALUE::GPIO__PIN__VALUE()
{
enum_value = UNBOUND_VALUE;
}

GPIO__PIN__VALUE::GPIO__PIN__VALUE(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @GPIOPinPort.GPIO_PIN_VALUE with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

GPIO__PIN__VALUE::GPIO__PIN__VALUE(enum_type other_value)
{
enum_value = other_value;
}

GPIO__PIN__VALUE::GPIO__PIN__VALUE(const GPIO__PIN__VALUE& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
enum_value = other_value.enum_value;
}

GPIO__PIN__VALUE& GPIO__PIN__VALUE::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

GPIO__PIN__VALUE& GPIO__PIN__VALUE::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

GPIO__PIN__VALUE& GPIO__PIN__VALUE::operator=(const GPIO__PIN__VALUE& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
enum_value = other_value.enum_value;
return *this;
}

boolean GPIO__PIN__VALUE::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
return enum_value == other_value;
}

boolean GPIO__PIN__VALUE::operator==(const GPIO__PIN__VALUE& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
return enum_value == other_value.enum_value;
}

boolean GPIO__PIN__VALUE::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
return enum_value < other_value;
}

boolean GPIO__PIN__VALUE::operator<(const GPIO__PIN__VALUE& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
return enum_value < other_value.enum_value;
}

boolean GPIO__PIN__VALUE::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
return enum_value > other_value;
}

boolean GPIO__PIN__VALUE::operator>(const GPIO__PIN__VALUE& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
return enum_value > other_value.enum_value;
}

const char *GPIO__PIN__VALUE::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case LOW: return "LOW";
case HIGH: return "HIGH";
default: return "<unknown>";
}
}

GPIO__PIN__VALUE::enum_type GPIO__PIN__VALUE::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "LOW")) return LOW;
else if (!strcmp(str_par, "HIGH")) return HIGH;
else return UNKNOWN_VALUE;
}

boolean GPIO__PIN__VALUE::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
return TRUE;
default:
return FALSE;
}
}

int GPIO__PIN__VALUE::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int GPIO__PIN__VALUE::enum2int(const GPIO__PIN__VALUE& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void GPIO__PIN__VALUE::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.", int_val);
enum_value = (enum_type)int_val;
}

GPIO__PIN__VALUE::operator GPIO__PIN__VALUE::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
return enum_value;
}

void GPIO__PIN__VALUE::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void GPIO__PIN__VALUE::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@GPIOPinPort.GPIO_PIN_VALUE");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @GPIOPinPort.GPIO_PIN_VALUE.");
  }
}

void GPIO__PIN__VALUE::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
text_buf.push_int(enum_value);
}

void GPIO__PIN__VALUE::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @GPIOPinPort.GPIO_PIN_VALUE.", enum_value);
}

void GPIO__PIN__VALUE_template::copy_template(const GPIO__PIN__VALUE_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new GPIO__PIN__VALUE_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
}
}

GPIO__PIN__VALUE_template::GPIO__PIN__VALUE_template()
{
}

GPIO__PIN__VALUE_template::GPIO__PIN__VALUE_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

GPIO__PIN__VALUE_template::GPIO__PIN__VALUE_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!GPIO__PIN__VALUE::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE with unknown numeric value %d.", other_value);
single_value = (GPIO__PIN__VALUE::enum_type)other_value;
}

GPIO__PIN__VALUE_template::GPIO__PIN__VALUE_template(GPIO__PIN__VALUE::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

GPIO__PIN__VALUE_template::GPIO__PIN__VALUE_template(const GPIO__PIN__VALUE& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == GPIO__PIN__VALUE::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
single_value = other_value.enum_value;
}

GPIO__PIN__VALUE_template::GPIO__PIN__VALUE_template(const OPTIONAL<GPIO__PIN__VALUE>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (GPIO__PIN__VALUE::enum_type)(const GPIO__PIN__VALUE&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE from an unbound optional field.");
}
}

GPIO__PIN__VALUE_template::GPIO__PIN__VALUE_template(const GPIO__PIN__VALUE_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

GPIO__PIN__VALUE_template::~GPIO__PIN__VALUE_template()
{
clean_up();
}

boolean GPIO__PIN__VALUE_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean GPIO__PIN__VALUE_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != GPIO__PIN__VALUE::UNBOUND_VALUE;
}

void GPIO__PIN__VALUE_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

GPIO__PIN__VALUE_template& GPIO__PIN__VALUE_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

GPIO__PIN__VALUE_template& GPIO__PIN__VALUE_template::operator=(int other_value)
{
if (!GPIO__PIN__VALUE::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (GPIO__PIN__VALUE::enum_type)other_value;
return *this;
}

GPIO__PIN__VALUE_template& GPIO__PIN__VALUE_template::operator=(GPIO__PIN__VALUE::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

GPIO__PIN__VALUE_template& GPIO__PIN__VALUE_template::operator=(const GPIO__PIN__VALUE& other_value)
{
if (other_value.enum_value == GPIO__PIN__VALUE::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @GPIOPinPort.GPIO_PIN_VALUE to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

GPIO__PIN__VALUE_template& GPIO__PIN__VALUE_template::operator=(const OPTIONAL<GPIO__PIN__VALUE>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (GPIO__PIN__VALUE::enum_type)(const GPIO__PIN__VALUE&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
}
return *this;
}

GPIO__PIN__VALUE_template& GPIO__PIN__VALUE_template::operator=(const GPIO__PIN__VALUE_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean GPIO__PIN__VALUE_template::match(GPIO__PIN__VALUE::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
}
return FALSE;
}

boolean GPIO__PIN__VALUE_template::match(const GPIO__PIN__VALUE& other_value, boolean) const
{
if (other_value.enum_value == GPIO__PIN__VALUE::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE with an unbound value.");
return match(other_value.enum_value);
}

GPIO__PIN__VALUE::enum_type GPIO__PIN__VALUE_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
return single_value;
}

void GPIO__PIN__VALUE_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new GPIO__PIN__VALUE_template[list_length];
}

GPIO__PIN__VALUE_template& GPIO__PIN__VALUE_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
return value_list.list_value[list_index];
}

void GPIO__PIN__VALUE_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(GPIO__PIN__VALUE::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void GPIO__PIN__VALUE_template::log_match(const GPIO__PIN__VALUE& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void GPIO__PIN__VALUE_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
}
}

void GPIO__PIN__VALUE_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (GPIO__PIN__VALUE::enum_type)text_buf.pull_int().get_val();
if (!GPIO__PIN__VALUE::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new GPIO__PIN__VALUE_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @GPIOPinPort.GPIO_PIN_VALUE.");
}
}

boolean GPIO__PIN__VALUE_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean GPIO__PIN__VALUE_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void GPIO__PIN__VALUE_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    GPIO__PIN__VALUE_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Enumerated: {
    GPIO__PIN__VALUE::enum_type enum_val = GPIO__PIN__VALUE::str_to_enum(m_p->get_enumerated());
    if (!GPIO__PIN__VALUE::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @GPIOPinPort.GPIO_PIN_VALUE.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@GPIOPinPort.GPIO_PIN_VALUE");
  }
  is_ifpresent = param.get_ifpresent();
}

void GPIO__PIN__VALUE_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@GPIOPinPort.GPIO_PIN_VALUE");
}

GPIO__PIN__STATUS::GPIO__PIN__STATUS()
{
}

GPIO__PIN__STATUS::GPIO__PIN__STATUS(const BOOLEAN& par_is__exported,
    const GPIO__PIN__DIRECTION& par_direction,
    const GPIO__PIN__VALUE& par_val)
  :   field_is__exported(par_is__exported),
  field_direction(par_direction),
  field_val(par_val)
{
}

GPIO__PIN__STATUS::GPIO__PIN__STATUS(const GPIO__PIN__STATUS& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @GPIOPinPort.GPIO_PIN_STATUS.");
if (other_value.is__exported().is_bound()) field_is__exported = other_value.is__exported();
else field_is__exported.clean_up();
if (other_value.direction().is_bound()) field_direction = other_value.direction();
else field_direction.clean_up();
if (other_value.val().is_bound()) field_val = other_value.val();
else field_val.clean_up();
}

void GPIO__PIN__STATUS::clean_up()
{
field_is__exported.clean_up();
field_direction.clean_up();
field_val.clean_up();
}

GPIO__PIN__STATUS& GPIO__PIN__STATUS::operator=(const GPIO__PIN__STATUS& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @GPIOPinPort.GPIO_PIN_STATUS.");
  if (other_value.is__exported().is_bound()) field_is__exported = other_value.is__exported();
  else field_is__exported.clean_up();
  if (other_value.direction().is_bound()) field_direction = other_value.direction();
  else field_direction.clean_up();
  if (other_value.val().is_bound()) field_val = other_value.val();
  else field_val.clean_up();
}
return *this;
}

boolean GPIO__PIN__STATUS::operator==(const GPIO__PIN__STATUS& other_value) const
{
return field_is__exported==other_value.field_is__exported
  && field_direction==other_value.field_direction
  && field_val==other_value.field_val;
}

boolean GPIO__PIN__STATUS::is_bound() const
{
if(field_is__exported.is_bound()) return TRUE;
if(field_direction.is_bound()) return TRUE;
if(field_val.is_bound()) return TRUE;
return FALSE;
}
boolean GPIO__PIN__STATUS::is_value() const
{
if(!field_is__exported.is_value()) return FALSE;
if(!field_direction.is_value()) return FALSE;
if(!field_val.is_value()) return FALSE;
return TRUE;
}
void GPIO__PIN__STATUS::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ is_exported := ");
field_is__exported.log();
TTCN_Logger::log_event_str(", direction := ");
field_direction.log();
TTCN_Logger::log_event_str(", val := ");
field_val.log();
TTCN_Logger::log_event_str(" }");
}

void GPIO__PIN__STATUS::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @GPIOPinPort.GPIO_PIN_STATUS has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) is__exported().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) direction().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) val().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "is_exported")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          is__exported().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "direction")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          direction().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "val")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          val().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @GPIOPinPort.GPIO_PIN_STATUS: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@GPIOPinPort.GPIO_PIN_STATUS");
  }
}

void GPIO__PIN__STATUS::set_implicit_omit()
{
if (is__exported().is_bound()) is__exported().set_implicit_omit();
if (direction().is_bound()) direction().set_implicit_omit();
if (val().is_bound()) val().set_implicit_omit();
}

void GPIO__PIN__STATUS::encode_text(Text_Buf& text_buf) const
{
field_is__exported.encode_text(text_buf);
field_direction.encode_text(text_buf);
field_val.encode_text(text_buf);
}

void GPIO__PIN__STATUS::decode_text(Text_Buf& text_buf)
{
field_is__exported.decode_text(text_buf);
field_direction.decode_text(text_buf);
field_val.decode_text(text_buf);
}

struct GPIO__PIN__STATUS_template::single_value_struct {
BOOLEAN_template field_is__exported;
GPIO__PIN__DIRECTION_template field_direction;
GPIO__PIN__VALUE_template field_val;
};

void GPIO__PIN__STATUS_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_is__exported = ANY_VALUE;
single_value->field_direction = ANY_VALUE;
single_value->field_val = ANY_VALUE;
}
}
}

void GPIO__PIN__STATUS_template::copy_value(const GPIO__PIN__STATUS& other_value)
{
single_value = new single_value_struct;
if (other_value.is__exported().is_bound()) {
  single_value->field_is__exported = other_value.is__exported();
} else {
  single_value->field_is__exported.clean_up();
}
if (other_value.direction().is_bound()) {
  single_value->field_direction = other_value.direction();
} else {
  single_value->field_direction.clean_up();
}
if (other_value.val().is_bound()) {
  single_value->field_val = other_value.val();
} else {
  single_value->field_val.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void GPIO__PIN__STATUS_template::copy_template(const GPIO__PIN__STATUS_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.is__exported().get_selection()) {
single_value->field_is__exported = other_value.is__exported();
} else {
single_value->field_is__exported.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.direction().get_selection()) {
single_value->field_direction = other_value.direction();
} else {
single_value->field_direction.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.val().get_selection()) {
single_value->field_val = other_value.val();
} else {
single_value->field_val.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new GPIO__PIN__STATUS_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @GPIOPinPort.GPIO_PIN_STATUS.");
break;
}
set_selection(other_value);
}

GPIO__PIN__STATUS_template::GPIO__PIN__STATUS_template()
{
}

GPIO__PIN__STATUS_template::GPIO__PIN__STATUS_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

GPIO__PIN__STATUS_template::GPIO__PIN__STATUS_template(const GPIO__PIN__STATUS& other_value)
{
copy_value(other_value);
}

GPIO__PIN__STATUS_template::GPIO__PIN__STATUS_template(const OPTIONAL<GPIO__PIN__STATUS>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const GPIO__PIN__STATUS&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @GPIOPinPort.GPIO_PIN_STATUS from an unbound optional field.");
}
}

GPIO__PIN__STATUS_template::GPIO__PIN__STATUS_template(const GPIO__PIN__STATUS_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

GPIO__PIN__STATUS_template::~GPIO__PIN__STATUS_template()
{
clean_up();
}

GPIO__PIN__STATUS_template& GPIO__PIN__STATUS_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

GPIO__PIN__STATUS_template& GPIO__PIN__STATUS_template::operator=(const GPIO__PIN__STATUS& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

GPIO__PIN__STATUS_template& GPIO__PIN__STATUS_template::operator=(const OPTIONAL<GPIO__PIN__STATUS>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const GPIO__PIN__STATUS&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @GPIOPinPort.GPIO_PIN_STATUS.");
}
return *this;
}

GPIO__PIN__STATUS_template& GPIO__PIN__STATUS_template::operator=(const GPIO__PIN__STATUS_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean GPIO__PIN__STATUS_template::match(const GPIO__PIN__STATUS& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.is__exported().is_bound()) return FALSE;
if(!single_value->field_is__exported.match(other_value.is__exported(), legacy))return FALSE;
if(!other_value.direction().is_bound()) return FALSE;
if(!single_value->field_direction.match(other_value.direction(), legacy))return FALSE;
if(!other_value.val().is_bound()) return FALSE;
if(!single_value->field_val.match(other_value.val(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @GPIOPinPort.GPIO_PIN_STATUS.");
}
return FALSE;
}

boolean GPIO__PIN__STATUS_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_is__exported.is_bound()) return TRUE;
if (single_value->field_direction.is_bound()) return TRUE;
if (single_value->field_val.is_bound()) return TRUE;
return FALSE;
}

boolean GPIO__PIN__STATUS_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_is__exported.is_value()) return FALSE;
if (!single_value->field_direction.is_value()) return FALSE;
if (!single_value->field_val.is_value()) return FALSE;
return TRUE;
}

void GPIO__PIN__STATUS_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

GPIO__PIN__STATUS GPIO__PIN__STATUS_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @GPIOPinPort.GPIO_PIN_STATUS.");
GPIO__PIN__STATUS ret_val;
if (single_value->field_is__exported.is_bound()) {
ret_val.is__exported() = single_value->field_is__exported.valueof();
}
if (single_value->field_direction.is_bound()) {
ret_val.direction() = single_value->field_direction.valueof();
}
if (single_value->field_val.is_bound()) {
ret_val.val() = single_value->field_val.valueof();
}
return ret_val;
}

void GPIO__PIN__STATUS_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @GPIOPinPort.GPIO_PIN_STATUS.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new GPIO__PIN__STATUS_template[list_length];
}

GPIO__PIN__STATUS_template& GPIO__PIN__STATUS_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @GPIOPinPort.GPIO_PIN_STATUS.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @GPIOPinPort.GPIO_PIN_STATUS.");
return value_list.list_value[list_index];
}

BOOLEAN_template& GPIO__PIN__STATUS_template::is__exported()
{
set_specific();
return single_value->field_is__exported;
}

const BOOLEAN_template& GPIO__PIN__STATUS_template::is__exported() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field is_exported of a non-specific template of type @GPIOPinPort.GPIO_PIN_STATUS.");
return single_value->field_is__exported;
}

GPIO__PIN__DIRECTION_template& GPIO__PIN__STATUS_template::direction()
{
set_specific();
return single_value->field_direction;
}

const GPIO__PIN__DIRECTION_template& GPIO__PIN__STATUS_template::direction() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field direction of a non-specific template of type @GPIOPinPort.GPIO_PIN_STATUS.");
return single_value->field_direction;
}

GPIO__PIN__VALUE_template& GPIO__PIN__STATUS_template::val()
{
set_specific();
return single_value->field_val;
}

const GPIO__PIN__VALUE_template& GPIO__PIN__STATUS_template::val() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field val of a non-specific template of type @GPIOPinPort.GPIO_PIN_STATUS.");
return single_value->field_val;
}

int GPIO__PIN__STATUS_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @GPIOPinPort.GPIO_PIN_STATUS which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @GPIOPinPort.GPIO_PIN_STATUS containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @GPIOPinPort.GPIO_PIN_STATUS containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @GPIOPinPort.GPIO_PIN_STATUS containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @GPIOPinPort.GPIO_PIN_STATUS containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @GPIOPinPort.GPIO_PIN_STATUS containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @GPIOPinPort.GPIO_PIN_STATUS.");
  }
  return 0;
}

void GPIO__PIN__STATUS_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ is_exported := ");
single_value->field_is__exported.log();
TTCN_Logger::log_event_str(", direction := ");
single_value->field_direction.log();
TTCN_Logger::log_event_str(", val := ");
single_value->field_val.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void GPIO__PIN__STATUS_template::log_match(const GPIO__PIN__STATUS& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_is__exported.match(match_value.is__exported(), legacy)){
TTCN_Logger::log_logmatch_info(".is_exported");
single_value->field_is__exported.log_match(match_value.is__exported(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_direction.match(match_value.direction(), legacy)){
TTCN_Logger::log_logmatch_info(".direction");
single_value->field_direction.log_match(match_value.direction(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_val.match(match_value.val(), legacy)){
TTCN_Logger::log_logmatch_info(".val");
single_value->field_val.log_match(match_value.val(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ is_exported := ");
single_value->field_is__exported.log_match(match_value.is__exported(), legacy);
TTCN_Logger::log_event_str(", direction := ");
single_value->field_direction.log_match(match_value.direction(), legacy);
TTCN_Logger::log_event_str(", val := ");
single_value->field_val.log_match(match_value.val(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void GPIO__PIN__STATUS_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_is__exported.encode_text(text_buf);
single_value->field_direction.encode_text(text_buf);
single_value->field_val.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @GPIOPinPort.GPIO_PIN_STATUS.");
}
}

void GPIO__PIN__STATUS_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_is__exported.decode_text(text_buf);
single_value->field_direction.decode_text(text_buf);
single_value->field_val.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new GPIO__PIN__STATUS_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @GPIOPinPort.GPIO_PIN_STATUS.");
}
}

void GPIO__PIN__STATUS_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    GPIO__PIN__STATUS_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @GPIOPinPort.GPIO_PIN_STATUS has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) is__exported().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) direction().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) val().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "is_exported")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          is__exported().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "direction")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          direction().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "val")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          val().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @GPIOPinPort.GPIO_PIN_STATUS: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@GPIOPinPort.GPIO_PIN_STATUS");
  }
  is_ifpresent = param.get_ifpresent();
}

void GPIO__PIN__STATUS_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_is__exported.check_restriction(t_res, t_name ? t_name : "@GPIOPinPort.GPIO_PIN_STATUS");
single_value->field_direction.check_restriction(t_res, t_name ? t_name : "@GPIOPinPort.GPIO_PIN_STATUS");
single_value->field_val.check_restriction(t_res, t_name ? t_name : "@GPIOPinPort.GPIO_PIN_STATUS");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@GPIOPinPort.GPIO_PIN_STATUS");
}

boolean GPIO__PIN__STATUS_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean GPIO__PIN__STATUS_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void GPIO__Pin__Port_BASE::remove_msg_queue_head()
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
switch (my_head->item_selection) {
case MESSAGE_0:
delete (my_head)->message_0;
break;
case MESSAGE_1:
delete (my_head)->message_1;
break;
default:
TTCN_error("Internal error: Invalid message selector in the queue of port %s.", port_name);
}
msg_queue_item_base *next_item = msg_queue_head->next_item;
delete (msg_queue_item*)msg_queue_head;
msg_queue_head = next_item;
if (next_item == NULL) msg_queue_tail = NULL;
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::extract__msg, port_name, 0, ++msg_head_count, CHARSTRING(0,NULL), CHARSTRING(0,NULL));}

void GPIO__Pin__Port_BASE::clear_queue()
{
while (msg_queue_head != NULL) remove_msg_queue_head();
}

GPIO__Pin__Port_BASE::GPIO__Pin__Port_BASE(const char *par_port_name)
 : PORT(par_port_name)
{
msg_queue_head = NULL;
msg_queue_tail = NULL;
}

GPIO__Pin__Port_BASE::~GPIO__Pin__Port_BASE()
{
clear_queue();
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__DIRECTION& send_par, const COMPONENT& destination_component)
{
if (!is_started) TTCN_error("Sending a message on port %s, which is not started.", port_name);
if (!destination_component.is_bound()) TTCN_error("Unbound component reference in the to clause of send operation.");
const TTCN_Logger::Severity log_sev = destination_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMSEND:TTCN_Logger::PORTEVENT_MCSEND;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_send(port_name, destination_component,
(TTCN_Logger::begin_event(log_sev, TRUE), TTCN_Logger::log_event_str(" @GPIOPinPort.GPIO_PIN_DIRECTION : "),
send_par.log(), TTCN_Logger::end_event_log2str()));
}
if (destination_component == SYSTEM_COMPREF) {
(void)get_default_destination();
outgoing_send(send_par);
}
else {
Text_Buf text_buf;
prepare_message(text_buf, "@GPIOPinPort.GPIO_PIN_DIRECTION");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__DIRECTION& send_par)
{
send(send_par, COMPONENT(get_default_destination()));
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__DIRECTION_template& send_par, const COMPONENT& destination_component)
{
const GPIO__PIN__DIRECTION& send_par_value = GPIO__PIN__DIRECTION(send_par.valueof());
send(send_par_value, destination_component);
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__DIRECTION_template& send_par)
{
const GPIO__PIN__DIRECTION& send_par_value = GPIO__PIN__DIRECTION(send_par.valueof());
send(send_par_value, COMPONENT(get_default_destination()));
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__VALUE& send_par, const COMPONENT& destination_component)
{
if (!is_started) TTCN_error("Sending a message on port %s, which is not started.", port_name);
if (!destination_component.is_bound()) TTCN_error("Unbound component reference in the to clause of send operation.");
const TTCN_Logger::Severity log_sev = destination_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMSEND:TTCN_Logger::PORTEVENT_MCSEND;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_send(port_name, destination_component,
(TTCN_Logger::begin_event(log_sev, TRUE), TTCN_Logger::log_event_str(" @GPIOPinPort.GPIO_PIN_VALUE : "),
send_par.log(), TTCN_Logger::end_event_log2str()));
}
if (destination_component == SYSTEM_COMPREF) {
(void)get_default_destination();
outgoing_send(send_par);
}
else {
Text_Buf text_buf;
prepare_message(text_buf, "@GPIOPinPort.GPIO_PIN_VALUE");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__VALUE& send_par)
{
send(send_par, COMPONENT(get_default_destination()));
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__VALUE_template& send_par, const COMPONENT& destination_component)
{
const GPIO__PIN__VALUE& send_par_value = GPIO__PIN__VALUE(send_par.valueof());
send(send_par_value, destination_component);
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__VALUE_template& send_par)
{
const GPIO__PIN__VALUE& send_par_value = GPIO__PIN__VALUE(send_par.valueof());
send(send_par_value, COMPONENT(get_default_destination()));
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__STATUS& send_par, const COMPONENT& destination_component)
{
if (!is_started) TTCN_error("Sending a message on port %s, which is not started.", port_name);
if (!destination_component.is_bound()) TTCN_error("Unbound component reference in the to clause of send operation.");
const TTCN_Logger::Severity log_sev = destination_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMSEND:TTCN_Logger::PORTEVENT_MCSEND;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_send(port_name, destination_component,
(TTCN_Logger::begin_event(log_sev, TRUE), TTCN_Logger::log_event_str(" @GPIOPinPort.GPIO_PIN_STATUS : "),
send_par.log(), TTCN_Logger::end_event_log2str()));
}
if (destination_component == SYSTEM_COMPREF) {
(void)get_default_destination();
outgoing_send(send_par);
}
else {
Text_Buf text_buf;
prepare_message(text_buf, "@GPIOPinPort.GPIO_PIN_STATUS");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__STATUS& send_par)
{
send(send_par, COMPONENT(get_default_destination()));
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__STATUS_template& send_par, const COMPONENT& destination_component)
{
const GPIO__PIN__STATUS& send_par_value = GPIO__PIN__STATUS(send_par.valueof());
send(send_par_value, destination_component);
}

void GPIO__Pin__Port_BASE::send(const GPIO__PIN__STATUS_template& send_par)
{
const GPIO__PIN__STATUS& send_par_value = GPIO__PIN__STATUS(send_par.valueof());
send(send_par_value, COMPONENT(get_default_destination()));
}

alt_status GPIO__Pin__Port_BASE::receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_VALUE: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
case MESSAGE_1:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_STATUS: "),
my_head->message_1->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status GPIO__Pin__Port_BASE::check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_VALUE: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
case MESSAGE_1:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_STATUS: "),
my_head->message_1->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
return ALT_YES;
}
}

alt_status GPIO__Pin__Port_BASE::trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_VALUE: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
case MESSAGE_1:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_STATUS: "),
my_head->message_1->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status GPIO__Pin__Port_BASE::receive(const GPIO__PIN__VALUE_template& value_template, GPIO__PIN__VALUE *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @GPIOPinPort.GPIO_PIN_VALUE.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_VALUE : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status GPIO__Pin__Port_BASE::check_receive(const GPIO__PIN__VALUE_template& value_template, GPIO__PIN__VALUE *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Check-receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @GPIOPinPort.GPIO_PIN_VALUE.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_VALUE : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
return ALT_YES;
}
}

alt_status GPIO__Pin__Port_BASE::trigger(const GPIO__PIN__VALUE_template& value_template, GPIO__PIN__VALUE *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Trigger operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s will drop a message: Type of the first message in the queue is not @GPIOPinPort.GPIO_PIN_VALUE.", port_name);
remove_msg_queue_head();
return ALT_REPEAT;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_VALUE : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status GPIO__Pin__Port_BASE::receive(const GPIO__PIN__STATUS_template& value_template, GPIO__PIN__STATUS *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_1) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @GPIOPinPort.GPIO_PIN_STATUS.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_1)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_1),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_1;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_1),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_STATUS : "),
my_head->message_1->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status GPIO__Pin__Port_BASE::check_receive(const GPIO__PIN__STATUS_template& value_template, GPIO__PIN__STATUS *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Check-receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_1) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @GPIOPinPort.GPIO_PIN_STATUS.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_1)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_1),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_1;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_1),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_STATUS : "),
my_head->message_1->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
return ALT_YES;
}
}

alt_status GPIO__Pin__Port_BASE::trigger(const GPIO__PIN__STATUS_template& value_template, GPIO__PIN__STATUS *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Trigger operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else if (my_head->item_selection != MESSAGE_1) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s will drop a message: Type of the first message in the queue is not @GPIOPinPort.GPIO_PIN_STATUS.", port_name);
remove_msg_queue_head();
return ALT_REPEAT;
} else if (!value_template.match(*my_head->message_1)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_1),
 TTCN_Logger::end_event_log2str()));
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_1;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_1),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @GPIOPinPort.GPIO_PIN_STATUS : "),
my_head->message_1->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

void GPIO__Pin__Port_BASE::incoming_message(const GPIO__PIN__VALUE& incoming_par, component sender_component)
{
if (!is_started) TTCN_error("Port %s is not started but a message has arrived on it.", port_name);
msg_tail_count++;
if (TTCN_Logger::log_this_event(TTCN_Logger::PORTEVENT_MQUEUE)) {
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::enqueue__msg, port_name, sender_component, msg_tail_count,
CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(TTCN_Logger::PORTEVENT_MQUEUE, TRUE), TTCN_Logger::log_event_str(" @GPIOPinPort.GPIO_PIN_VALUE : "), incoming_par.log(), TTCN_Logger::end_event_log2str()));
}
msg_queue_item *new_item = new msg_queue_item;
new_item->item_selection = MESSAGE_0;
new_item->message_0 = new GPIO__PIN__VALUE(incoming_par);
new_item->sender_component = sender_component;
append_to_msg_queue(new_item);
}

void GPIO__Pin__Port_BASE::incoming_message(const GPIO__PIN__STATUS& incoming_par, component sender_component)
{
if (!is_started) TTCN_error("Port %s is not started but a message has arrived on it.", port_name);
msg_tail_count++;
if (TTCN_Logger::log_this_event(TTCN_Logger::PORTEVENT_MQUEUE)) {
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::enqueue__msg, port_name, sender_component, msg_tail_count,
CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(TTCN_Logger::PORTEVENT_MQUEUE, TRUE), TTCN_Logger::log_event_str(" @GPIOPinPort.GPIO_PIN_STATUS : "), incoming_par.log(), TTCN_Logger::end_event_log2str()));
}
msg_queue_item *new_item = new msg_queue_item;
new_item->item_selection = MESSAGE_1;
new_item->message_1 = new GPIO__PIN__STATUS(incoming_par);
new_item->sender_component = sender_component;
append_to_msg_queue(new_item);
}

boolean GPIO__Pin__Port_BASE::process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING&)
{
if (!strcmp(message_type, "@GPIOPinPort.GPIO_PIN_VALUE")) {
GPIO__PIN__VALUE incoming_par;
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return TRUE;
} else if (!strcmp(message_type, "@GPIOPinPort.GPIO_PIN_STATUS")) {
GPIO__PIN__STATUS incoming_par;
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return TRUE;
} else return FALSE;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("GPIOPinPort.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "GPIOPinPort");
{
static const char * const port_name = "gpio";
GPIO__Base_component_gpio.set_name(port_name);
}
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "GPIO_Base")) {
GPIO__Base_component_gpio.activate_port();
return TRUE;
} else return FALSE;
}


} /* end of namespace */
