// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LANGUAGE.hh"

namespace LANGUAGE {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x31, 0x1b, 0xe2, 0x3d, 0x96, 0x56, 0x67, 0xfc, 0x0f, 0xf4, 0xd1, 0x85, 0x9e, 0xe8, 0x9d, 0x99 };

/* Global variable definitions */

const TTCN_Typedescriptor_t& LANGUAGE__StaticTestConfiguration_descr_ = LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces_descr_;
// No XER for LANGUAGE__DynamicTestConfiguration
const TTCN_Typedescriptor_t LANGUAGE__DynamicTestConfiguration_descr_ = { "@LANGUAGE.LANGUAGE_DynamicTestConfiguration", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       LANGUAGE__LogicalTestConfiguration_TestName_xer_ = { {"TestName>\n", "TestName>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t LANGUAGE__LogicalTestConfiguration_TestName_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t LANGUAGE__LogicalTestConfiguration_TestName_descr_ = { "@LANGUAGE.LANGUAGE_LogicalTestConfiguration.TestName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &LANGUAGE__LogicalTestConfiguration_TestName_xer_, &LANGUAGE__LogicalTestConfiguration_TestName_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for LANGUAGE__LogicalTestConfiguration
const TTCN_Typedescriptor_t LANGUAGE__LogicalTestConfiguration_descr_ = { "@LANGUAGE.LANGUAGE_LogicalTestConfiguration", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
TTCN_Module module_object("LANGUAGE", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

void LANGUAGE__DynamicTestConfiguration::copy_value(const LANGUAGE__DynamicTestConfiguration& other_value)
{
switch (other_value.union_selection) {
case ALT_Sequence:
field_Sequence = new LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence(*other_value.field_Sequence);
break;
default:
TTCN_error("Assignment of an unbound union value of type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
union_selection = other_value.union_selection;
}

LANGUAGE__DynamicTestConfiguration::LANGUAGE__DynamicTestConfiguration()
{
union_selection = UNBOUND_VALUE;
}

LANGUAGE__DynamicTestConfiguration::LANGUAGE__DynamicTestConfiguration(const LANGUAGE__DynamicTestConfiguration& other_value)
: Base_Type(){
copy_value(other_value);
}

LANGUAGE__DynamicTestConfiguration::~LANGUAGE__DynamicTestConfiguration()
{
clean_up();
}

LANGUAGE__DynamicTestConfiguration& LANGUAGE__DynamicTestConfiguration::operator=(const LANGUAGE__DynamicTestConfiguration& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean LANGUAGE__DynamicTestConfiguration::operator==(const LANGUAGE__DynamicTestConfiguration& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_Sequence:
return *field_Sequence == *other_value.field_Sequence;
default:
return FALSE;
}
}

LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence& LANGUAGE__DynamicTestConfiguration::Sequence()
{
if (union_selection != ALT_Sequence) {
clean_up();
field_Sequence = new LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence;
union_selection = ALT_Sequence;
}
return *field_Sequence;
}

const LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence& LANGUAGE__DynamicTestConfiguration::Sequence() const
{
if (union_selection != ALT_Sequence) TTCN_error("Using non-selected field Sequence in a value of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
return *field_Sequence;
}

boolean LANGUAGE__DynamicTestConfiguration::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
return union_selection == checked_selection;
}

boolean LANGUAGE__DynamicTestConfiguration::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean LANGUAGE__DynamicTestConfiguration::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_Sequence: return field_Sequence->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void LANGUAGE__DynamicTestConfiguration::clean_up()
{
switch (union_selection) {
case ALT_Sequence:
  delete field_Sequence;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void LANGUAGE__DynamicTestConfiguration::log() const
{
switch (union_selection) {
case ALT_Sequence:
TTCN_Logger::log_event_str("{ Sequence := ");
field_Sequence->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void LANGUAGE__DynamicTestConfiguration::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr m_p = &param;
  if (m_p->get_type()==Module_Param::MP_Value_List && m_p->get_size()==0) return;
  if (m_p->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "Sequence")) {
    Sequence().set_param(*mp_last);
    if (!Sequence().is_bound()) clean_up();
    return;
  }
  mp_last->error("Field %s does not exist in type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.", mp_last->get_id()->get_name());
}

void LANGUAGE__DynamicTestConfiguration::set_implicit_omit()
{
switch (union_selection) {
case ALT_Sequence:
field_Sequence->set_implicit_omit(); break;
default: break;
}
}

void LANGUAGE__DynamicTestConfiguration::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_Sequence:
field_Sequence->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
}

void LANGUAGE__DynamicTestConfiguration::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_Sequence:
Sequence().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
}

void LANGUAGE__DynamicTestConfiguration_template::copy_value(const LANGUAGE__DynamicTestConfiguration& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
single_value.field_Sequence = new LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template(other_value.Sequence());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
set_selection(SPECIFIC_VALUE);
}

void LANGUAGE__DynamicTestConfiguration_template::copy_template(const LANGUAGE__DynamicTestConfiguration_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
single_value.field_Sequence = new LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template(*other_value.single_value.field_Sequence);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new LANGUAGE__DynamicTestConfiguration_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
set_selection(other_value);
}

LANGUAGE__DynamicTestConfiguration_template::LANGUAGE__DynamicTestConfiguration_template()
{
}

LANGUAGE__DynamicTestConfiguration_template::LANGUAGE__DynamicTestConfiguration_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

LANGUAGE__DynamicTestConfiguration_template::LANGUAGE__DynamicTestConfiguration_template(const LANGUAGE__DynamicTestConfiguration& other_value)
{
copy_value(other_value);
}

LANGUAGE__DynamicTestConfiguration_template::LANGUAGE__DynamicTestConfiguration_template(const OPTIONAL<LANGUAGE__DynamicTestConfiguration>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__DynamicTestConfiguration&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration from an unbound optional field.");
}
}

LANGUAGE__DynamicTestConfiguration_template::LANGUAGE__DynamicTestConfiguration_template(const LANGUAGE__DynamicTestConfiguration_template& other_value)
: Base_Template(){
copy_template(other_value);
}

LANGUAGE__DynamicTestConfiguration_template::~LANGUAGE__DynamicTestConfiguration_template()
{
clean_up();
}

void LANGUAGE__DynamicTestConfiguration_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
delete single_value.field_Sequence;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

LANGUAGE__DynamicTestConfiguration_template& LANGUAGE__DynamicTestConfiguration_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

LANGUAGE__DynamicTestConfiguration_template& LANGUAGE__DynamicTestConfiguration_template::operator=(const LANGUAGE__DynamicTestConfiguration& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

LANGUAGE__DynamicTestConfiguration_template& LANGUAGE__DynamicTestConfiguration_template::operator=(const OPTIONAL<LANGUAGE__DynamicTestConfiguration>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__DynamicTestConfiguration&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
return *this;
}

LANGUAGE__DynamicTestConfiguration_template& LANGUAGE__DynamicTestConfiguration_template::operator=(const LANGUAGE__DynamicTestConfiguration_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean LANGUAGE__DynamicTestConfiguration_template::match(const LANGUAGE__DynamicTestConfiguration& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
LANGUAGE__DynamicTestConfiguration::union_selection_type value_selection = other_value.get_selection();
if (value_selection == LANGUAGE__DynamicTestConfiguration::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
return single_value.field_Sequence->match(other_value.Sequence(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
return FALSE;
}

boolean LANGUAGE__DynamicTestConfiguration_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
switch (single_value.union_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
return single_value.field_Sequence->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
}

LANGUAGE__DynamicTestConfiguration LANGUAGE__DynamicTestConfiguration_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
LANGUAGE__DynamicTestConfiguration ret_val;
switch (single_value.union_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
ret_val.Sequence() = single_value.field_Sequence->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
return ret_val;
}

LANGUAGE__DynamicTestConfiguration_template& LANGUAGE__DynamicTestConfiguration_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
return value_list.list_value[list_index];
}
void LANGUAGE__DynamicTestConfiguration_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new LANGUAGE__DynamicTestConfiguration_template[list_length];
}

LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template& LANGUAGE__DynamicTestConfiguration_template::Sequence()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != LANGUAGE__DynamicTestConfiguration::ALT_Sequence) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_Sequence = new LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template(ANY_VALUE);
else single_value.field_Sequence = new LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template;
single_value.union_selection = LANGUAGE__DynamicTestConfiguration::ALT_Sequence;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_Sequence;
}

const LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template& LANGUAGE__DynamicTestConfiguration_template::Sequence() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field Sequence in a non-specific template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
if (single_value.union_selection != LANGUAGE__DynamicTestConfiguration::ALT_Sequence) TTCN_error("Accessing non-selected field Sequence in a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
return *single_value.field_Sequence;
}

boolean LANGUAGE__DynamicTestConfiguration_template::ischosen(LANGUAGE__DynamicTestConfiguration::union_selection_type checked_selection) const
{
if (checked_selection == LANGUAGE__DynamicTestConfiguration::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == LANGUAGE__DynamicTestConfiguration::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
for (unsigned int list_count = 1; ret_val == TRUE && list_count < value_list.n_values; list_count++) {
ret_val = value_list.list_value[list_count].ischosen(checked_selection);
}
return ret_val;
}
default:
return FALSE;
}
return FALSE;
}

void LANGUAGE__DynamicTestConfiguration_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
TTCN_Logger::log_event_str("{ Sequence := ");
single_value.field_Sequence->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void LANGUAGE__DynamicTestConfiguration_template::log_match(const LANGUAGE__DynamicTestConfiguration& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".Sequence");
single_value.field_Sequence->log_match(match_value.Sequence(), legacy);
} else {
TTCN_Logger::log_event_str("{ Sequence := ");
single_value.field_Sequence->log_match(match_value.Sequence(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void LANGUAGE__DynamicTestConfiguration_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
single_value.field_Sequence->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
}

void LANGUAGE__DynamicTestConfiguration_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = LANGUAGE__DynamicTestConfiguration::UNBOUND_VALUE;
LANGUAGE__DynamicTestConfiguration::union_selection_type new_selection = (LANGUAGE__DynamicTestConfiguration::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
single_value.field_Sequence = new LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence_template;
single_value.field_Sequence->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new LANGUAGE__DynamicTestConfiguration_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
}

boolean LANGUAGE__DynamicTestConfiguration_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean LANGUAGE__DynamicTestConfiguration_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void LANGUAGE__DynamicTestConfiguration_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@LANGUAGE.LANGUAGE_DynamicTestConfiguration'");
    }
    if (strcmp("Sequence", param_field) == 0) {
      Sequence().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@LANGUAGE.LANGUAGE_DynamicTestConfiguration'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    LANGUAGE__DynamicTestConfiguration_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (m_p->get_size()==0) break;
    param.type_error("union template", "@LANGUAGE.LANGUAGE_DynamicTestConfiguration");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "Sequence")) {
      Sequence().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@LANGUAGE.LANGUAGE_DynamicTestConfiguration");
  }
  is_ifpresent = param.get_ifpresent();
}

void LANGUAGE__DynamicTestConfiguration_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case LANGUAGE__DynamicTestConfiguration::ALT_Sequence:
single_value.field_Sequence->check_restriction(t_res, t_name ? t_name : "@LANGUAGE.LANGUAGE_DynamicTestConfiguration");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @LANGUAGE.LANGUAGE_DynamicTestConfiguration.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LANGUAGE.LANGUAGE_DynamicTestConfiguration");
}

LANGUAGE__LogicalTestConfiguration::LANGUAGE__LogicalTestConfiguration()
{
}

LANGUAGE__LogicalTestConfiguration::LANGUAGE__LogicalTestConfiguration(const CHARSTRING& par_TestName,
    const LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces& par_StaticTestConfiguration,
    const LANGUAGE__DynamicTestConfiguration& par_DynamicTestConfiguration)
  :   field_TestName(par_TestName),
  field_StaticTestConfiguration(par_StaticTestConfiguration),
  field_DynamicTestConfiguration(par_DynamicTestConfiguration)
{
}

LANGUAGE__LogicalTestConfiguration::LANGUAGE__LogicalTestConfiguration(const LANGUAGE__LogicalTestConfiguration& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
if (other_value.TestName().is_bound()) field_TestName = other_value.TestName();
else field_TestName.clean_up();
if (other_value.StaticTestConfiguration().is_bound()) field_StaticTestConfiguration = other_value.StaticTestConfiguration();
else field_StaticTestConfiguration.clean_up();
if (other_value.DynamicTestConfiguration().is_bound()) field_DynamicTestConfiguration = other_value.DynamicTestConfiguration();
else field_DynamicTestConfiguration.clean_up();
}

void LANGUAGE__LogicalTestConfiguration::clean_up()
{
field_TestName.clean_up();
field_StaticTestConfiguration.clean_up();
field_DynamicTestConfiguration.clean_up();
}

LANGUAGE__LogicalTestConfiguration& LANGUAGE__LogicalTestConfiguration::operator=(const LANGUAGE__LogicalTestConfiguration& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
  if (other_value.TestName().is_bound()) field_TestName = other_value.TestName();
  else field_TestName.clean_up();
  if (other_value.StaticTestConfiguration().is_bound()) field_StaticTestConfiguration = other_value.StaticTestConfiguration();
  else field_StaticTestConfiguration.clean_up();
  if (other_value.DynamicTestConfiguration().is_bound()) field_DynamicTestConfiguration = other_value.DynamicTestConfiguration();
  else field_DynamicTestConfiguration.clean_up();
}
return *this;
}

boolean LANGUAGE__LogicalTestConfiguration::operator==(const LANGUAGE__LogicalTestConfiguration& other_value) const
{
return field_TestName==other_value.field_TestName
  && field_StaticTestConfiguration==other_value.field_StaticTestConfiguration
  && field_DynamicTestConfiguration==other_value.field_DynamicTestConfiguration;
}

boolean LANGUAGE__LogicalTestConfiguration::is_bound() const
{
if(field_TestName.is_bound()) return TRUE;
if(field_StaticTestConfiguration.is_bound()) return TRUE;
if(field_DynamicTestConfiguration.is_bound()) return TRUE;
return FALSE;
}
boolean LANGUAGE__LogicalTestConfiguration::is_value() const
{
if(!field_TestName.is_value()) return FALSE;
if(!field_StaticTestConfiguration.is_value()) return FALSE;
if(!field_DynamicTestConfiguration.is_value()) return FALSE;
return TRUE;
}
void LANGUAGE__LogicalTestConfiguration::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ TestName := ");
field_TestName.log();
TTCN_Logger::log_event_str(", StaticTestConfiguration := ");
field_StaticTestConfiguration.log();
TTCN_Logger::log_event_str(", DynamicTestConfiguration := ");
field_DynamicTestConfiguration.log();
TTCN_Logger::log_event_str(" }");
}

void LANGUAGE__LogicalTestConfiguration::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) TestName().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) StaticTestConfiguration().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) DynamicTestConfiguration().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "TestName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          TestName().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "StaticTestConfiguration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          StaticTestConfiguration().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "DynamicTestConfiguration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          DynamicTestConfiguration().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @LANGUAGE.LANGUAGE_LogicalTestConfiguration: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LANGUAGE.LANGUAGE_LogicalTestConfiguration");
  }
}

void LANGUAGE__LogicalTestConfiguration::set_implicit_omit()
{
if (TestName().is_bound()) TestName().set_implicit_omit();
if (StaticTestConfiguration().is_bound()) StaticTestConfiguration().set_implicit_omit();
if (DynamicTestConfiguration().is_bound()) DynamicTestConfiguration().set_implicit_omit();
}

void LANGUAGE__LogicalTestConfiguration::encode_text(Text_Buf& text_buf) const
{
field_TestName.encode_text(text_buf);
field_StaticTestConfiguration.encode_text(text_buf);
field_DynamicTestConfiguration.encode_text(text_buf);
}

void LANGUAGE__LogicalTestConfiguration::decode_text(Text_Buf& text_buf)
{
field_TestName.decode_text(text_buf);
field_StaticTestConfiguration.decode_text(text_buf);
field_DynamicTestConfiguration.decode_text(text_buf);
}

struct LANGUAGE__LogicalTestConfiguration_template::single_value_struct {
CHARSTRING_template field_TestName;
LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces_template field_StaticTestConfiguration;
LANGUAGE__DynamicTestConfiguration_template field_DynamicTestConfiguration;
};

void LANGUAGE__LogicalTestConfiguration_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_TestName = ANY_VALUE;
single_value->field_StaticTestConfiguration = ANY_VALUE;
single_value->field_DynamicTestConfiguration = ANY_VALUE;
}
}
}

void LANGUAGE__LogicalTestConfiguration_template::copy_value(const LANGUAGE__LogicalTestConfiguration& other_value)
{
single_value = new single_value_struct;
if (other_value.TestName().is_bound()) {
  single_value->field_TestName = other_value.TestName();
} else {
  single_value->field_TestName.clean_up();
}
if (other_value.StaticTestConfiguration().is_bound()) {
  single_value->field_StaticTestConfiguration = other_value.StaticTestConfiguration();
} else {
  single_value->field_StaticTestConfiguration.clean_up();
}
if (other_value.DynamicTestConfiguration().is_bound()) {
  single_value->field_DynamicTestConfiguration = other_value.DynamicTestConfiguration();
} else {
  single_value->field_DynamicTestConfiguration.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void LANGUAGE__LogicalTestConfiguration_template::copy_template(const LANGUAGE__LogicalTestConfiguration_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.TestName().get_selection()) {
single_value->field_TestName = other_value.TestName();
} else {
single_value->field_TestName.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.StaticTestConfiguration().get_selection()) {
single_value->field_StaticTestConfiguration = other_value.StaticTestConfiguration();
} else {
single_value->field_StaticTestConfiguration.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.DynamicTestConfiguration().get_selection()) {
single_value->field_DynamicTestConfiguration = other_value.DynamicTestConfiguration();
} else {
single_value->field_DynamicTestConfiguration.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new LANGUAGE__LogicalTestConfiguration_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
break;
}
set_selection(other_value);
}

LANGUAGE__LogicalTestConfiguration_template::LANGUAGE__LogicalTestConfiguration_template()
{
}

LANGUAGE__LogicalTestConfiguration_template::LANGUAGE__LogicalTestConfiguration_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

LANGUAGE__LogicalTestConfiguration_template::LANGUAGE__LogicalTestConfiguration_template(const LANGUAGE__LogicalTestConfiguration& other_value)
{
copy_value(other_value);
}

LANGUAGE__LogicalTestConfiguration_template::LANGUAGE__LogicalTestConfiguration_template(const OPTIONAL<LANGUAGE__LogicalTestConfiguration>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__LogicalTestConfiguration&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration from an unbound optional field.");
}
}

LANGUAGE__LogicalTestConfiguration_template::LANGUAGE__LogicalTestConfiguration_template(const LANGUAGE__LogicalTestConfiguration_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

LANGUAGE__LogicalTestConfiguration_template::~LANGUAGE__LogicalTestConfiguration_template()
{
clean_up();
}

LANGUAGE__LogicalTestConfiguration_template& LANGUAGE__LogicalTestConfiguration_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

LANGUAGE__LogicalTestConfiguration_template& LANGUAGE__LogicalTestConfiguration_template::operator=(const LANGUAGE__LogicalTestConfiguration& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

LANGUAGE__LogicalTestConfiguration_template& LANGUAGE__LogicalTestConfiguration_template::operator=(const OPTIONAL<LANGUAGE__LogicalTestConfiguration>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const LANGUAGE__LogicalTestConfiguration&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
}
return *this;
}

LANGUAGE__LogicalTestConfiguration_template& LANGUAGE__LogicalTestConfiguration_template::operator=(const LANGUAGE__LogicalTestConfiguration_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean LANGUAGE__LogicalTestConfiguration_template::match(const LANGUAGE__LogicalTestConfiguration& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.TestName().is_bound()) return FALSE;
if(!single_value->field_TestName.match(other_value.TestName(), legacy))return FALSE;
if(!other_value.StaticTestConfiguration().is_bound()) return FALSE;
if(!single_value->field_StaticTestConfiguration.match(other_value.StaticTestConfiguration(), legacy))return FALSE;
if(!other_value.DynamicTestConfiguration().is_bound()) return FALSE;
if(!single_value->field_DynamicTestConfiguration.match(other_value.DynamicTestConfiguration(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
}
return FALSE;
}

boolean LANGUAGE__LogicalTestConfiguration_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_TestName.is_bound()) return TRUE;
if (single_value->field_StaticTestConfiguration.is_bound()) return TRUE;
if (single_value->field_DynamicTestConfiguration.is_bound()) return TRUE;
return FALSE;
}

boolean LANGUAGE__LogicalTestConfiguration_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_TestName.is_value()) return FALSE;
if (!single_value->field_StaticTestConfiguration.is_value()) return FALSE;
if (!single_value->field_DynamicTestConfiguration.is_value()) return FALSE;
return TRUE;
}

void LANGUAGE__LogicalTestConfiguration_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

LANGUAGE__LogicalTestConfiguration LANGUAGE__LogicalTestConfiguration_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
LANGUAGE__LogicalTestConfiguration ret_val;
if (single_value->field_TestName.is_bound()) {
ret_val.TestName() = single_value->field_TestName.valueof();
}
if (single_value->field_StaticTestConfiguration.is_bound()) {
ret_val.StaticTestConfiguration() = single_value->field_StaticTestConfiguration.valueof();
}
if (single_value->field_DynamicTestConfiguration.is_bound()) {
ret_val.DynamicTestConfiguration() = single_value->field_DynamicTestConfiguration.valueof();
}
return ret_val;
}

void LANGUAGE__LogicalTestConfiguration_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new LANGUAGE__LogicalTestConfiguration_template[list_length];
}

LANGUAGE__LogicalTestConfiguration_template& LANGUAGE__LogicalTestConfiguration_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
return value_list.list_value[list_index];
}

CHARSTRING_template& LANGUAGE__LogicalTestConfiguration_template::TestName()
{
set_specific();
return single_value->field_TestName;
}

const CHARSTRING_template& LANGUAGE__LogicalTestConfiguration_template::TestName() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field TestName of a non-specific template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
return single_value->field_TestName;
}

LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces_template& LANGUAGE__LogicalTestConfiguration_template::StaticTestConfiguration()
{
set_specific();
return single_value->field_StaticTestConfiguration;
}

const LANGUAGE__STATIC::LANGUAGE__STATIC__Interfaces_template& LANGUAGE__LogicalTestConfiguration_template::StaticTestConfiguration() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field StaticTestConfiguration of a non-specific template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
return single_value->field_StaticTestConfiguration;
}

LANGUAGE__DynamicTestConfiguration_template& LANGUAGE__LogicalTestConfiguration_template::DynamicTestConfiguration()
{
set_specific();
return single_value->field_DynamicTestConfiguration;
}

const LANGUAGE__DynamicTestConfiguration_template& LANGUAGE__LogicalTestConfiguration_template::DynamicTestConfiguration() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field DynamicTestConfiguration of a non-specific template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
return single_value->field_DynamicTestConfiguration;
}

int LANGUAGE__LogicalTestConfiguration_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
  }
  return 0;
}

void LANGUAGE__LogicalTestConfiguration_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ TestName := ");
single_value->field_TestName.log();
TTCN_Logger::log_event_str(", StaticTestConfiguration := ");
single_value->field_StaticTestConfiguration.log();
TTCN_Logger::log_event_str(", DynamicTestConfiguration := ");
single_value->field_DynamicTestConfiguration.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void LANGUAGE__LogicalTestConfiguration_template::log_match(const LANGUAGE__LogicalTestConfiguration& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_TestName.match(match_value.TestName(), legacy)){
TTCN_Logger::log_logmatch_info(".TestName");
single_value->field_TestName.log_match(match_value.TestName(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_StaticTestConfiguration.match(match_value.StaticTestConfiguration(), legacy)){
TTCN_Logger::log_logmatch_info(".StaticTestConfiguration");
single_value->field_StaticTestConfiguration.log_match(match_value.StaticTestConfiguration(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_DynamicTestConfiguration.match(match_value.DynamicTestConfiguration(), legacy)){
TTCN_Logger::log_logmatch_info(".DynamicTestConfiguration");
single_value->field_DynamicTestConfiguration.log_match(match_value.DynamicTestConfiguration(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ TestName := ");
single_value->field_TestName.log_match(match_value.TestName(), legacy);
TTCN_Logger::log_event_str(", StaticTestConfiguration := ");
single_value->field_StaticTestConfiguration.log_match(match_value.StaticTestConfiguration(), legacy);
TTCN_Logger::log_event_str(", DynamicTestConfiguration := ");
single_value->field_DynamicTestConfiguration.log_match(match_value.DynamicTestConfiguration(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void LANGUAGE__LogicalTestConfiguration_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_TestName.encode_text(text_buf);
single_value->field_StaticTestConfiguration.encode_text(text_buf);
single_value->field_DynamicTestConfiguration.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
}
}

void LANGUAGE__LogicalTestConfiguration_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_TestName.decode_text(text_buf);
single_value->field_StaticTestConfiguration.decode_text(text_buf);
single_value->field_DynamicTestConfiguration.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new LANGUAGE__LogicalTestConfiguration_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration.");
}
}

void LANGUAGE__LogicalTestConfiguration_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    LANGUAGE__LogicalTestConfiguration_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @LANGUAGE.LANGUAGE_LogicalTestConfiguration has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) TestName().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) StaticTestConfiguration().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) DynamicTestConfiguration().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "TestName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          TestName().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "StaticTestConfiguration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          StaticTestConfiguration().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "DynamicTestConfiguration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          DynamicTestConfiguration().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @LANGUAGE.LANGUAGE_LogicalTestConfiguration: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LANGUAGE.LANGUAGE_LogicalTestConfiguration");
  }
  is_ifpresent = param.get_ifpresent();
}

void LANGUAGE__LogicalTestConfiguration_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_TestName.check_restriction(t_res, t_name ? t_name : "@LANGUAGE.LANGUAGE_LogicalTestConfiguration");
single_value->field_StaticTestConfiguration.check_restriction(t_res, t_name ? t_name : "@LANGUAGE.LANGUAGE_LogicalTestConfiguration");
single_value->field_DynamicTestConfiguration.check_restriction(t_res, t_name ? t_name : "@LANGUAGE.LANGUAGE_LogicalTestConfiguration");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LANGUAGE.LANGUAGE_LogicalTestConfiguration");
}

boolean LANGUAGE__LogicalTestConfiguration_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean LANGUAGE__LogicalTestConfiguration_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LANGUAGE.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LANGUAGE");
LANGUAGE__STATIC::module_object.pre_init_module();
LANGUAGE__DYNAMIC::module_object.pre_init_module();
}

static void post_init_module()
{
TTCN_Location current_location("LANGUAGE.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LANGUAGE");
LANGUAGE__STATIC::module_object.post_init_module();
LANGUAGE__DYNAMIC::module_object.post_init_module();
}


} /* end of namespace */
