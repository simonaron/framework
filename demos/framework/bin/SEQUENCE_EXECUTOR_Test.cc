// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "SEQUENCE_EXECUTOR_Test.hh"

namespace SEQUENCE__EXECUTOR__Test {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static void module_control_part();

/* Literal string constants */

static const CHARSTRING cs_0(6, "GPIO 1"),
cs_10(6, "GPIO 2"),
cs_11(6, "GPIO 3"),
cs_8(35, "GPIO TEST: Expected value received!"),
cs_2(4, "HIGH"),
cs_9(3, "LOW"),
cs_4(33, "SEQUENCE_EXECUTOR: Delay timeout!"),
cs_3(32, "SEQUENCE_EXECUTOR: Step started!"),
cs_5(46, "SEQUENCE_EXECUTOR: Step successfully finished!"),
cs_6(32, "SEQUENCE_EXECUTOR: Step timeout!"),
cs_7(15, "Value received!"),
cs_1(4, "send");
static const unsigned char module_checksum[] = { 0xdf, 0xa5, 0x8f, 0xc0, 0x0a, 0x8c, 0xda, 0xe9, 0x87, 0x0e, 0x66, 0x0f, 0xa3, 0x0b, 0xfc, 0x9f };

/* Global variable definitions */

const TTCN_Typedescriptor_t& CT__TEST__SEQUENCE__EXECUTOR_descr_ = COMPONENT_descr_;
TTCN_Module module_object("SEQUENCE_EXECUTOR_Test", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, init_comp_type, NULL, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

verdicttype testcase_tc__SEQUENCE__EXECUTOR__UnitTest____SequenceExecutor____run__step__successfully(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("SEQUENCE_EXECUTOR_Test.ttcn", 14, TTCN_Location::LOCATION_TESTCASE, "tc_SEQUENCE_EXECUTOR_UnitTest__SequenceExecutor__run_step_successfully");
try {
TTCN_Runtime::begin_testcase("SEQUENCE_EXECUTOR_Test", "tc_SEQUENCE_EXECUTOR_UnitTest__SequenceExecutor__run_step_successfully", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", has_timer, timer_value);
current_location.update_lineno(15);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 15 */
TEST__API__Functions::f__TEST__API__UnitTest__Start();
current_location.update_lineno(17);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 17 */
COMPONENT device(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(18);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 18 */
COMPONENT builder(TTCN_Runtime::create_component("GPIO_TaskBuilder", "CT_GPIO_TaskBuilder", NULL, NULL, TRUE));
current_location.update_lineno(19);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 19 */
COMPONENT store(TTCN_Runtime::create_component("INTERFACE_STORE", "CT_INTERFACE_STORE_InterfaceStore", NULL, NULL, TRUE));
current_location.update_lineno(20);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 20 */
COMPONENT executor(TTCN_Runtime::create_component("SEQUENCE_EXECUTOR", "CT_SEQUENCE_EXECUTOR_SequenceExecutor", NULL, NULL, TRUE));
current_location.update_lineno(23);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 23 */
INTERFACE__STORE::start_f__INTERFACE__STORE__InterfaceStore(store);
current_location.update_lineno(26);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 26 */
TTCN_Runtime::connect_port(self, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.get_name(), store, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.get_name());
current_location.update_lineno(27);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 27 */
{
INTERFACE__STORE::RT__INTERFACE__STORE__InterfaceElement_template tmp_0;
tmp_0.Name() = cs_0;
tmp_0.Device().UV__GPIO() = device;
tmp_0.Controller() = OMIT_VALUE;
INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.send(tmp_0);
}
current_location.update_lineno(29);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 29 */
GPIO__TaskBuilder::start_f__GPIO__TaskBuilder(builder, store);
current_location.update_lineno(31);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 31 */
TEST__API__Functions::f__TEST__API__Watcher__watch(executor);
current_location.update_lineno(34);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 34 */
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence tmp_1;
tmp_1.set_size(1);
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_2 = tmp_1[0].InterfaceAction();
tmp_2.InterfaceName() = cs_0;
tmp_2.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_3 = tmp_2.Parameters();
tmp_3.set_size(1);
tmp_3[0] = cs_2;
}
tmp_2.Delay() = 0.0;
tmp_2.Timeout() = 5.0e-1;
}
SEQUENCE__EXECUTOR::start_f__SEQUENCE__EXECUTOR__SequenceExecutor(executor, builder, tmp_1);
}
current_location.update_lineno(41);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 41 */
GPIO__Functions::start_f__GPIO__Device__receiveValue(device);
current_location.update_lineno(43);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 43 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_3, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(44);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 44 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_4, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(45);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 45 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_5, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(47);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 47 */
TEST__API__Functions::f__TEST__API__UnitTest__Finished();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_SEQUENCE_EXECUTOR_UnitTest__SequenceExecutor__run_step_successfully was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__SEQUENCE__EXECUTOR__UnitTest____SequenceExecutor____run__step__timeout(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("SEQUENCE_EXECUTOR_Test.ttcn", 50, TTCN_Location::LOCATION_TESTCASE, "tc_SEQUENCE_EXECUTOR_UnitTest__SequenceExecutor__run_step_timeout");
try {
TTCN_Runtime::begin_testcase("SEQUENCE_EXECUTOR_Test", "tc_SEQUENCE_EXECUTOR_UnitTest__SequenceExecutor__run_step_timeout", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", has_timer, timer_value);
current_location.update_lineno(51);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 51 */
TEST__API__Functions::f__TEST__API__UnitTest__Start();
current_location.update_lineno(53);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 53 */
COMPONENT device(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(54);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 54 */
COMPONENT builder(TTCN_Runtime::create_component("GPIO_TaskBuilder", "CT_GPIO_TaskBuilder", NULL, NULL, TRUE));
current_location.update_lineno(55);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 55 */
COMPONENT store(TTCN_Runtime::create_component("INTERFACE_STORE", "CT_INTERFACE_STORE_InterfaceStore", NULL, NULL, TRUE));
current_location.update_lineno(56);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 56 */
COMPONENT executor(TTCN_Runtime::create_component("SEQUENCE_EXECUTOR", "CT_SEQUENCE_EXECUTOR_SequenceExecutor", NULL, NULL, TRUE));
current_location.update_lineno(59);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 59 */
INTERFACE__STORE::start_f__INTERFACE__STORE__InterfaceStore(store);
current_location.update_lineno(62);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 62 */
TTCN_Runtime::connect_port(self, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.get_name(), store, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.get_name());
current_location.update_lineno(63);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 63 */
{
INTERFACE__STORE::RT__INTERFACE__STORE__InterfaceElement_template tmp_4;
tmp_4.Name() = cs_0;
tmp_4.Device().UV__GPIO() = device;
tmp_4.Controller() = OMIT_VALUE;
INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.send(tmp_4);
}
current_location.update_lineno(65);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 65 */
GPIO__TaskBuilder::start_f__GPIO__TaskBuilder(builder, store);
current_location.update_lineno(67);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 67 */
TEST__API__Functions::f__TEST__API__Watcher__watch(executor);
current_location.update_lineno(70);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 70 */
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence tmp_5;
tmp_5.set_size(1);
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_6 = tmp_5[0].InterfaceAction();
tmp_6.InterfaceName() = cs_0;
tmp_6.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_7 = tmp_6.Parameters();
tmp_7.set_size(1);
tmp_7[0] = cs_2;
}
tmp_6.Delay() = 2.0e-1;
tmp_6.Timeout() = 1.0e-1;
}
SEQUENCE__EXECUTOR::start_f__SEQUENCE__EXECUTOR__SequenceExecutor(executor, builder, tmp_5);
}
current_location.update_lineno(77);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 77 */
GPIO__Functions::start_f__GPIO__Device__receiveValue(device);
current_location.update_lineno(79);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 79 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_3, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(80);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 80 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(FAIL, cs_6, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(82);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 82 */
TEST__API__Functions::f__TEST__API__UnitTest__Finished();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_SEQUENCE_EXECUTOR_UnitTest__SequenceExecutor__run_step_timeout was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__SEQUENCE__EXECUTOR__SystemTest____SequenceExecutor____one__device__one__message(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("SEQUENCE_EXECUTOR_Test.ttcn", 85, TTCN_Location::LOCATION_TESTCASE, "tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__one_device_one_message");
try {
TTCN_Runtime::begin_testcase("SEQUENCE_EXECUTOR_Test", "tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__one_device_one_message", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", has_timer, timer_value);
current_location.update_lineno(86);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 86 */
TEST__API__Functions::f__TEST__API__UnitTest__Start();
current_location.update_lineno(88);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 88 */
COMPONENT device(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(89);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 89 */
COMPONENT builder(TTCN_Runtime::create_component("GPIO_TaskBuilder", "CT_GPIO_TaskBuilder", NULL, NULL, TRUE));
current_location.update_lineno(90);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 90 */
COMPONENT store(TTCN_Runtime::create_component("INTERFACE_STORE", "CT_INTERFACE_STORE_InterfaceStore", NULL, NULL, TRUE));
current_location.update_lineno(91);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 91 */
COMPONENT executor(TTCN_Runtime::create_component("SEQUENCE_EXECUTOR", "CT_SEQUENCE_EXECUTOR_SequenceExecutor", NULL, NULL, TRUE));
current_location.update_lineno(94);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 94 */
INTERFACE__STORE::start_f__INTERFACE__STORE__InterfaceStore(store);
current_location.update_lineno(97);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 97 */
TTCN_Runtime::connect_port(self, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.get_name(), store, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.get_name());
current_location.update_lineno(98);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 98 */
{
INTERFACE__STORE::RT__INTERFACE__STORE__InterfaceElement_template tmp_8;
tmp_8.Name() = cs_0;
tmp_8.Device().UV__GPIO() = device;
tmp_8.Controller() = OMIT_VALUE;
INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.send(tmp_8);
}
current_location.update_lineno(100);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 100 */
GPIO__TaskBuilder::start_f__GPIO__TaskBuilder(builder, store);
current_location.update_lineno(102);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 102 */
TEST__API__Functions::f__TEST__API__Watcher__watch(device);
current_location.update_lineno(105);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 105 */
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence tmp_9;
tmp_9.set_size(1);
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_10 = tmp_9[0].InterfaceAction();
tmp_10.InterfaceName() = cs_0;
tmp_10.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_11 = tmp_10.Parameters();
tmp_11.set_size(1);
tmp_11[0] = cs_2;
}
tmp_10.Delay() = 0.0;
tmp_10.Timeout() = 5.0e-1;
}
SEQUENCE__EXECUTOR::start_f__SEQUENCE__EXECUTOR__SequenceExecutor(executor, builder, tmp_9);
}
current_location.update_lineno(112);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 112 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(114);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 114 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(115);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 115 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(117);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 117 */
{
tmp_12:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = executor.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_12;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_12;
}
current_location.update_lineno(117);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 117 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 117.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(119);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 119 */
TEST__API__Functions::f__TEST__API__UnitTest__Finished();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__one_device_one_message was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__SEQUENCE__EXECUTOR__SystemTest____SequenceExecutor____one__device__more__message(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("SEQUENCE_EXECUTOR_Test.ttcn", 122, TTCN_Location::LOCATION_TESTCASE, "tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__one_device_more_message");
try {
TTCN_Runtime::begin_testcase("SEQUENCE_EXECUTOR_Test", "tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__one_device_more_message", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", has_timer, timer_value);
current_location.update_lineno(123);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 123 */
TEST__API__Functions::f__TEST__API__UnitTest__Start();
current_location.update_lineno(125);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 125 */
COMPONENT device(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(126);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 126 */
COMPONENT builder(TTCN_Runtime::create_component("GPIO_TaskBuilder", "CT_GPIO_TaskBuilder", NULL, NULL, TRUE));
current_location.update_lineno(127);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 127 */
COMPONENT store(TTCN_Runtime::create_component("INTERFACE_STORE", "CT_INTERFACE_STORE_InterfaceStore", NULL, NULL, TRUE));
current_location.update_lineno(128);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 128 */
COMPONENT executor(TTCN_Runtime::create_component("SEQUENCE_EXECUTOR", "CT_SEQUENCE_EXECUTOR_SequenceExecutor", NULL, NULL, TRUE));
current_location.update_lineno(131);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 131 */
INTERFACE__STORE::start_f__INTERFACE__STORE__InterfaceStore(store);
current_location.update_lineno(134);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 134 */
TTCN_Runtime::connect_port(self, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.get_name(), store, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.get_name());
current_location.update_lineno(135);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 135 */
{
INTERFACE__STORE::RT__INTERFACE__STORE__InterfaceElement_template tmp_13;
tmp_13.Name() = cs_0;
tmp_13.Device().UV__GPIO() = device;
tmp_13.Controller() = OMIT_VALUE;
INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.send(tmp_13);
}
current_location.update_lineno(137);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 137 */
GPIO__TaskBuilder::start_f__GPIO__TaskBuilder(builder, store);
current_location.update_lineno(139);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 139 */
TEST__API__Functions::f__TEST__API__Watcher__watch(device);
current_location.update_lineno(142);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 142 */
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence tmp_14;
tmp_14.set_size(3);
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_15 = tmp_14[0].InterfaceAction();
tmp_15.InterfaceName() = cs_0;
tmp_15.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_16 = tmp_15.Parameters();
tmp_16.set_size(1);
tmp_16[0] = cs_2;
}
tmp_15.Delay() = 0.0;
tmp_15.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_17 = tmp_14[1].InterfaceAction();
tmp_17.InterfaceName() = cs_0;
tmp_17.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_18 = tmp_17.Parameters();
tmp_18.set_size(1);
tmp_18[0] = cs_9;
}
tmp_17.Delay() = 0.0;
tmp_17.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_19 = tmp_14[2].InterfaceAction();
tmp_19.InterfaceName() = cs_0;
tmp_19.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_20 = tmp_19.Parameters();
tmp_20.set_size(1);
tmp_20[0] = cs_2;
}
tmp_19.Delay() = 0.0;
tmp_19.Timeout() = 5.0e-1;
}
SEQUENCE__EXECUTOR::start_f__SEQUENCE__EXECUTOR__SequenceExecutor(executor, builder, tmp_14);
}
current_location.update_lineno(151);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 151 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(152);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 152 */
{
tmp_21:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_21;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_21;
}
current_location.update_lineno(152);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 152 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 152.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(153);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 153 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(154);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 154 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(155);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 155 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device, GPIOPinPort::GPIO__PIN__VALUE::LOW);
current_location.update_lineno(156);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 156 */
{
tmp_22:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_22;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_22;
}
current_location.update_lineno(156);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 156 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 156.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(157);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 157 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(158);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 158 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(159);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 159 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(160);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 160 */
{
tmp_23:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_23;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_23;
}
current_location.update_lineno(160);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 160 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 160.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(161);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 161 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(162);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 162 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(164);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 164 */
{
tmp_24:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = executor.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_24;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_24;
}
current_location.update_lineno(164);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 164 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 164.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(166);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 166 */
TEST__API__Functions::f__TEST__API__UnitTest__Finished();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__one_device_more_message was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__SEQUENCE__EXECUTOR__SystemTest____SequenceExecutor____more__device__more__message(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("SEQUENCE_EXECUTOR_Test.ttcn", 169, TTCN_Location::LOCATION_TESTCASE, "tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__more_device_more_message");
try {
TTCN_Runtime::begin_testcase("SEQUENCE_EXECUTOR_Test", "tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__more_device_more_message", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", "SEQUENCE_EXECUTOR_Test", "CT_TEST_SEQUENCE_EXECUTOR", has_timer, timer_value);
current_location.update_lineno(170);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 170 */
TEST__API__Functions::f__TEST__API__UnitTest__Start();
current_location.update_lineno(172);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 172 */
COMPONENT device1(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(173);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 173 */
COMPONENT device2(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(174);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 174 */
COMPONENT device3(TTCN_Runtime::create_component("GPIO_Definitions", "CT_GPIO_Device", NULL, NULL, TRUE));
current_location.update_lineno(175);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 175 */
COMPONENT builder(TTCN_Runtime::create_component("GPIO_TaskBuilder", "CT_GPIO_TaskBuilder", NULL, NULL, TRUE));
current_location.update_lineno(176);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 176 */
COMPONENT store(TTCN_Runtime::create_component("INTERFACE_STORE", "CT_INTERFACE_STORE_InterfaceStore", NULL, NULL, TRUE));
current_location.update_lineno(177);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 177 */
COMPONENT executor(TTCN_Runtime::create_component("SEQUENCE_EXECUTOR", "CT_SEQUENCE_EXECUTOR_SequenceExecutor", NULL, NULL, TRUE));
current_location.update_lineno(180);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 180 */
INTERFACE__STORE::start_f__INTERFACE__STORE__InterfaceStore(store);
current_location.update_lineno(183);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 183 */
TTCN_Runtime::connect_port(self, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.get_name(), store, INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient.get_name());
current_location.update_lineno(184);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 184 */
{
INTERFACE__STORE::RT__INTERFACE__STORE__InterfaceElement_template tmp_25;
tmp_25.Name() = cs_0;
tmp_25.Device().UV__GPIO() = device1;
tmp_25.Controller() = OMIT_VALUE;
INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.send(tmp_25);
}
current_location.update_lineno(185);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 185 */
{
INTERFACE__STORE::RT__INTERFACE__STORE__InterfaceElement_template tmp_26;
tmp_26.Name() = cs_10;
tmp_26.Device().UV__GPIO() = device2;
tmp_26.Controller() = OMIT_VALUE;
INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.send(tmp_26);
}
current_location.update_lineno(186);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 186 */
{
INTERFACE__STORE::RT__INTERFACE__STORE__InterfaceElement_template tmp_27;
tmp_27.Name() = cs_11;
tmp_27.Device().UV__GPIO() = device3;
tmp_27.Controller() = OMIT_VALUE;
INTERFACE__STORE::CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore.send(tmp_27);
}
current_location.update_lineno(188);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 188 */
GPIO__TaskBuilder::start_f__GPIO__TaskBuilder(builder, store);
current_location.update_lineno(190);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 190 */
TEST__API__Functions::f__TEST__API__Watcher__watch(device1);
current_location.update_lineno(191);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 191 */
TEST__API__Functions::f__TEST__API__Watcher__watch(device2);
current_location.update_lineno(192);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 192 */
TEST__API__Functions::f__TEST__API__Watcher__watch(device3);
current_location.update_lineno(195);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 195 */
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__ActionSequence tmp_28;
tmp_28.set_size(9);
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_29 = tmp_28[0].InterfaceAction();
tmp_29.InterfaceName() = cs_0;
tmp_29.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_30 = tmp_29.Parameters();
tmp_30.set_size(1);
tmp_30[0] = cs_2;
}
tmp_29.Delay() = 0.0;
tmp_29.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_31 = tmp_28[1].InterfaceAction();
tmp_31.InterfaceName() = cs_0;
tmp_31.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_32 = tmp_31.Parameters();
tmp_32.set_size(1);
tmp_32[0] = cs_9;
}
tmp_31.Delay() = 0.0;
tmp_31.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_33 = tmp_28[2].InterfaceAction();
tmp_33.InterfaceName() = cs_0;
tmp_33.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_34 = tmp_33.Parameters();
tmp_34.set_size(1);
tmp_34[0] = cs_2;
}
tmp_33.Delay() = 0.0;
tmp_33.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_35 = tmp_28[3].InterfaceAction();
tmp_35.InterfaceName() = cs_10;
tmp_35.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_36 = tmp_35.Parameters();
tmp_36.set_size(1);
tmp_36[0] = cs_2;
}
tmp_35.Delay() = 0.0;
tmp_35.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_37 = tmp_28[4].InterfaceAction();
tmp_37.InterfaceName() = cs_10;
tmp_37.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_38 = tmp_37.Parameters();
tmp_38.set_size(1);
tmp_38[0] = cs_9;
}
tmp_37.Delay() = 0.0;
tmp_37.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_39 = tmp_28[5].InterfaceAction();
tmp_39.InterfaceName() = cs_10;
tmp_39.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_40 = tmp_39.Parameters();
tmp_40.set_size(1);
tmp_40[0] = cs_2;
}
tmp_39.Delay() = 0.0;
tmp_39.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_41 = tmp_28[6].InterfaceAction();
tmp_41.InterfaceName() = cs_11;
tmp_41.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_42 = tmp_41.Parameters();
tmp_42.set_size(1);
tmp_42[0] = cs_2;
}
tmp_41.Delay() = 0.0;
tmp_41.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_43 = tmp_28[7].InterfaceAction();
tmp_43.InterfaceName() = cs_11;
tmp_43.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_44 = tmp_43.Parameters();
tmp_44.set_size(1);
tmp_44[0] = cs_9;
}
tmp_43.Delay() = 0.0;
tmp_43.Timeout() = 5.0e-1;
}
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction& tmp_45 = tmp_28[8].InterfaceAction();
tmp_45.InterfaceName() = cs_11;
tmp_45.Command() = cs_1;
{
LANGUAGE__DYNAMIC::LANGUAGE__DYNAMIC__InterfaceAction_Parameters& tmp_46 = tmp_45.Parameters();
tmp_46.set_size(1);
tmp_46[0] = cs_2;
}
tmp_45.Delay() = 0.0;
tmp_45.Timeout() = 5.0e-1;
}
SEQUENCE__EXECUTOR::start_f__SEQUENCE__EXECUTOR__SequenceExecutor(executor, builder, tmp_28);
}
current_location.update_lineno(210);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 210 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device1, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(211);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 211 */
{
tmp_47:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device1.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_47;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_47;
}
current_location.update_lineno(211);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 211 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 211.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(212);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 212 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(213);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 213 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(214);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 214 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device1, GPIOPinPort::GPIO__PIN__VALUE::LOW);
current_location.update_lineno(215);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 215 */
{
tmp_48:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device1.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_48;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_48;
}
current_location.update_lineno(215);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 215 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 215.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(216);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 216 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(217);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 217 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(218);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 218 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device1, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(219);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 219 */
{
tmp_49:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device1.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_49;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_49;
}
current_location.update_lineno(219);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 219 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 219.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(220);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 220 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(221);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 221 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(224);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 224 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device2, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(225);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 225 */
{
tmp_50:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device2.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_50;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_50;
}
current_location.update_lineno(225);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 225 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 225.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(226);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 226 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(227);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 227 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(228);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 228 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device2, GPIOPinPort::GPIO__PIN__VALUE::LOW);
current_location.update_lineno(229);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 229 */
{
tmp_51:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device2.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_51;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_51;
}
current_location.update_lineno(229);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 229 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 229.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(230);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 230 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(231);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 231 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(232);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 232 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device2, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(233);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 233 */
{
tmp_52:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device2.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_52;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_52;
}
current_location.update_lineno(233);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 233 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 233.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(234);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 234 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(235);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 235 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(236);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 236 */
{
tmp_53:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = executor.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_53;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_53;
}
current_location.update_lineno(236);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 236 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 236.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(239);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 239 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device3, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(240);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 240 */
{
tmp_54:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device3.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_54;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_54;
}
current_location.update_lineno(240);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 240 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 240.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(241);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 241 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(242);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 242 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(243);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 243 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device3, GPIOPinPort::GPIO__PIN__VALUE::LOW);
current_location.update_lineno(244);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 244 */
{
tmp_55:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device3.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_55;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_55;
}
current_location.update_lineno(244);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 244 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 244.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(245);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 245 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(246);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 246 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(247);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 247 */
GPIO__Functions::start_f__GPIO__TestDevice__receiveExpectedValue(device3, GPIOPinPort::GPIO__PIN__VALUE::HIGH);
current_location.update_lineno(248);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 248 */
{
tmp_56:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = device3.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_56;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_56;
}
current_location.update_lineno(248);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 248 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SEQUENCE_EXECUTOR_Test.ttcn, line 248.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(249);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 249 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_7, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(250);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 250 */
TEST__API__Functions::f__TEST__API__Watcher__getverdict(PASS, cs_8, TEST__API__Functions::f__TEST__API__Watcher__getverdict_new__timeout_defval);
current_location.update_lineno(252);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 252 */
TEST__API__Functions::f__TEST__API__UnitTest__Finished();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__more_device_more_message was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("SEQUENCE_EXECUTOR_Test.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "SEQUENCE_EXECUTOR_Test");
SEQUENCE__EXECUTOR::module_object.pre_init_module();
module_object.add_testcase_nonpard("tc_SEQUENCE_EXECUTOR_UnitTest__SequenceExecutor__run_step_successfully", testcase_tc__SEQUENCE__EXECUTOR__UnitTest____SequenceExecutor____run__step__successfully);
module_object.add_testcase_nonpard("tc_SEQUENCE_EXECUTOR_UnitTest__SequenceExecutor__run_step_timeout", testcase_tc__SEQUENCE__EXECUTOR__UnitTest____SequenceExecutor____run__step__timeout);
module_object.add_testcase_nonpard("tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__one_device_one_message", testcase_tc__SEQUENCE__EXECUTOR__SystemTest____SequenceExecutor____one__device__one__message);
module_object.add_testcase_nonpard("tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__one_device_more_message", testcase_tc__SEQUENCE__EXECUTOR__SystemTest____SequenceExecutor____one__device__more__message);
module_object.add_testcase_nonpard("tc_SEQUENCE_EXECUTOR_SystemTest__SequenceExecutor__more_device_more_message", testcase_tc__SEQUENCE__EXECUTOR__SystemTest____SequenceExecutor____more__device__more__message);
}

static void post_init_module()
{
TTCN_Location current_location("SEQUENCE_EXECUTOR_Test.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "SEQUENCE_EXECUTOR_Test");
SEQUENCE__EXECUTOR::module_object.post_init_module();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "CT_TEST_SEQUENCE_EXECUTOR")) {
if (init_base_comps) {
Module_List::initialize_component("TEST_Definitions", "CT_TEST_Subject", FALSE);
Module_List::initialize_component("TEST_Definitions", "CT_TEST_Watcher", FALSE);
Module_List::initialize_component("INTERFACE_STORE", "CT_INTERFACE_STORE_InterfaceStoreClient", FALSE);
}
return TRUE;
} else return FALSE;
}

static void module_control_part()
{
TTCN_Location current_location("SEQUENCE_EXECUTOR_Test.ttcn", 255, TTCN_Location::LOCATION_CONTROLPART, "SEQUENCE_EXECUTOR_Test");
TTCN_Runtime::begin_controlpart("SEQUENCE_EXECUTOR_Test");
current_location.update_lineno(257);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 257 */
testcase_tc__SEQUENCE__EXECUTOR__UnitTest____SequenceExecutor____run__step__successfully(FALSE, 0.0);
current_location.update_lineno(258);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 258 */
testcase_tc__SEQUENCE__EXECUTOR__UnitTest____SequenceExecutor____run__step__timeout(FALSE, 0.0);
current_location.update_lineno(261);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 261 */
testcase_tc__SEQUENCE__EXECUTOR__SystemTest____SequenceExecutor____one__device__one__message(FALSE, 0.0);
current_location.update_lineno(262);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 262 */
testcase_tc__SEQUENCE__EXECUTOR__SystemTest____SequenceExecutor____one__device__more__message(FALSE, 0.0);
current_location.update_lineno(263);
/* SEQUENCE_EXECUTOR_Test.ttcn, line 263 */
testcase_tc__SEQUENCE__EXECUTOR__SystemTest____SequenceExecutor____more__device__more__message(FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
