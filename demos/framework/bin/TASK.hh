// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef TASK_HH
#define TASK_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef TASK_HH
#endif

namespace TASK {

/* Forward declarations of classes */

class ET__TASK__ControlOutcomingMessage;
class ET__TASK__ControlOutcomingMessage_template;
class ET__TASK__ControlIncomingMessage;
class ET__TASK__ControlIncomingMessage_template;
class PT__TASK__TaskPort;
class PT__TASK__TaskExecutorPort;

} /* end of namespace */

#ifndef TASK_HH
#define TASK_HH

namespace TASK {

/* Type definitions */

typedef COMPONENT CT__TASK__Task;
typedef COMPONENT_template CT__TASK__Task_template;

/* Class definitions */

class ET__TASK__ControlOutcomingMessage : public Base_Type { // enum
friend class ET__TASK__ControlOutcomingMessage_template;
public:
enum enum_type { EV__TASK__INITIALISED = 0, EV__TASK__FINISH = 1, EV__TASK__ERROR = 2, UNKNOWN_VALUE = 3, UNBOUND_VALUE = 4 };
private:
enum_type enum_value;

public:
ET__TASK__ControlOutcomingMessage();
ET__TASK__ControlOutcomingMessage(int other_value);
ET__TASK__ControlOutcomingMessage(enum_type other_value);
ET__TASK__ControlOutcomingMessage(const ET__TASK__ControlOutcomingMessage& other_value);

ET__TASK__ControlOutcomingMessage& operator=(int other_value);
ET__TASK__ControlOutcomingMessage& operator=(enum_type other_value);
ET__TASK__ControlOutcomingMessage& operator=(const ET__TASK__ControlOutcomingMessage& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const ET__TASK__ControlOutcomingMessage& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const ET__TASK__ControlOutcomingMessage& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const ET__TASK__ControlOutcomingMessage& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const ET__TASK__ControlOutcomingMessage& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const ET__TASK__ControlOutcomingMessage& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const ET__TASK__ControlOutcomingMessage& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const ET__TASK__ControlOutcomingMessage& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class ET__TASK__ControlOutcomingMessage_template : public Base_Template {
union {
ET__TASK__ControlOutcomingMessage::enum_type single_value;
struct {
unsigned int n_values;
ET__TASK__ControlOutcomingMessage_template *list_value;
} value_list;
};

void copy_template(const ET__TASK__ControlOutcomingMessage_template& other_value);

public:
ET__TASK__ControlOutcomingMessage_template();
ET__TASK__ControlOutcomingMessage_template(template_sel other_value);
ET__TASK__ControlOutcomingMessage_template(int other_value);
ET__TASK__ControlOutcomingMessage_template(ET__TASK__ControlOutcomingMessage::enum_type other_value);
ET__TASK__ControlOutcomingMessage_template(const ET__TASK__ControlOutcomingMessage& other_value);
ET__TASK__ControlOutcomingMessage_template(const OPTIONAL<ET__TASK__ControlOutcomingMessage>& other_value);
ET__TASK__ControlOutcomingMessage_template(const ET__TASK__ControlOutcomingMessage_template& other_value);
~ET__TASK__ControlOutcomingMessage_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
ET__TASK__ControlOutcomingMessage_template& operator=(template_sel other_value);
ET__TASK__ControlOutcomingMessage_template& operator=(int other_value);
ET__TASK__ControlOutcomingMessage_template& operator=(ET__TASK__ControlOutcomingMessage::enum_type other_value);
ET__TASK__ControlOutcomingMessage_template& operator=(const ET__TASK__ControlOutcomingMessage& other_value);
ET__TASK__ControlOutcomingMessage_template& operator=(const OPTIONAL<ET__TASK__ControlOutcomingMessage>& other_value);
ET__TASK__ControlOutcomingMessage_template& operator=(const ET__TASK__ControlOutcomingMessage_template& other_value);

boolean match(ET__TASK__ControlOutcomingMessage::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const ET__TASK__ControlOutcomingMessage& other_value, boolean legacy = FALSE) const;
ET__TASK__ControlOutcomingMessage::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ET__TASK__ControlOutcomingMessage_template& list_item(unsigned int list_index);
void log() const;
void log_match(const ET__TASK__ControlOutcomingMessage& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class ET__TASK__ControlIncomingMessage : public Base_Type { // enum
friend class ET__TASK__ControlIncomingMessage_template;
public:
enum enum_type { EV__TASK__INIT = 0, EV__TASK__START = 1, EV__TASK__STOP = 2, UNKNOWN_VALUE = 3, UNBOUND_VALUE = 4 };
private:
enum_type enum_value;

public:
ET__TASK__ControlIncomingMessage();
ET__TASK__ControlIncomingMessage(int other_value);
ET__TASK__ControlIncomingMessage(enum_type other_value);
ET__TASK__ControlIncomingMessage(const ET__TASK__ControlIncomingMessage& other_value);

ET__TASK__ControlIncomingMessage& operator=(int other_value);
ET__TASK__ControlIncomingMessage& operator=(enum_type other_value);
ET__TASK__ControlIncomingMessage& operator=(const ET__TASK__ControlIncomingMessage& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const ET__TASK__ControlIncomingMessage& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const ET__TASK__ControlIncomingMessage& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const ET__TASK__ControlIncomingMessage& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const ET__TASK__ControlIncomingMessage& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const ET__TASK__ControlIncomingMessage& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const ET__TASK__ControlIncomingMessage& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const ET__TASK__ControlIncomingMessage& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class ET__TASK__ControlIncomingMessage_template : public Base_Template {
union {
ET__TASK__ControlIncomingMessage::enum_type single_value;
struct {
unsigned int n_values;
ET__TASK__ControlIncomingMessage_template *list_value;
} value_list;
};

void copy_template(const ET__TASK__ControlIncomingMessage_template& other_value);

public:
ET__TASK__ControlIncomingMessage_template();
ET__TASK__ControlIncomingMessage_template(template_sel other_value);
ET__TASK__ControlIncomingMessage_template(int other_value);
ET__TASK__ControlIncomingMessage_template(ET__TASK__ControlIncomingMessage::enum_type other_value);
ET__TASK__ControlIncomingMessage_template(const ET__TASK__ControlIncomingMessage& other_value);
ET__TASK__ControlIncomingMessage_template(const OPTIONAL<ET__TASK__ControlIncomingMessage>& other_value);
ET__TASK__ControlIncomingMessage_template(const ET__TASK__ControlIncomingMessage_template& other_value);
~ET__TASK__ControlIncomingMessage_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
ET__TASK__ControlIncomingMessage_template& operator=(template_sel other_value);
ET__TASK__ControlIncomingMessage_template& operator=(int other_value);
ET__TASK__ControlIncomingMessage_template& operator=(ET__TASK__ControlIncomingMessage::enum_type other_value);
ET__TASK__ControlIncomingMessage_template& operator=(const ET__TASK__ControlIncomingMessage& other_value);
ET__TASK__ControlIncomingMessage_template& operator=(const OPTIONAL<ET__TASK__ControlIncomingMessage>& other_value);
ET__TASK__ControlIncomingMessage_template& operator=(const ET__TASK__ControlIncomingMessage_template& other_value);

boolean match(ET__TASK__ControlIncomingMessage::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const ET__TASK__ControlIncomingMessage& other_value, boolean legacy = FALSE) const;
ET__TASK__ControlIncomingMessage::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ET__TASK__ControlIncomingMessage_template& list_item(unsigned int list_index);
void log() const;
void log_match(const ET__TASK__ControlIncomingMessage& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class PT__TASK__TaskPort : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
ET__TASK__ControlIncomingMessage *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
PT__TASK__TaskPort(const char *par_port_name = NULL);
~PT__TASK__TaskPort();
void send(const ET__TASK__ControlOutcomingMessage& send_par, const COMPONENT& destination_component);
void send(const ET__TASK__ControlOutcomingMessage& send_par);
void send(const ET__TASK__ControlOutcomingMessage_template& send_par, const COMPONENT& destination_component);
void send(const ET__TASK__ControlOutcomingMessage_template& send_par);
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const ET__TASK__ControlIncomingMessage_template& value_template, ET__TASK__ControlIncomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const ET__TASK__ControlIncomingMessage_template& value_template, ET__TASK__ControlIncomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const ET__TASK__ControlIncomingMessage_template& value_template, ET__TASK__ControlIncomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
private:
void incoming_message(const ET__TASK__ControlIncomingMessage& incoming_par, component sender_component);
protected:
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};

class PT__TASK__TaskExecutorPort : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
ET__TASK__ControlOutcomingMessage *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
PT__TASK__TaskExecutorPort(const char *par_port_name = NULL);
~PT__TASK__TaskExecutorPort();
void send(const ET__TASK__ControlIncomingMessage& send_par, const COMPONENT& destination_component);
void send(const ET__TASK__ControlIncomingMessage& send_par);
void send(const ET__TASK__ControlIncomingMessage_template& send_par, const COMPONENT& destination_component);
void send(const ET__TASK__ControlIncomingMessage_template& send_par);
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const ET__TASK__ControlOutcomingMessage_template& value_template, ET__TASK__ControlOutcomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const ET__TASK__ControlOutcomingMessage_template& value_template, ET__TASK__ControlOutcomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const ET__TASK__ControlOutcomingMessage_template& value_template, ET__TASK__ControlOutcomingMessage *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
private:
void incoming_message(const ET__TASK__ControlOutcomingMessage& incoming_par, component sender_component);
protected:
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Function prototypes */

extern void f__TASK__Task();

/* Global variable declarations */

extern const TTCN_Typedescriptor_t ET__TASK__ControlOutcomingMessage_descr_;
extern const TTCN_Typedescriptor_t ET__TASK__ControlIncomingMessage_descr_;
extern const TTCN_Typedescriptor_t& CT__TASK__Task_descr_;
extern PT__TASK__TaskPort CT__TASK__Task_component_p__taskPort;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
