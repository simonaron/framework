// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef GPIOPinPort_HH
#define GPIOPinPort_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef GPIOPinPort_HH
#endif

namespace GPIOPinPort {

/* Forward declarations of classes */

class GPIO__PIN__DIRECTION;
class GPIO__PIN__DIRECTION_template;
class GPIO__PIN__VALUE;
class GPIO__PIN__VALUE_template;
class GPIO__PIN__STATUS;
class GPIO__PIN__STATUS_template;
class GPIO__Pin__Port_BASE;
class GPIO__Pin__Port;

} /* end of namespace */

#ifndef GPIOPinPort_HH
#define GPIOPinPort_HH

namespace GPIOPinPort {

/* Type definitions */

typedef COMPONENT GPIO__Base;
typedef COMPONENT_template GPIO__Base_template;

/* Class definitions */

class GPIO__PIN__DIRECTION : public Base_Type { // enum
friend class GPIO__PIN__DIRECTION_template;
public:
enum enum_type { IN = 0, OUT = 1, UNKNOWN_VALUE = 2, UNBOUND_VALUE = 3 };
private:
enum_type enum_value;

public:
GPIO__PIN__DIRECTION();
GPIO__PIN__DIRECTION(int other_value);
GPIO__PIN__DIRECTION(enum_type other_value);
GPIO__PIN__DIRECTION(const GPIO__PIN__DIRECTION& other_value);

GPIO__PIN__DIRECTION& operator=(int other_value);
GPIO__PIN__DIRECTION& operator=(enum_type other_value);
GPIO__PIN__DIRECTION& operator=(const GPIO__PIN__DIRECTION& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const GPIO__PIN__DIRECTION& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const GPIO__PIN__DIRECTION& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const GPIO__PIN__DIRECTION& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const GPIO__PIN__DIRECTION& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const GPIO__PIN__DIRECTION& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const GPIO__PIN__DIRECTION& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const GPIO__PIN__DIRECTION& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class GPIO__PIN__DIRECTION_template : public Base_Template {
union {
GPIO__PIN__DIRECTION::enum_type single_value;
struct {
unsigned int n_values;
GPIO__PIN__DIRECTION_template *list_value;
} value_list;
};

void copy_template(const GPIO__PIN__DIRECTION_template& other_value);

public:
GPIO__PIN__DIRECTION_template();
GPIO__PIN__DIRECTION_template(template_sel other_value);
GPIO__PIN__DIRECTION_template(int other_value);
GPIO__PIN__DIRECTION_template(GPIO__PIN__DIRECTION::enum_type other_value);
GPIO__PIN__DIRECTION_template(const GPIO__PIN__DIRECTION& other_value);
GPIO__PIN__DIRECTION_template(const OPTIONAL<GPIO__PIN__DIRECTION>& other_value);
GPIO__PIN__DIRECTION_template(const GPIO__PIN__DIRECTION_template& other_value);
~GPIO__PIN__DIRECTION_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
GPIO__PIN__DIRECTION_template& operator=(template_sel other_value);
GPIO__PIN__DIRECTION_template& operator=(int other_value);
GPIO__PIN__DIRECTION_template& operator=(GPIO__PIN__DIRECTION::enum_type other_value);
GPIO__PIN__DIRECTION_template& operator=(const GPIO__PIN__DIRECTION& other_value);
GPIO__PIN__DIRECTION_template& operator=(const OPTIONAL<GPIO__PIN__DIRECTION>& other_value);
GPIO__PIN__DIRECTION_template& operator=(const GPIO__PIN__DIRECTION_template& other_value);

boolean match(GPIO__PIN__DIRECTION::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const GPIO__PIN__DIRECTION& other_value, boolean legacy = FALSE) const;
GPIO__PIN__DIRECTION::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
GPIO__PIN__DIRECTION_template& list_item(unsigned int list_index);
void log() const;
void log_match(const GPIO__PIN__DIRECTION& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class GPIO__PIN__VALUE : public Base_Type { // enum
friend class GPIO__PIN__VALUE_template;
public:
enum enum_type { LOW = 0, HIGH = 1, UNKNOWN_VALUE = 2, UNBOUND_VALUE = 3 };
private:
enum_type enum_value;

public:
GPIO__PIN__VALUE();
GPIO__PIN__VALUE(int other_value);
GPIO__PIN__VALUE(enum_type other_value);
GPIO__PIN__VALUE(const GPIO__PIN__VALUE& other_value);

GPIO__PIN__VALUE& operator=(int other_value);
GPIO__PIN__VALUE& operator=(enum_type other_value);
GPIO__PIN__VALUE& operator=(const GPIO__PIN__VALUE& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const GPIO__PIN__VALUE& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const GPIO__PIN__VALUE& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const GPIO__PIN__VALUE& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const GPIO__PIN__VALUE& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const GPIO__PIN__VALUE& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const GPIO__PIN__VALUE& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const GPIO__PIN__VALUE& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class GPIO__PIN__VALUE_template : public Base_Template {
union {
GPIO__PIN__VALUE::enum_type single_value;
struct {
unsigned int n_values;
GPIO__PIN__VALUE_template *list_value;
} value_list;
};

void copy_template(const GPIO__PIN__VALUE_template& other_value);

public:
GPIO__PIN__VALUE_template();
GPIO__PIN__VALUE_template(template_sel other_value);
GPIO__PIN__VALUE_template(int other_value);
GPIO__PIN__VALUE_template(GPIO__PIN__VALUE::enum_type other_value);
GPIO__PIN__VALUE_template(const GPIO__PIN__VALUE& other_value);
GPIO__PIN__VALUE_template(const OPTIONAL<GPIO__PIN__VALUE>& other_value);
GPIO__PIN__VALUE_template(const GPIO__PIN__VALUE_template& other_value);
~GPIO__PIN__VALUE_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
GPIO__PIN__VALUE_template& operator=(template_sel other_value);
GPIO__PIN__VALUE_template& operator=(int other_value);
GPIO__PIN__VALUE_template& operator=(GPIO__PIN__VALUE::enum_type other_value);
GPIO__PIN__VALUE_template& operator=(const GPIO__PIN__VALUE& other_value);
GPIO__PIN__VALUE_template& operator=(const OPTIONAL<GPIO__PIN__VALUE>& other_value);
GPIO__PIN__VALUE_template& operator=(const GPIO__PIN__VALUE_template& other_value);

boolean match(GPIO__PIN__VALUE::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const GPIO__PIN__VALUE& other_value, boolean legacy = FALSE) const;
GPIO__PIN__VALUE::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
GPIO__PIN__VALUE_template& list_item(unsigned int list_index);
void log() const;
void log_match(const GPIO__PIN__VALUE& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class GPIO__PIN__STATUS {
  BOOLEAN field_is__exported;
  GPIO__PIN__DIRECTION field_direction;
  GPIO__PIN__VALUE field_val;
public:
  GPIO__PIN__STATUS();
  GPIO__PIN__STATUS(const BOOLEAN& par_is__exported,
    const GPIO__PIN__DIRECTION& par_direction,
    const GPIO__PIN__VALUE& par_val);
  GPIO__PIN__STATUS(const GPIO__PIN__STATUS& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  GPIO__PIN__STATUS& operator=(const GPIO__PIN__STATUS& other_value);
  boolean operator==(const GPIO__PIN__STATUS& other_value) const;
  inline boolean operator!=(const GPIO__PIN__STATUS& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline BOOLEAN& is__exported()
    {return field_is__exported;}
  inline const BOOLEAN& is__exported() const
    {return field_is__exported;}
  inline GPIO__PIN__DIRECTION& direction()
    {return field_direction;}
  inline const GPIO__PIN__DIRECTION& direction() const
    {return field_direction;}
  inline GPIO__PIN__VALUE& val()
    {return field_val;}
  inline const GPIO__PIN__VALUE& val() const
    {return field_val;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class GPIO__PIN__STATUS_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
GPIO__PIN__STATUS_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const GPIO__PIN__STATUS& other_value);
void copy_template(const GPIO__PIN__STATUS_template& other_value);

public:
GPIO__PIN__STATUS_template();
GPIO__PIN__STATUS_template(template_sel other_value);
GPIO__PIN__STATUS_template(const GPIO__PIN__STATUS& other_value);
GPIO__PIN__STATUS_template(const OPTIONAL<GPIO__PIN__STATUS>& other_value);
GPIO__PIN__STATUS_template(const GPIO__PIN__STATUS_template& other_value);
~GPIO__PIN__STATUS_template();
GPIO__PIN__STATUS_template& operator=(template_sel other_value);
GPIO__PIN__STATUS_template& operator=(const GPIO__PIN__STATUS& other_value);
GPIO__PIN__STATUS_template& operator=(const OPTIONAL<GPIO__PIN__STATUS>& other_value);
GPIO__PIN__STATUS_template& operator=(const GPIO__PIN__STATUS_template& other_value);
boolean match(const GPIO__PIN__STATUS& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
GPIO__PIN__STATUS valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
GPIO__PIN__STATUS_template& list_item(unsigned int list_index) const;
BOOLEAN_template& is__exported();
const BOOLEAN_template& is__exported() const;
GPIO__PIN__DIRECTION_template& direction();
const GPIO__PIN__DIRECTION_template& direction() const;
GPIO__PIN__VALUE_template& val();
const GPIO__PIN__VALUE_template& val() const;
int size_of() const;
void log() const;
void log_match(const GPIO__PIN__STATUS& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class GPIO__Pin__Port_BASE : public PORT {
enum msg_selection { MESSAGE_0, MESSAGE_1 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
GPIO__PIN__VALUE *message_0;
GPIO__PIN__STATUS *message_1;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
GPIO__Pin__Port_BASE(const char *par_port_name);
~GPIO__Pin__Port_BASE();
void send(const GPIO__PIN__DIRECTION& send_par, const COMPONENT& destination_component);
void send(const GPIO__PIN__DIRECTION& send_par);
void send(const GPIO__PIN__DIRECTION_template& send_par, const COMPONENT& destination_component);
void send(const GPIO__PIN__DIRECTION_template& send_par);
void send(const GPIO__PIN__VALUE& send_par, const COMPONENT& destination_component);
void send(const GPIO__PIN__VALUE& send_par);
void send(const GPIO__PIN__VALUE_template& send_par, const COMPONENT& destination_component);
void send(const GPIO__PIN__VALUE_template& send_par);
void send(const GPIO__PIN__STATUS& send_par, const COMPONENT& destination_component);
void send(const GPIO__PIN__STATUS& send_par);
void send(const GPIO__PIN__STATUS_template& send_par, const COMPONENT& destination_component);
void send(const GPIO__PIN__STATUS_template& send_par);
protected:
virtual void outgoing_send(const GPIO__PIN__DIRECTION& send_par) = 0;
virtual void outgoing_send(const GPIO__PIN__VALUE& send_par) = 0;
virtual void outgoing_send(const GPIO__PIN__STATUS& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const GPIO__PIN__VALUE_template& value_template, GPIO__PIN__VALUE *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const GPIO__PIN__VALUE_template& value_template, GPIO__PIN__VALUE *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const GPIO__PIN__VALUE_template& value_template, GPIO__PIN__VALUE *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const GPIO__PIN__STATUS_template& value_template, GPIO__PIN__STATUS *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const GPIO__PIN__STATUS_template& value_template, GPIO__PIN__STATUS *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const GPIO__PIN__STATUS_template& value_template, GPIO__PIN__STATUS *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
private:
void incoming_message(const GPIO__PIN__VALUE& incoming_par, component sender_component);
void incoming_message(const GPIO__PIN__STATUS& incoming_par, component sender_component);
protected:
inline void incoming_message(const GPIO__PIN__VALUE& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const GPIO__PIN__STATUS& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Global variable declarations */

extern const TTCN_Typedescriptor_t GPIO__PIN__DIRECTION_descr_;
extern const TTCN_Typedescriptor_t GPIO__PIN__VALUE_descr_;
extern const XERdescriptor_t GPIO__PIN__STATUS_is__exported_xer_;
extern const TTCN_JSONdescriptor_t GPIO__PIN__STATUS_is__exported_json_;
extern const TTCN_OERdescriptor_t GPIO__PIN__STATUS_is__exported_oer_;
extern const TTCN_Typedescriptor_t GPIO__PIN__STATUS_is__exported_descr_;
extern const TTCN_Typedescriptor_t GPIO__PIN__STATUS_descr_;
extern const TTCN_Typedescriptor_t& GPIO__Base_descr_;
extern PORT_ARRAY<GPIO__Pin__Port, 26, 2> GPIO__Base_component_gpio;
extern TTCN_Module module_object;

} /* end of namespace */

/* Test port header files */

#include "GPIO_Pin_Port.hh"

#endif
