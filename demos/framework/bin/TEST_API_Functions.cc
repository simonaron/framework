// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "TEST_API_Functions.hh"

namespace TEST__API__Functions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x32, 0x3b, 0xd9, 0x52, 0xef, 0xbe, 0xdf, 0x97, 0x90, 0x56, 0x7f, 0xdc, 0x60, 0x1b, 0x6d, 0x05 };

/* Global variable definitions */

static FLOAT const_f__TEST__API__Watcher__getverdict_new__timeout_defval;
const FLOAT& f__TEST__API__Watcher__getverdict_new__timeout_defval = const_f__TEST__API__Watcher__getverdict_new__timeout_defval;
TTCN_Module module_object("TEST_API_Functions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

void f__TEST__API__Subject__setverdict(const VERDICTTYPE& new__verdict, const CHARSTRING& new__reason)
{
TTCN_Location current_location("TEST_API_Functions.ttcn", 7, TTCN_Location::LOCATION_FUNCTION, "f_TEST_API_Subject_setverdict");
current_location.update_lineno(9);
/* TEST_API_Functions.ttcn, line 9 */
TEST__Functions::f__TEST__Subject__setverdict(new__verdict, new__reason);
}

void start_f__TEST__API__Subject__setverdict(const COMPONENT& component_reference, const VERDICTTYPE& new__verdict, const CHARSTRING& new__reason)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_TEST_API_Subject_setverdict(");
new__verdict.log();
TTCN_Logger::log_event_str(", ");
new__reason.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "TEST_API_Functions", "f_TEST_API_Subject_setverdict", text_buf);
new__verdict.encode_text(text_buf);
new__reason.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__TEST__API__Watcher__watch(const COMPONENT& new__subject)
{
TTCN_Location current_location("TEST_API_Functions.ttcn", 14, TTCN_Location::LOCATION_FUNCTION, "f_TEST_API_Watcher_watch");
current_location.update_lineno(16);
/* TEST_API_Functions.ttcn, line 16 */
TEST__Functions::f__TEST__Watcher__watch(new__subject);
}

void start_f__TEST__API__Watcher__watch(const COMPONENT& component_reference, const COMPONENT& new__subject)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_TEST_API_Watcher_watch(");
new__subject.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "TEST_API_Functions", "f_TEST_API_Watcher_watch", text_buf);
new__subject.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__TEST__API__Watcher__getverdict(const VERDICTTYPE& expected__verdict, const CHARSTRING& expected__reason, const FLOAT& new__timeout)
{
TTCN_Location current_location("TEST_API_Functions.ttcn", 19, TTCN_Location::LOCATION_FUNCTION, "f_TEST_API_Watcher_getverdict");
current_location.update_lineno(21);
/* TEST_API_Functions.ttcn, line 21 */
TEST__Functions::f__TEST__Watcher__getverdict(expected__verdict, expected__reason, new__timeout);
}

void start_f__TEST__API__Watcher__getverdict(const COMPONENT& component_reference, const VERDICTTYPE& expected__verdict, const CHARSTRING& expected__reason, const FLOAT& new__timeout)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_TEST_API_Watcher_getverdict(");
expected__verdict.log();
TTCN_Logger::log_event_str(", ");
expected__reason.log();
TTCN_Logger::log_event_str(", ");
new__timeout.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "TEST_API_Functions", "f_TEST_API_Watcher_getverdict", text_buf);
expected__verdict.encode_text(text_buf);
expected__reason.encode_text(text_buf);
new__timeout.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__TEST__API__UnitTest__Start()
{
TTCN_Location current_location("TEST_API_Functions.ttcn", 26, TTCN_Location::LOCATION_FUNCTION, "f_TEST_API_UnitTest_Start");
current_location.update_lineno(27);
/* TEST_API_Functions.ttcn, line 27 */
TTCN_Logger::log_str(TTCN_USER, "");
current_location.update_lineno(28);
/* TEST_API_Functions.ttcn, line 28 */
TTCN_Logger::log_str(TTCN_USER, "");
current_location.update_lineno(29);
/* TEST_API_Functions.ttcn, line 29 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str(" UNIT TEST ");
TTCN_Runtime::get_testcasename().log();
TTCN_Logger::log_event_str(" STARTED");
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(30);
/* TEST_API_Functions.ttcn, line 30 */
TTCN_Logger::log_str(TTCN_USER, "---------------------------------------------------------------------------------------------");
current_location.update_lineno(31);
/* TEST_API_Functions.ttcn, line 31 */
TTCN_Logger::log_str(TTCN_USER, "");
}

void f__TEST__API__UnitTest__Finished()
{
TTCN_Location current_location("TEST_API_Functions.ttcn", 34, TTCN_Location::LOCATION_FUNCTION, "f_TEST_API_UnitTest_Finished");
current_location.update_lineno(35);
/* TEST_API_Functions.ttcn, line 35 */
TTCN_Logger::log_str(TTCN_USER, "");
current_location.update_lineno(36);
/* TEST_API_Functions.ttcn, line 36 */
TTCN_Logger::log_str(TTCN_USER, "#### SUMMARY ################################################################################");
current_location.update_lineno(37);
/* TEST_API_Functions.ttcn, line 37 */
TTCN_Logger::log_str(TTCN_USER, "");
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("TEST_API_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "TEST_API_Functions");
TEST__API__Definitions::module_object.pre_init_module();
TEST__Functions::module_object.pre_init_module();
module_object.add_function("f_TEST_API_Subject_setverdict", (genericfunc_t)&f__TEST__API__Subject__setverdict, (genericfunc_t)&start_f__TEST__API__Subject__setverdict);
module_object.add_function("f_TEST_API_Watcher_watch", (genericfunc_t)&f__TEST__API__Watcher__watch, (genericfunc_t)&start_f__TEST__API__Watcher__watch);
module_object.add_function("f_TEST_API_Watcher_getverdict", (genericfunc_t)&f__TEST__API__Watcher__getverdict, (genericfunc_t)&start_f__TEST__API__Watcher__getverdict);
module_object.add_function("f_TEST_API_UnitTest_Start", (genericfunc_t)&f__TEST__API__UnitTest__Start, NULL);
module_object.add_function("f_TEST_API_UnitTest_Finished", (genericfunc_t)&f__TEST__API__UnitTest__Finished, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("TEST_API_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "TEST_API_Functions");
TEST__API__Definitions::module_object.post_init_module();
TEST__Functions::module_object.post_init_module();
const_f__TEST__API__Watcher__getverdict_new__timeout_defval = 1.0;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_TEST_API_Subject_setverdict")) {
VERDICTTYPE new__verdict;
CHARSTRING new__reason;
new__verdict.decode_text(function_arguments);
new__reason.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_TEST_API_Subject_setverdict(");
new__verdict.log();
TTCN_Logger::log_event_str(", ");
new__reason.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__TEST__API__Subject__setverdict(new__verdict, new__reason);
TTCN_Runtime::function_finished("f_TEST_API_Subject_setverdict");
return TRUE;
} else if (!strcmp(function_name, "f_TEST_API_Watcher_watch")) {
COMPONENT new__subject;
new__subject.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_TEST_API_Watcher_watch(");
new__subject.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__TEST__API__Watcher__watch(new__subject);
TTCN_Runtime::function_finished("f_TEST_API_Watcher_watch");
return TRUE;
} else if (!strcmp(function_name, "f_TEST_API_Watcher_getverdict")) {
VERDICTTYPE expected__verdict;
CHARSTRING expected__reason;
FLOAT new__timeout;
expected__verdict.decode_text(function_arguments);
expected__reason.decode_text(function_arguments);
new__timeout.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_TEST_API_Watcher_getverdict(");
expected__verdict.log();
TTCN_Logger::log_event_str(", ");
expected__reason.log();
TTCN_Logger::log_event_str(", ");
new__timeout.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__TEST__API__Watcher__getverdict(expected__verdict, expected__reason, new__timeout);
TTCN_Runtime::function_finished("f_TEST_API_Watcher_getverdict");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
