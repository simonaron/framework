// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef INTERFACE__STORE_HH
#define INTERFACE__STORE_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "TEST_API_Functions.hh"
#include "GPIO.hh"

#if TTCN3_VERSION != 60300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef INTERFACE__STORE_HH
#endif

namespace INTERFACE__STORE {

/* Forward declarations of classes */

class UT__INTERFACE__STORE__Device;
class UT__INTERFACE__STORE__Device_template;
class UT__INTERFACE__STORE__Controller;
class UT__INTERFACE__STORE__Controller_template;
class RT__INTERFACE__STORE__InterfaceElement;
class RT__INTERFACE__STORE__InterfaceElement_template;
class RT__INTERFACE__STORE__InterfaceElements;
class RT__INTERFACE__STORE__InterfaceElements_template;
class PT__INTERFACE__STORE__InterfaceStorePort;

} /* end of namespace */

#ifndef INTERFACE__STORE_HH
#define INTERFACE__STORE_HH

namespace INTERFACE__STORE {

/* Type definitions */

typedef COMPONENT CT__INTERFACE__STORE__InterfaceStore;
typedef COMPONENT_template CT__INTERFACE__STORE__InterfaceStore_template;
typedef COMPONENT CT__INTERFACE__STORE__InterfaceStoreClient;
typedef COMPONENT_template CT__INTERFACE__STORE__InterfaceStoreClient_template;

/* Class definitions */

class UT__INTERFACE__STORE__Device : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_UV__GPIO = 1 };
private:
union_selection_type union_selection;
union {
COMPONENT *field_UV__GPIO;
};
void copy_value(const UT__INTERFACE__STORE__Device& other_value);

public:
UT__INTERFACE__STORE__Device();
UT__INTERFACE__STORE__Device(const UT__INTERFACE__STORE__Device& other_value);
~UT__INTERFACE__STORE__Device();
UT__INTERFACE__STORE__Device& operator=(const UT__INTERFACE__STORE__Device& other_value);
boolean operator==(const UT__INTERFACE__STORE__Device& other_value) const;
inline boolean operator!=(const UT__INTERFACE__STORE__Device& other_value) const { return !(*this == other_value); }
COMPONENT& UV__GPIO();
const COMPONENT& UV__GPIO() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class UT__INTERFACE__STORE__Device_template : public Base_Template {
union {
struct {
UT__INTERFACE__STORE__Device::union_selection_type union_selection;
union {
COMPONENT_template *field_UV__GPIO;
};
} single_value;
struct {
unsigned int n_values;
UT__INTERFACE__STORE__Device_template *list_value;
} value_list;
};
void copy_value(const UT__INTERFACE__STORE__Device& other_value);

void copy_template(const UT__INTERFACE__STORE__Device_template& other_value);

public:
UT__INTERFACE__STORE__Device_template();
UT__INTERFACE__STORE__Device_template(template_sel other_value);
UT__INTERFACE__STORE__Device_template(const UT__INTERFACE__STORE__Device& other_value);
UT__INTERFACE__STORE__Device_template(const OPTIONAL<UT__INTERFACE__STORE__Device>& other_value);
UT__INTERFACE__STORE__Device_template(const UT__INTERFACE__STORE__Device_template& other_value);
~UT__INTERFACE__STORE__Device_template();
void clean_up();
UT__INTERFACE__STORE__Device_template& operator=(template_sel other_value);
UT__INTERFACE__STORE__Device_template& operator=(const UT__INTERFACE__STORE__Device& other_value);
UT__INTERFACE__STORE__Device_template& operator=(const OPTIONAL<UT__INTERFACE__STORE__Device>& other_value);
UT__INTERFACE__STORE__Device_template& operator=(const UT__INTERFACE__STORE__Device_template& other_value);
boolean match(const UT__INTERFACE__STORE__Device& other_value, boolean legacy = FALSE) const;
boolean is_value() const;UT__INTERFACE__STORE__Device valueof() const;
UT__INTERFACE__STORE__Device_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
COMPONENT_template& UV__GPIO();
const COMPONENT_template& UV__GPIO() const;
boolean ischosen(UT__INTERFACE__STORE__Device::union_selection_type checked_selection) const;
void log() const;
void log_match(const UT__INTERFACE__STORE__Device& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class UT__INTERFACE__STORE__Controller : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_UV__GPIO = 1 };
private:
union_selection_type union_selection;
union {
COMPONENT *field_UV__GPIO;
};
void copy_value(const UT__INTERFACE__STORE__Controller& other_value);

public:
UT__INTERFACE__STORE__Controller();
UT__INTERFACE__STORE__Controller(const UT__INTERFACE__STORE__Controller& other_value);
~UT__INTERFACE__STORE__Controller();
UT__INTERFACE__STORE__Controller& operator=(const UT__INTERFACE__STORE__Controller& other_value);
boolean operator==(const UT__INTERFACE__STORE__Controller& other_value) const;
inline boolean operator!=(const UT__INTERFACE__STORE__Controller& other_value) const { return !(*this == other_value); }
COMPONENT& UV__GPIO();
const COMPONENT& UV__GPIO() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class UT__INTERFACE__STORE__Controller_template : public Base_Template {
union {
struct {
UT__INTERFACE__STORE__Controller::union_selection_type union_selection;
union {
COMPONENT_template *field_UV__GPIO;
};
} single_value;
struct {
unsigned int n_values;
UT__INTERFACE__STORE__Controller_template *list_value;
} value_list;
};
void copy_value(const UT__INTERFACE__STORE__Controller& other_value);

void copy_template(const UT__INTERFACE__STORE__Controller_template& other_value);

public:
UT__INTERFACE__STORE__Controller_template();
UT__INTERFACE__STORE__Controller_template(template_sel other_value);
UT__INTERFACE__STORE__Controller_template(const UT__INTERFACE__STORE__Controller& other_value);
UT__INTERFACE__STORE__Controller_template(const OPTIONAL<UT__INTERFACE__STORE__Controller>& other_value);
UT__INTERFACE__STORE__Controller_template(const UT__INTERFACE__STORE__Controller_template& other_value);
~UT__INTERFACE__STORE__Controller_template();
void clean_up();
UT__INTERFACE__STORE__Controller_template& operator=(template_sel other_value);
UT__INTERFACE__STORE__Controller_template& operator=(const UT__INTERFACE__STORE__Controller& other_value);
UT__INTERFACE__STORE__Controller_template& operator=(const OPTIONAL<UT__INTERFACE__STORE__Controller>& other_value);
UT__INTERFACE__STORE__Controller_template& operator=(const UT__INTERFACE__STORE__Controller_template& other_value);
boolean match(const UT__INTERFACE__STORE__Controller& other_value, boolean legacy = FALSE) const;
boolean is_value() const;UT__INTERFACE__STORE__Controller valueof() const;
UT__INTERFACE__STORE__Controller_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
COMPONENT_template& UV__GPIO();
const COMPONENT_template& UV__GPIO() const;
boolean ischosen(UT__INTERFACE__STORE__Controller::union_selection_type checked_selection) const;
void log() const;
void log_match(const UT__INTERFACE__STORE__Controller& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class RT__INTERFACE__STORE__InterfaceElement {
  CHARSTRING field_Name;
  OPTIONAL<UT__INTERFACE__STORE__Device> field_Device;
  OPTIONAL<UT__INTERFACE__STORE__Controller> field_Controller;
public:
  RT__INTERFACE__STORE__InterfaceElement();
  RT__INTERFACE__STORE__InterfaceElement(const CHARSTRING& par_Name,
    const OPTIONAL<UT__INTERFACE__STORE__Device>& par_Device,
    const OPTIONAL<UT__INTERFACE__STORE__Controller>& par_Controller);
  RT__INTERFACE__STORE__InterfaceElement(const RT__INTERFACE__STORE__InterfaceElement& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  RT__INTERFACE__STORE__InterfaceElement& operator=(const RT__INTERFACE__STORE__InterfaceElement& other_value);
  boolean operator==(const RT__INTERFACE__STORE__InterfaceElement& other_value) const;
  inline boolean operator!=(const RT__INTERFACE__STORE__InterfaceElement& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& Name()
    {return field_Name;}
  inline const CHARSTRING& Name() const
    {return field_Name;}
  inline OPTIONAL<UT__INTERFACE__STORE__Device>& Device()
    {return field_Device;}
  inline const OPTIONAL<UT__INTERFACE__STORE__Device>& Device() const
    {return field_Device;}
  inline OPTIONAL<UT__INTERFACE__STORE__Controller>& Controller()
    {return field_Controller;}
  inline const OPTIONAL<UT__INTERFACE__STORE__Controller>& Controller() const
    {return field_Controller;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class RT__INTERFACE__STORE__InterfaceElement_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
RT__INTERFACE__STORE__InterfaceElement_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const RT__INTERFACE__STORE__InterfaceElement& other_value);
void copy_template(const RT__INTERFACE__STORE__InterfaceElement_template& other_value);

public:
RT__INTERFACE__STORE__InterfaceElement_template();
RT__INTERFACE__STORE__InterfaceElement_template(template_sel other_value);
RT__INTERFACE__STORE__InterfaceElement_template(const RT__INTERFACE__STORE__InterfaceElement& other_value);
RT__INTERFACE__STORE__InterfaceElement_template(const OPTIONAL<RT__INTERFACE__STORE__InterfaceElement>& other_value);
RT__INTERFACE__STORE__InterfaceElement_template(const RT__INTERFACE__STORE__InterfaceElement_template& other_value);
~RT__INTERFACE__STORE__InterfaceElement_template();
RT__INTERFACE__STORE__InterfaceElement_template& operator=(template_sel other_value);
RT__INTERFACE__STORE__InterfaceElement_template& operator=(const RT__INTERFACE__STORE__InterfaceElement& other_value);
RT__INTERFACE__STORE__InterfaceElement_template& operator=(const OPTIONAL<RT__INTERFACE__STORE__InterfaceElement>& other_value);
RT__INTERFACE__STORE__InterfaceElement_template& operator=(const RT__INTERFACE__STORE__InterfaceElement_template& other_value);
boolean match(const RT__INTERFACE__STORE__InterfaceElement& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
RT__INTERFACE__STORE__InterfaceElement valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
RT__INTERFACE__STORE__InterfaceElement_template& list_item(unsigned int list_index) const;
CHARSTRING_template& Name();
const CHARSTRING_template& Name() const;
UT__INTERFACE__STORE__Device_template& Device();
const UT__INTERFACE__STORE__Device_template& Device() const;
UT__INTERFACE__STORE__Controller_template& Controller();
const UT__INTERFACE__STORE__Controller_template& Controller() const;
int size_of() const;
void log() const;
void log_match(const RT__INTERFACE__STORE__InterfaceElement& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class RT__INTERFACE__STORE__InterfaceElements : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
RT__INTERFACE__STORE__InterfaceElement **value_elements;
} *val_ptr;

static const RT__INTERFACE__STORE__InterfaceElement UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const RT__INTERFACE__STORE__InterfaceElements& other_value);

public:
  typedef RT__INTERFACE__STORE__InterfaceElement of_type;
RT__INTERFACE__STORE__InterfaceElements();
RT__INTERFACE__STORE__InterfaceElements(null_type other_value);
RT__INTERFACE__STORE__InterfaceElements(const RT__INTERFACE__STORE__InterfaceElements& other_value);
~RT__INTERFACE__STORE__InterfaceElements();

void clean_up();
RT__INTERFACE__STORE__InterfaceElements& operator=(null_type other_value);
RT__INTERFACE__STORE__InterfaceElements& operator=(const RT__INTERFACE__STORE__InterfaceElements& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const RT__INTERFACE__STORE__InterfaceElements& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const RT__INTERFACE__STORE__InterfaceElements& other_value) const { return !(*this == other_value); }

RT__INTERFACE__STORE__InterfaceElement& operator[](int index_value);
RT__INTERFACE__STORE__InterfaceElement& operator[](const INTEGER& index_value);
const RT__INTERFACE__STORE__InterfaceElement& operator[](int index_value) const;
const RT__INTERFACE__STORE__InterfaceElement& operator[](const INTEGER& index_value) const;

RT__INTERFACE__STORE__InterfaceElements operator<<=(int rotate_count) const;
RT__INTERFACE__STORE__InterfaceElements operator<<=(const INTEGER& rotate_count) const;
RT__INTERFACE__STORE__InterfaceElements operator>>=(int rotate_count) const;
RT__INTERFACE__STORE__InterfaceElements operator>>=(const INTEGER& rotate_count) const;

RT__INTERFACE__STORE__InterfaceElements operator+(const RT__INTERFACE__STORE__InterfaceElements& other_value) const;

RT__INTERFACE__STORE__InterfaceElements substr(int index, int returncount) const;

RT__INTERFACE__STORE__InterfaceElements replace(int index, int len, const RT__INTERFACE__STORE__InterfaceElements& repl) const;

RT__INTERFACE__STORE__InterfaceElements replace(int index, int len, const RT__INTERFACE__STORE__InterfaceElements_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class RT__INTERFACE__STORE__InterfaceElements_template : public Record_Of_Template {
union {
struct {
int n_elements;
RT__INTERFACE__STORE__InterfaceElement_template **value_elements;
} single_value;
struct {
unsigned int n_values;
RT__INTERFACE__STORE__InterfaceElements_template *list_value;
} value_list;
};
void copy_value(const RT__INTERFACE__STORE__InterfaceElements& other_value);
void copy_template(const RT__INTERFACE__STORE__InterfaceElements_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);

public:
RT__INTERFACE__STORE__InterfaceElements_template();
RT__INTERFACE__STORE__InterfaceElements_template(template_sel other_value);
RT__INTERFACE__STORE__InterfaceElements_template(null_type other_value);
RT__INTERFACE__STORE__InterfaceElements_template(const RT__INTERFACE__STORE__InterfaceElements& other_value);
RT__INTERFACE__STORE__InterfaceElements_template(const OPTIONAL<RT__INTERFACE__STORE__InterfaceElements>& other_value);
RT__INTERFACE__STORE__InterfaceElements_template(const RT__INTERFACE__STORE__InterfaceElements_template& other_value);
~RT__INTERFACE__STORE__InterfaceElements_template();

void clean_up();
RT__INTERFACE__STORE__InterfaceElements_template& operator=(template_sel other_value);
RT__INTERFACE__STORE__InterfaceElements_template& operator=(null_type other_value);
RT__INTERFACE__STORE__InterfaceElements_template& operator=(const RT__INTERFACE__STORE__InterfaceElements& other_value);
RT__INTERFACE__STORE__InterfaceElements_template& operator=(const OPTIONAL<RT__INTERFACE__STORE__InterfaceElements>& other_value);
RT__INTERFACE__STORE__InterfaceElements_template& operator=(const RT__INTERFACE__STORE__InterfaceElements_template& other_value);

RT__INTERFACE__STORE__InterfaceElement_template& operator[](int index_value);
RT__INTERFACE__STORE__InterfaceElement_template& operator[](const INTEGER& index_value);
const RT__INTERFACE__STORE__InterfaceElement_template& operator[](int index_value) const;
const RT__INTERFACE__STORE__InterfaceElement_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const RT__INTERFACE__STORE__InterfaceElements& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
RT__INTERFACE__STORE__InterfaceElements valueof() const;
RT__INTERFACE__STORE__InterfaceElements substr(int index, int returncount) const;

RT__INTERFACE__STORE__InterfaceElements replace(int index, int len, const RT__INTERFACE__STORE__InterfaceElements_template& repl) const;

RT__INTERFACE__STORE__InterfaceElements replace(int index, int len, const RT__INTERFACE__STORE__InterfaceElements& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
RT__INTERFACE__STORE__InterfaceElements_template& list_item(unsigned int list_index);
void log() const;
void log_match(const RT__INTERFACE__STORE__InterfaceElements& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean get_istemplate_kind(const char* type) const;
};

class PT__INTERFACE__STORE__InterfaceStorePort : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
RT__INTERFACE__STORE__InterfaceElement *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
PT__INTERFACE__STORE__InterfaceStorePort(const char *par_port_name = NULL);
~PT__INTERFACE__STORE__InterfaceStorePort();
void send(const RT__INTERFACE__STORE__InterfaceElement& send_par, const COMPONENT& destination_component);
void send(const RT__INTERFACE__STORE__InterfaceElement& send_par);
void send(const RT__INTERFACE__STORE__InterfaceElement_template& send_par, const COMPONENT& destination_component);
void send(const RT__INTERFACE__STORE__InterfaceElement_template& send_par);
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const RT__INTERFACE__STORE__InterfaceElement_template& value_template, RT__INTERFACE__STORE__InterfaceElement *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const RT__INTERFACE__STORE__InterfaceElement_template& value_template, RT__INTERFACE__STORE__InterfaceElement *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const RT__INTERFACE__STORE__InterfaceElement_template& value_template, RT__INTERFACE__STORE__InterfaceElement *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
private:
void incoming_message(const RT__INTERFACE__STORE__InterfaceElement& incoming_par, component sender_component);
protected:
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const RT__INTERFACE__STORE__InterfaceElements& other_value);
inline boolean operator!=(null_type null_value, const RT__INTERFACE__STORE__InterfaceElements& other_value) { return !(null_value == other_value); }
extern void f__INTERFACE__STORE__InterfaceStore__getElement(const CHARSTRING& name, RT__INTERFACE__STORE__InterfaceElement& element, INTEGER& indexOfElement);
extern void start_f__INTERFACE__STORE__InterfaceStore__getElement(const COMPONENT& component_reference, const CHARSTRING& name, RT__INTERFACE__STORE__InterfaceElement& element, INTEGER& indexOfElement);
extern void f__INTERFACE__STORE__InterfaceStore();
extern void start_f__INTERFACE__STORE__InterfaceStore(const COMPONENT& component_reference);

/* Global variable declarations */

extern const TTCN_Typedescriptor_t UT__INTERFACE__STORE__Device_descr_;
extern const TTCN_Typedescriptor_t UT__INTERFACE__STORE__Controller_descr_;
extern const XERdescriptor_t RT__INTERFACE__STORE__InterfaceElement_Name_xer_;
extern const TTCN_JSONdescriptor_t RT__INTERFACE__STORE__InterfaceElement_Name_json_;
extern const TTCN_Typedescriptor_t RT__INTERFACE__STORE__InterfaceElement_Name_descr_;
extern const TTCN_Typedescriptor_t RT__INTERFACE__STORE__InterfaceElement_descr_;
extern const TTCN_Typedescriptor_t RT__INTERFACE__STORE__InterfaceElements_descr_;
extern const TTCN_Typedescriptor_t& CT__INTERFACE__STORE__InterfaceStore_descr_;
extern RT__INTERFACE__STORE__InterfaceElements CT__INTERFACE__STORE__InterfaceStore_component_StoredElement;
extern PT__INTERFACE__STORE__InterfaceStorePort CT__INTERFACE__STORE__InterfaceStore_component_p__interfaceStoreClient;
extern const TTCN_Typedescriptor_t& CT__INTERFACE__STORE__InterfaceStoreClient_descr_;
extern PT__INTERFACE__STORE__InterfaceStorePort CT__INTERFACE__STORE__InterfaceStoreClient_component_p__interfaceStore;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
