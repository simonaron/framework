// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for  (pi@pi-02) on Sat Apr 21 19:03:51 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LANGUAGE__DYNAMIC_HH
#define LANGUAGE__DYNAMIC_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef LANGUAGE__DYNAMIC_HH
#endif

namespace LANGUAGE__DYNAMIC {

/* Forward declarations of classes */

class LANGUAGE__DYNAMIC__Action;
class LANGUAGE__DYNAMIC__Action_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__CHARSTRING LANGUAGE__DYNAMIC__InterfaceAction_Parameters;
typedef PreGenRecordOf::PREGEN__RECORD__OF__CHARSTRING_template LANGUAGE__DYNAMIC__InterfaceAction_Parameters_template;
class LANGUAGE__DYNAMIC__InterfaceAction;
class LANGUAGE__DYNAMIC__InterfaceAction_template;
class LANGUAGE__DYNAMIC__ActionSequence;
class LANGUAGE__DYNAMIC__ActionSequence_template;

} /* end of namespace */

#ifndef LANGUAGE__DYNAMIC_HH
#define LANGUAGE__DYNAMIC_HH

namespace LANGUAGE__DYNAMIC {

/* Class definitions */

class LANGUAGE__DYNAMIC__Action : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_InterfaceAction = 1 };
private:
union_selection_type union_selection;
union {
LANGUAGE__DYNAMIC__InterfaceAction *field_InterfaceAction;
};
void copy_value(const LANGUAGE__DYNAMIC__Action& other_value);

public:
LANGUAGE__DYNAMIC__Action();
LANGUAGE__DYNAMIC__Action(const LANGUAGE__DYNAMIC__Action& other_value);
~LANGUAGE__DYNAMIC__Action();
LANGUAGE__DYNAMIC__Action& operator=(const LANGUAGE__DYNAMIC__Action& other_value);
boolean operator==(const LANGUAGE__DYNAMIC__Action& other_value) const;
inline boolean operator!=(const LANGUAGE__DYNAMIC__Action& other_value) const { return !(*this == other_value); }
LANGUAGE__DYNAMIC__InterfaceAction& InterfaceAction();
const LANGUAGE__DYNAMIC__InterfaceAction& InterfaceAction() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class LANGUAGE__DYNAMIC__Action_template : public Base_Template {
union {
struct {
LANGUAGE__DYNAMIC__Action::union_selection_type union_selection;
union {
LANGUAGE__DYNAMIC__InterfaceAction_template *field_InterfaceAction;
};
} single_value;
struct {
unsigned int n_values;
LANGUAGE__DYNAMIC__Action_template *list_value;
} value_list;
};
void copy_value(const LANGUAGE__DYNAMIC__Action& other_value);

void copy_template(const LANGUAGE__DYNAMIC__Action_template& other_value);

public:
LANGUAGE__DYNAMIC__Action_template();
LANGUAGE__DYNAMIC__Action_template(template_sel other_value);
LANGUAGE__DYNAMIC__Action_template(const LANGUAGE__DYNAMIC__Action& other_value);
LANGUAGE__DYNAMIC__Action_template(const OPTIONAL<LANGUAGE__DYNAMIC__Action>& other_value);
LANGUAGE__DYNAMIC__Action_template(const LANGUAGE__DYNAMIC__Action_template& other_value);
~LANGUAGE__DYNAMIC__Action_template();
void clean_up();
LANGUAGE__DYNAMIC__Action_template& operator=(template_sel other_value);
LANGUAGE__DYNAMIC__Action_template& operator=(const LANGUAGE__DYNAMIC__Action& other_value);
LANGUAGE__DYNAMIC__Action_template& operator=(const OPTIONAL<LANGUAGE__DYNAMIC__Action>& other_value);
LANGUAGE__DYNAMIC__Action_template& operator=(const LANGUAGE__DYNAMIC__Action_template& other_value);
boolean match(const LANGUAGE__DYNAMIC__Action& other_value, boolean legacy = FALSE) const;
boolean is_value() const;LANGUAGE__DYNAMIC__Action valueof() const;
LANGUAGE__DYNAMIC__Action_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
LANGUAGE__DYNAMIC__InterfaceAction_template& InterfaceAction();
const LANGUAGE__DYNAMIC__InterfaceAction_template& InterfaceAction() const;
boolean ischosen(LANGUAGE__DYNAMIC__Action::union_selection_type checked_selection) const;
void log() const;
void log_match(const LANGUAGE__DYNAMIC__Action& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class LANGUAGE__DYNAMIC__InterfaceAction {
  CHARSTRING field_InterfaceName;
  CHARSTRING field_Command;
  LANGUAGE__DYNAMIC__InterfaceAction_Parameters field_Parameters;
  OPTIONAL<FLOAT> field_Delay;
  OPTIONAL<FLOAT> field_Timeout;
public:
  LANGUAGE__DYNAMIC__InterfaceAction();
  LANGUAGE__DYNAMIC__InterfaceAction(const CHARSTRING& par_InterfaceName,
    const CHARSTRING& par_Command,
    const LANGUAGE__DYNAMIC__InterfaceAction_Parameters& par_Parameters,
    const OPTIONAL<FLOAT>& par_Delay,
    const OPTIONAL<FLOAT>& par_Timeout);
  LANGUAGE__DYNAMIC__InterfaceAction(const LANGUAGE__DYNAMIC__InterfaceAction& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  LANGUAGE__DYNAMIC__InterfaceAction& operator=(const LANGUAGE__DYNAMIC__InterfaceAction& other_value);
  boolean operator==(const LANGUAGE__DYNAMIC__InterfaceAction& other_value) const;
  inline boolean operator!=(const LANGUAGE__DYNAMIC__InterfaceAction& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& InterfaceName()
    {return field_InterfaceName;}
  inline const CHARSTRING& InterfaceName() const
    {return field_InterfaceName;}
  inline CHARSTRING& Command()
    {return field_Command;}
  inline const CHARSTRING& Command() const
    {return field_Command;}
  inline LANGUAGE__DYNAMIC__InterfaceAction_Parameters& Parameters()
    {return field_Parameters;}
  inline const LANGUAGE__DYNAMIC__InterfaceAction_Parameters& Parameters() const
    {return field_Parameters;}
  inline OPTIONAL<FLOAT>& Delay()
    {return field_Delay;}
  inline const OPTIONAL<FLOAT>& Delay() const
    {return field_Delay;}
  inline OPTIONAL<FLOAT>& Timeout()
    {return field_Timeout;}
  inline const OPTIONAL<FLOAT>& Timeout() const
    {return field_Timeout;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class LANGUAGE__DYNAMIC__InterfaceAction_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
LANGUAGE__DYNAMIC__InterfaceAction_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const LANGUAGE__DYNAMIC__InterfaceAction& other_value);
void copy_template(const LANGUAGE__DYNAMIC__InterfaceAction_template& other_value);

public:
LANGUAGE__DYNAMIC__InterfaceAction_template();
LANGUAGE__DYNAMIC__InterfaceAction_template(template_sel other_value);
LANGUAGE__DYNAMIC__InterfaceAction_template(const LANGUAGE__DYNAMIC__InterfaceAction& other_value);
LANGUAGE__DYNAMIC__InterfaceAction_template(const OPTIONAL<LANGUAGE__DYNAMIC__InterfaceAction>& other_value);
LANGUAGE__DYNAMIC__InterfaceAction_template(const LANGUAGE__DYNAMIC__InterfaceAction_template& other_value);
~LANGUAGE__DYNAMIC__InterfaceAction_template();
LANGUAGE__DYNAMIC__InterfaceAction_template& operator=(template_sel other_value);
LANGUAGE__DYNAMIC__InterfaceAction_template& operator=(const LANGUAGE__DYNAMIC__InterfaceAction& other_value);
LANGUAGE__DYNAMIC__InterfaceAction_template& operator=(const OPTIONAL<LANGUAGE__DYNAMIC__InterfaceAction>& other_value);
LANGUAGE__DYNAMIC__InterfaceAction_template& operator=(const LANGUAGE__DYNAMIC__InterfaceAction_template& other_value);
boolean match(const LANGUAGE__DYNAMIC__InterfaceAction& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
LANGUAGE__DYNAMIC__InterfaceAction valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
LANGUAGE__DYNAMIC__InterfaceAction_template& list_item(unsigned int list_index) const;
CHARSTRING_template& InterfaceName();
const CHARSTRING_template& InterfaceName() const;
CHARSTRING_template& Command();
const CHARSTRING_template& Command() const;
LANGUAGE__DYNAMIC__InterfaceAction_Parameters_template& Parameters();
const LANGUAGE__DYNAMIC__InterfaceAction_Parameters_template& Parameters() const;
FLOAT_template& Delay();
const FLOAT_template& Delay() const;
FLOAT_template& Timeout();
const FLOAT_template& Timeout() const;
int size_of() const;
void log() const;
void log_match(const LANGUAGE__DYNAMIC__InterfaceAction& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class LANGUAGE__DYNAMIC__ActionSequence : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
LANGUAGE__DYNAMIC__Action **value_elements;
} *val_ptr;

static const LANGUAGE__DYNAMIC__Action UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const LANGUAGE__DYNAMIC__ActionSequence& other_value);
static boolean compare_function(const Base_Type *left_ptr, int left_index, const Base_Type *right_ptr, int right_index);

public:
  typedef LANGUAGE__DYNAMIC__Action of_type;
LANGUAGE__DYNAMIC__ActionSequence();
LANGUAGE__DYNAMIC__ActionSequence(null_type other_value);
LANGUAGE__DYNAMIC__ActionSequence(const LANGUAGE__DYNAMIC__ActionSequence& other_value);
~LANGUAGE__DYNAMIC__ActionSequence();

void clean_up();
LANGUAGE__DYNAMIC__ActionSequence& operator=(null_type other_value);
LANGUAGE__DYNAMIC__ActionSequence& operator=(const LANGUAGE__DYNAMIC__ActionSequence& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const LANGUAGE__DYNAMIC__ActionSequence& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const LANGUAGE__DYNAMIC__ActionSequence& other_value) const { return !(*this == other_value); }

LANGUAGE__DYNAMIC__Action& operator[](int index_value);
LANGUAGE__DYNAMIC__Action& operator[](const INTEGER& index_value);
const LANGUAGE__DYNAMIC__Action& operator[](int index_value) const;
const LANGUAGE__DYNAMIC__Action& operator[](const INTEGER& index_value) const;

LANGUAGE__DYNAMIC__ActionSequence operator<<=(int rotate_count) const;
LANGUAGE__DYNAMIC__ActionSequence operator<<=(const INTEGER& rotate_count) const;
LANGUAGE__DYNAMIC__ActionSequence operator>>=(int rotate_count) const;
LANGUAGE__DYNAMIC__ActionSequence operator>>=(const INTEGER& rotate_count) const;

LANGUAGE__DYNAMIC__ActionSequence operator+(const LANGUAGE__DYNAMIC__ActionSequence& other_value) const;

LANGUAGE__DYNAMIC__ActionSequence substr(int index, int returncount) const;

LANGUAGE__DYNAMIC__ActionSequence replace(int index, int len, const LANGUAGE__DYNAMIC__ActionSequence& repl) const;

LANGUAGE__DYNAMIC__ActionSequence replace(int index, int len, const LANGUAGE__DYNAMIC__ActionSequence_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class LANGUAGE__DYNAMIC__ActionSequence_template : public Restricted_Length_Template {
union {
struct {
int n_elements;
LANGUAGE__DYNAMIC__Action_template **value_elements;
} single_value;
struct {
unsigned int n_values;
LANGUAGE__DYNAMIC__ActionSequence_template *list_value;
} value_list;
struct {
unsigned int n_items;
LANGUAGE__DYNAMIC__Action_template *set_items;
} value_set;
};
void copy_value(const LANGUAGE__DYNAMIC__ActionSequence& other_value);
void copy_template(const LANGUAGE__DYNAMIC__ActionSequence_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);
static boolean match_function_set(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);
static void log_function(const Base_Type *value_ptr, const Restricted_Length_Template *template_ptr, int index_value, int index_template, boolean legacy);

public:
LANGUAGE__DYNAMIC__ActionSequence_template();
LANGUAGE__DYNAMIC__ActionSequence_template(template_sel other_value);
LANGUAGE__DYNAMIC__ActionSequence_template(null_type other_value);
LANGUAGE__DYNAMIC__ActionSequence_template(const LANGUAGE__DYNAMIC__ActionSequence& other_value);
LANGUAGE__DYNAMIC__ActionSequence_template(const OPTIONAL<LANGUAGE__DYNAMIC__ActionSequence>& other_value);
LANGUAGE__DYNAMIC__ActionSequence_template(const LANGUAGE__DYNAMIC__ActionSequence_template& other_value);
~LANGUAGE__DYNAMIC__ActionSequence_template();

void clean_up();
LANGUAGE__DYNAMIC__ActionSequence_template& operator=(template_sel other_value);
LANGUAGE__DYNAMIC__ActionSequence_template& operator=(null_type other_value);
LANGUAGE__DYNAMIC__ActionSequence_template& operator=(const LANGUAGE__DYNAMIC__ActionSequence& other_value);
LANGUAGE__DYNAMIC__ActionSequence_template& operator=(const OPTIONAL<LANGUAGE__DYNAMIC__ActionSequence>& other_value);
LANGUAGE__DYNAMIC__ActionSequence_template& operator=(const LANGUAGE__DYNAMIC__ActionSequence_template& other_value);

LANGUAGE__DYNAMIC__Action_template& operator[](int index_value);
LANGUAGE__DYNAMIC__Action_template& operator[](const INTEGER& index_value);
const LANGUAGE__DYNAMIC__Action_template& operator[](int index_value) const;
const LANGUAGE__DYNAMIC__Action_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const LANGUAGE__DYNAMIC__ActionSequence& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
LANGUAGE__DYNAMIC__ActionSequence valueof() const;
LANGUAGE__DYNAMIC__ActionSequence substr(int index, int returncount) const;

LANGUAGE__DYNAMIC__ActionSequence replace(int index, int len, const LANGUAGE__DYNAMIC__ActionSequence_template& repl) const;

LANGUAGE__DYNAMIC__ActionSequence replace(int index, int len, const LANGUAGE__DYNAMIC__ActionSequence& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
LANGUAGE__DYNAMIC__ActionSequence_template& list_item(unsigned int list_index);
LANGUAGE__DYNAMIC__Action_template& set_item(unsigned int set_index);
void log() const;
void log_match(const LANGUAGE__DYNAMIC__ActionSequence& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean get_istemplate_kind(const char* type) const;
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const LANGUAGE__DYNAMIC__ActionSequence& other_value);
inline boolean operator!=(null_type null_value, const LANGUAGE__DYNAMIC__ActionSequence& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__Action_descr_;
extern const XERdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_InterfaceName_xer_;
extern const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_InterfaceName_json_;
extern const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_InterfaceName_descr_;
extern const XERdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Command_xer_;
extern const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Command_json_;
extern const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Command_descr_;
extern const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Parameters_descr_;
extern const XERdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Parameters_0_xer_;
extern const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Parameters_0_json_;
extern const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Parameters_0_descr_;
extern const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_descr_;
extern const XERdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Delay_xer_;
extern const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Delay_json_;
extern const TTCN_OERdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Delay_oer_;
extern const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Delay_descr_;
extern const XERdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Timeout_xer_;
extern const TTCN_JSONdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Timeout_json_;
extern const TTCN_OERdescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Timeout_oer_;
extern const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__InterfaceAction_Timeout_descr_;
extern const TTCN_Typedescriptor_t LANGUAGE__DYNAMIC__ActionSequence_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
