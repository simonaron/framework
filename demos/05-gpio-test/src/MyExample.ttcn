module MyExample
{
import from GPIOPinPort all;


type component MTC { }


type component PTCType {
	port GPIO_Pin_Port gpio4; //single port declaration
	timer t_short;
}

function PeerFunction(charstring name, boolean negative) runs on PTCType {
        log("Starting GPIO PIN port tests");
	log("Mapping port");
	
	if(negative){
		t_short.start(1.0);
	        t_short.timeout;
        }

	map(self:gpio4, system:gpio4);
	t_short.start(0.1);
	t_short.timeout;

	//Set direction on the gpio to OUT
	var GPIO_PIN_DIRECTION gpio4_direction := OUT;
	gpio4.send(gpio4_direction);

	for(var integer i := 0; i<5; i := i + 1) {
	
		var GPIO_PIN_VALUE gpio4_value := HIGH;
		gpio4.send(gpio4_value);

		t_short.start(1.0); //send a pulse of 1 second duration ; if a lED is connected, it will flash shortly
		t_short.timeout;

		gpio4_value := LOW;
		gpio4.send(gpio4_value);

		t_short.start(1.0); //send a pulse of 1 second duration ; if a lED is connected, it will flash shortly
		t_short.timeout;
		
	}

	//Unmap the port, this will unexport the gpio
	log("Unmapping ports");
	
	
	t_short.start(1.0);
	t_short.timeout;
	
	
	unmap(self:gpio4, system:gpio4);
	
	setverdict(pass);
}

testcase TC_GPIOPinTests_all_off() runs on MTC {
	  var PTCType A; A := PTCType.create("hc1");
	  var PTCType B; B := PTCType.create("hc2");

	  A.start(PeerFunction("A", false));
	  B.start(PeerFunction("B", true));
	  
	  all component.done;
}

control {
  execute(TC_GPIOPinTests_all_off());
  
}
}
