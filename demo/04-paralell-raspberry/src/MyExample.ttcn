module MyExample
{

type record Action {charstring name, charstring msg};
type set of Action ActionList;

modulepar ActionList tsp_callFlow := { };

type port MyPortType message
{ inout charstring; } with { extension "internal" }

type component MTCType { }

type component PTCType
{ port MyPortType MyPort; }

function PeerFunction(charstring name, boolean negative) runs on PTCType {
  log(name, " started.");

  for(var integer i := 0; i< lengthof(tsp_callFlow); i := i + 1) {
    var Action act := tsp_callFlow[i];
    timer T := 1.0;
    T.start;
    if (negative xor act.name=="rec") {
      //log(name, " RECEIVE.");
      alt {
        [] MyPort.receive(act.msg) { T.stop; log(name, " RECEIVE: ", act.msg); setverdict(pass); }
        [] T.timeout { setverdict(inconc); }
        [] MyPort.receive { T.stop; setverdict(fail); }
      }
    } else {
      log(name, " SEND: ", act.msg);
      MyPort.send(act.msg);
    }
  }
}

testcase PlayCallflow() runs on MTCType system MTCType
{
  log(tsp_callFlow);

  var PTCType A; A := PTCType.create("hc1");
  var PTCType B; B := PTCType.create("hc2");
  
  connect(A:MyPort, B:MyPort);

  A.start(PeerFunction("A", false));
  B.start(PeerFunction("B", true));
  
  all component.done;
  //map(mtc:MyPCO, system:MyPCO);
  //MyPCO.send("KISCICA!");
  //setverdict(pass);
}

control
{
  execute(PlayCallflow());
}
}
