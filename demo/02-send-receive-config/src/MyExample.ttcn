module MyExample
{

type port MyPortType message
{ inout charstring; } with { extension "internal" }

type component MTCType { }

type component PTCType
{ port MyPortType MyPort; }

function PeerFunction(charstring name, boolean negative) runs on PTCType {
  log(name, " started.");

  timer T := 1.0;
  T.start;
  if (negative) {
    alt {
      [] MyPort.receive("MESSAGE") { T.stop; setverdict(pass); }
      [] T.timeout { setverdict(inconc); }
      [] MyPort.receive { T.stop; setverdict(fail); }
    }
  } else {
    MyPort.send("MESSAGE");
  }
}

testcase PlayCallflow() runs on MTCType system MTCType
{
  var PTCType A; A := PTCType.create;
  var PTCType B; B := PTCType.create;
  
  connect(A:MyPort, B:MyPort);

  A.start(PeerFunction("A", false));
  B.start(PeerFunction("B", true));
  
  all component.done;
  //map(mtc:MyPCO, system:MyPCO);
  //MyPCO.send("KISCICA!");
  //setverdict(pass);
}

control
{
  execute(PlayCallflow());
}
}
