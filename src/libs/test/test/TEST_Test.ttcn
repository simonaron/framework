module TEST_Test {
	import from TEST_API_Definitions all;
	import from TEST_API_Functions all;
	
	import from TEST_Definitions all;
	import from TEST_Functions all;
		
	testcase tc_TEST_UnitTest__Subject__expexted_pass__receive_pass() runs on CT_TEST_API_Watcher {
	  f_TEST_API_UnitTest_Start("tc_TEST_UnitTest__Subject__expexted_pass__receive_pass");
	  
	  var CT_TEST_Subject ct_subject := CT_TEST_Subject.create alive;
	  f_TEST_API_Watcher_watch(ct_subject);
	  
	  ct_subject.start(f_TEST_Subject_setverdict(pass, "OK"));
	  ct_subject.done;
	  f_TEST_API_Watcher_getverdict(pass, "OK");
	  
	  f_TEST_API_UnitTest_Finished();
	}
	
	testcase tc_TEST_UnitTest__Subject__expexted_inconc__receive_inconc() runs on CT_TEST_API_Watcher {
	  f_TEST_API_UnitTest_Start("tc_TEST_UnitTest__Subject__expexted_inconc__receive_inconc");
	  
	  var CT_TEST_Subject ct_subject := CT_TEST_Subject.create alive;
	  f_TEST_API_Watcher_watch(ct_subject);
	  
	  ct_subject.start(f_TEST_Subject_setverdict(inconc, "OK"));
	  ct_subject.done;
	  f_TEST_API_Watcher_getverdict(inconc, "OK");
	  
	  f_TEST_API_UnitTest_Finished();
	}
	
	testcase tc_TEST_UnitTest__Subject__expexted_fail__receive_fail() runs on CT_TEST_API_Watcher {
	  f_TEST_API_UnitTest_Start("tc_TEST_UnitTest__Subject__expexted_fail__receive_fail");
	  
	  var CT_TEST_Subject ct_subject := CT_TEST_Subject.create alive;
	  f_TEST_API_Watcher_watch(ct_subject);
	  
	  ct_subject.start(f_TEST_Subject_setverdict(fail, "NOT OK"));
	  ct_subject.done;
	  f_TEST_API_Watcher_getverdict(fail, "NOT OK");
	  
	  f_TEST_API_UnitTest_Finished();
	}
	
	testcase tc_TEST_UnitTest__Subject__receive_more_expected() runs on CT_TEST_API_Watcher {
	  f_TEST_API_UnitTest_Start("tc_TEST_UnitTest__Subject__receive_more_expected");
	  
	  var CT_TEST_Subject ct_subject := CT_TEST_Subject.create alive;
	  f_TEST_API_Watcher_watch(ct_subject);
	  
	  ct_subject.start(f_TEST_Subject_setverdict(fail, "NOT OK"));
	  ct_subject.done;
	  f_TEST_API_Watcher_getverdict(fail, "NOT OK");
	  
	  ct_subject.start(f_TEST_Subject_setverdict(inconc, "OK"));
	  ct_subject.done;
	  f_TEST_API_Watcher_getverdict(inconc, "OK");
	  
	  ct_subject.start(f_TEST_Subject_setverdict(fail, "NOT OK"));
	  ct_subject.done;
	  f_TEST_API_Watcher_getverdict(fail, "NOT OK");
	  
	  f_TEST_API_UnitTest_Finished();
	}
	
	testcase tc_TEST_UnitTest__Watcher__not_expected_receive() runs on CT_TEST_API_Watcher {
	  f_TEST_API_UnitTest_Start("tc_TEST_UnitTest__Watcher__not_expected_receive");
	  
	  var CT_TEST_Watcher ct_watcher := CT_TEST_Watcher.create alive;
	  f_TEST_API_Watcher_watch(ct_watcher);
	  
	  var CT_TEST_Subject ct_subject := CT_TEST_Subject.create alive;
	  ct_watcher.start(f_TEST_Watcher_watch(ct_subject));
	  ct_watcher.done;
	  ct_subject.start(f_TEST_Subject_setverdict(fail, "NOT OK"));
	  ct_subject.done;
	  ct_watcher.start(f_TEST_Watcher_getverdict(pass, "OK"));
	  ct_watcher.done;
	  f_TEST_API_Watcher_getverdict(
	  	fail, log2str(
	  		"( fail )  Unexpected verdict received: ", RT_TEST_Verdict:{verdict:= fail, reason:= "NOT OK"},
	  			   " - Expected: ", 				   RT_TEST_Verdict:{verdict:= pass, reason:= "OK"}
	  	)
	  );
	  
	  f_TEST_API_UnitTest_Finished();
	}
	
	testcase tc_TEST_UnitTest__Watcher__expected_receive() runs on CT_TEST_API_Watcher {
	  f_TEST_API_UnitTest_Start("tc_TEST_UnitTest__Watcher__expected_receive");
	  
	  var CT_TEST_Watcher ct_watcher := CT_TEST_Watcher.create alive;
	  f_TEST_API_Watcher_watch(ct_watcher);
	  
	  var CT_TEST_Subject ct_subject := CT_TEST_Subject.create alive;
	  ct_watcher.start(f_TEST_Watcher_watch(ct_subject));
	  ct_watcher.done;
	  ct_subject.start(f_TEST_Subject_setverdict(fail, "NOT OK"));
	  ct_subject.done;
	  ct_watcher.start(f_TEST_Watcher_getverdict(fail, "NOT OK"));
	  ct_watcher.done;
	  f_TEST_API_Watcher_getverdict(
	  	pass, log2str(
	  		"( pass )  Expected verdict received: ", RT_TEST_Verdict:{verdict:= fail, reason:= "NOT OK"}
	  	)
	  );
	  
	  f_TEST_API_UnitTest_Finished();
	}
	
	testcase tc_TEST_UnitTest__Watcher__receive_timeout() runs on CT_TEST_API_Watcher {
	  f_TEST_API_UnitTest_Start("tc_TEST_UnitTest__Watcher__receive_timeout");
	  
	  var CT_TEST_Watcher ct_watcher := CT_TEST_Watcher.create alive;
	  f_TEST_API_Watcher_watch(ct_watcher);
	  
	  var CT_TEST_Subject ct_subject := CT_TEST_Subject.create alive;
	  ct_watcher.start(f_TEST_Watcher_watch(ct_subject));
	  ct_watcher.done;
	  ct_watcher.start(f_TEST_Watcher_getverdict(fail, "NOT OK", 0.1));
	  ct_watcher.done;
	  f_TEST_API_Watcher_getverdict(
	  	inconc, "( inconc )  Receive verdict timeout."
	  );
	  
	  f_TEST_API_UnitTest_Finished();
	}
	
	control {
	  execute(tc_TEST_UnitTest__Subject__expexted_pass__receive_pass())
	  execute(tc_TEST_UnitTest__Subject__expexted_inconc__receive_inconc())
	  execute(tc_TEST_UnitTest__Subject__expexted_fail__receive_fail())
	  execute(tc_TEST_UnitTest__Subject__receive_more_expected())
	  
	  execute(tc_TEST_UnitTest__Watcher__not_expected_receive())
	  execute(tc_TEST_UnitTest__Watcher__expected_receive())
	  execute(tc_TEST_UnitTest__Watcher__receive_timeout())
	}
	
}
